/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_batchnorm_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "sycldnn/data_format.h"

#include "sycldnn/batchnorm/direction.h"
#include "sycldnn/batchnorm/params.h"

#include "test/batchnorm/batchnorm_fixture.h"
#include "test/types/kernel_data_types.h"

#include <vector>

using namespace sycldnn;  // NOLINT(google-build-using-namespace)
template <typename DataType>
using BatchnormForwardTraining =
    BatchNormFixture<DataType, batchnorm::Forward, batchnorm::Training>;
TYPED_TEST_CASE(BatchnormForwardTraining, types::GTestKernelDataTypes);
TYPED_TEST(BatchnormForwardTraining, 1x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0.};
  const std::vector<DataType> mean = {1.};
  const std::vector<DataType> variance = {0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 0.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 1., 2., 1.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 2.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503, -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,  -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,  1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.1542677690948733, -0.2885669422737185, 0.5771338845474361,
      1.442834711368591,   -1.1542677690948733, -0.2885669422737185,
      0.5771338845474361,  1.442834711368591,   -1.1542677690948733};
  const std::vector<DataType> mean = {2.3333333333333335};
  const std::vector<DataType> variance = {1.3333333333333333};
  const std::array<int, 4> in_shape = {{1, 1, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.154267769094873,   -0.41684536590733523, 0.41684536590733545,
      1.154267769094873,    -1.154267769094873,   -0.2885669422737185,
      0.5210567073841688,   1.3547474391988397,   -1.4428347113685913,
      -0.2885669422737185,  0.5771338845474361,   1.458958780675673,
      -1.4589587806756725,  -0.5771338845474365,  0.5771338845474361,
      1.4428347113685906,   -1.3547474391988392,  -0.5210567073841685,
      0.28856694227371804,  1.4428347113685906,   -1.154267769094873,
      -0.41684536590733523, 0.41684536590733545,  1.154267769094873,
      -1.154267769094873,   -0.2885669422737185,  0.5210567073841688,
      1.3547474391988397,   -1.4428347113685913,  -0.2885669422737185,
      0.5771338845474361,   1.458958780675673,    -1.4589587806756725,
      -0.5771338845474365,  0.5771338845474361,   1.4428347113685906,
      -1.3547474391988392,  -0.5210567073841685,  0.28856694227371804,
      1.4428347113685906,   -1.154267769094873,   -0.41684536590733523,
      0.41684536590733545,  1.154267769094873,    -1.154267769094873};
  const std::vector<DataType> mean = {2.3333333333333335, 2.4444444444444446,
                                      2.5555555555555554, 2.6666666666666665,
                                      2.3333333333333335};
  const std::vector<DataType> variance = {
      1.3333333333333335, 1.1358024691358024, 1.1358024691358024,
      1.3333333333333333, 1.3333333333333335};
  const std::array<int, 4> in_shape = {{1, 1, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x1x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503, -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,  -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,  1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x8x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.1542677690948733, -0.2885669422737185, 0.5771338845474361,
      1.442834711368591,   -1.1542677690948733, -0.2885669422737185,
      0.5771338845474361,  1.442834711368591,   -1.1542677690948733};
  const std::vector<DataType> mean = {2.3333333333333335};
  const std::vector<DataType> variance = {1.3333333333333333};
  const std::array<int, 4> in_shape = {{1, 9, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.154267769094873,   -0.41684536590733523, 0.41684536590733545,
      1.154267769094873,    -1.154267769094873,   -0.2885669422737185,
      0.5210567073841688,   1.3547474391988397,   -1.4428347113685913,
      -0.2885669422737185,  0.5771338845474361,   1.458958780675673,
      -1.4589587806756725,  -0.5771338845474365,  0.5771338845474361,
      1.4428347113685906,   -1.3547474391988392,  -0.5210567073841685,
      0.28856694227371804,  1.4428347113685906,   -1.154267769094873,
      -0.41684536590733523, 0.41684536590733545,  1.154267769094873,
      -1.154267769094873,   -0.2885669422737185,  0.5210567073841688,
      1.3547474391988397,   -1.4428347113685913,  -0.2885669422737185,
      0.5771338845474361,   1.458958780675673,    -1.4589587806756725,
      -0.5771338845474365,  0.5771338845474361,   1.4428347113685906,
      -1.3547474391988392,  -0.5210567073841685,  0.28856694227371804,
      1.4428347113685906,   -1.154267769094873,   -0.41684536590733523,
      0.41684536590733545,  1.154267769094873,    -1.154267769094873};
  const std::vector<DataType> mean = {2.3333333333333335, 2.4444444444444446,
                                      2.5555555555555554, 2.6666666666666665,
                                      2.3333333333333335};
  const std::vector<DataType> variance = {
      1.3333333333333335, 1.1358024691358024, 1.1358024691358024,
      1.3333333333333333, 1.3333333333333335};
  const std::array<int, 4> in_shape = {{1, 9, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 9, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287,
      -0.42842760016684167, 0.4613835694104451,   1.3511947389877323,
      -1.3182387697441287,  -0.42842760016684167, 0.4613835694104451,
      1.3511947389877323,   -1.3182387697441287,  -0.42842760016684167,
      0.4613835694104451,   1.3511947389877323,   -1.3182387697441287};
  const std::vector<DataType> mean = {2.4814814814814814};
  const std::vector<DataType> variance = {1.262002743484225};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128,
      -0.42842760016684167, 0.454810473209176,    1.3422455428856166,
      -1.351194738987732,   -0.42842760016684145, 0.4613835694104451,
      1.3533384812565723,   -1.3533384812565723,  -0.4613835694104451,
      0.4613835694104451,   1.3511947389877323,   -1.3422455428856166,
      -0.454810473209176,   0.42842760016684167,  1.3511947389877315,
      -1.3182387697441287,  -0.4437175348382203,  0.4437175348382203,
      1.3182387697441285,   -1.318238769744128,   -0.42842760016684167,
      0.454810473209176,    1.3422455428856166,   -1.351194738987732,
      -0.42842760016684145, 0.4613835694104451,   1.3533384812565723,
      -1.3533384812565723,  -0.4613835694104451,  0.4613835694104451,
      1.3511947389877323,   -1.3422455428856166,  -0.454810473209176,
      0.42842760016684167,  1.3511947389877315,   -1.3182387697441287,
      -0.4437175348382203,  0.4437175348382203,   1.3182387697441285,
      -1.318238769744128,   -0.42842760016684167, 0.454810473209176,
      1.3422455428856166,   -1.351194738987732,   -0.42842760016684145,
      0.4613835694104451,   1.3533384812565723,   -1.3533384812565723,
      -0.4613835694104451,  0.4613835694104451,   1.3511947389877323,
      -1.3422455428856166,  -0.454810473209176,   0.42842760016684167,
      1.3511947389877315,   -1.3182387697441287,  -0.4437175348382203,
      0.4437175348382203,   1.3182387697441285,   -1.318238769744128};
  const std::vector<DataType> mean = {2.4814814814814814, 2.493827160493827,
                                      2.506172839506173, 2.5185185185185186,
                                      2.4814814814814814};
  const std::vector<DataType> variance = {1.262002743484225, 1.237616217040085,
                                          1.237616217040085, 1.2620027434842251,
                                          1.262002743484226};
  const std::array<int, 4> in_shape = {{1, 9, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 1x9x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0.};
  const std::vector<DataType> mean = {1.};
  const std::vector<DataType> variance = {0.};
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 1.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -0.7055211404639925, 0.7055211404639925,  -0.7055211404639925,
      0.7055211404639925,  -0.7055211404639925, 1.4110422809279854,
      -1.4110422809279854, 1.4110422809279854,  -1.4110422809279854,
      1.4110422809279854,  -0.7055211404639925, 0.7055211404639925,
      -0.7055211404639925, 0.7055211404639925,  -0.7055211404639925};
  const std::vector<DataType> mean = {1.3333333333333333, 1.6666666666666667,
                                      1.3333333333333333, 1.6666666666666667,
                                      1.3333333333333333};
  const std::vector<DataType> variance = {
      0.2222222222222222, 0.2222222222222222, 0.2222222222222222,
      0.2222222222222222, 0.2222222222222222};
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 2.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0., 0., 0., 0.,
                                         0., 0., 0., 0., 0., 0., 0., 0.,
                                         0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817,
      1.4136294790194688,  -1.3126559448037929, -0.4038941368627056,
      0.5048676710783817,  1.4136294790194688,  -1.3126559448037929,
      -0.4038941368627056, 0.5048676710783817,  1.4136294790194688,
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817,
      1.4136294790194688,  -1.3126559448037929, -0.4038941368627056,
      0.5048676710783817,  1.4136294790194688,  -1.3126559448037929,
      -0.4038941368627056, 0.5048676710783817,  1.4136294790194688,
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817};
  const std::vector<DataType> mean = {2.4444444444444446};
  const std::vector<DataType> variance = {1.2098765432098768};
  const std::array<int, 4> in_shape = {{3, 1, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817,
      1.4136294790194688,   -1.4136294790194688,  -0.4569386753436193,
      0.4569386753436193,   1.4136294790194688,   -1.312655944803793,
      -0.5048676710783815,  0.42430019853336054,  1.3381775492205992,
      -1.3126559448037929,  -0.4038941368627058,  0.4038941368627058,
      1.3055390724103404,   -1.3055390724103404,  -0.4038941368627056,
      0.5048676710783813,   1.3126559448037929,   -1.3381775492205992,
      -0.42430019853336054, 0.5048676710783817,   1.4136294790194688,
      -1.4136294790194688,  -0.4569386753436193,  0.4569386753436193,
      1.4136294790194688,   -1.312655944803793,   -0.5048676710783815,
      0.42430019853336054,  1.3381775492205992,   -1.3126559448037929,
      -0.4038941368627058,  0.4038941368627058,   1.3055390724103404,
      -1.3055390724103404,  -0.4038941368627056,  0.5048676710783813,
      1.3126559448037929,   -1.3381775492205992,  -0.42430019853336054,
      0.5048676710783817,   1.4136294790194688,   -1.4136294790194688,
      -0.4569386753436193,  0.4569386753436193,   1.4136294790194688,
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817,
      1.4136294790194688,   -1.4136294790194688,  -0.4569386753436193,
      0.4569386753436193,   1.4136294790194688,   -1.312655944803793,
      -0.5048676710783815,  0.42430019853336054,  1.3381775492205992,
      -1.3126559448037929,  -0.4038941368627058,  0.4038941368627058,
      1.3055390724103404,   -1.3055390724103404,  -0.4038941368627056,
      0.5048676710783813,   1.3126559448037929,   -1.3381775492205992,
      -0.42430019853336054, 0.5048676710783817,   1.4136294790194688,
      -1.4136294790194688,  -0.4569386753436193,  0.4569386753436193,
      1.4136294790194688,   -1.312655944803793,   -0.5048676710783815,
      0.42430019853336054,  1.3381775492205992,   -1.3126559448037929,
      -0.4038941368627058,  0.4038941368627058,   1.3055390724103404,
      -1.3055390724103404,  -0.4038941368627056,  0.5048676710783813,
      1.3126559448037929,   -1.3381775492205992,  -0.42430019853336054,
      0.5048676710783817,   1.4136294790194688,   -1.4136294790194688,
      -0.4569386753436193,  0.4569386753436193,   1.4136294790194688,
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817};
  const std::vector<DataType> mean = {2.4444444444444446, 2.5555555555555554,
                                      2.5185185185185186, 2.4814814814814814,
                                      2.4444444444444446};
  const std::vector<DataType> variance = {
      1.2098765432098764, 1.2098765432098768, 1.286694101508916,
      1.2866941015089164, 1.2098765432098768};
  const std::array<int, 4> in_shape = {{3, 1, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x1x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x8x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817,
      1.4136294790194688,  -1.3126559448037929, -0.4038941368627056,
      0.5048676710783817,  1.4136294790194688,  -1.3126559448037929,
      -0.4038941368627056, 0.5048676710783817,  1.4136294790194688,
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817,
      1.4136294790194688,  -1.3126559448037929, -0.4038941368627056,
      0.5048676710783817,  1.4136294790194688,  -1.3126559448037929,
      -0.4038941368627056, 0.5048676710783817,  1.4136294790194688,
      -1.3126559448037929, -0.4038941368627056, 0.5048676710783817};
  const std::vector<DataType> mean = {2.4444444444444446};
  const std::vector<DataType> variance = {1.2098765432098768};
  const std::array<int, 4> in_shape = {{3, 9, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817,
      1.4136294790194688,   -1.4136294790194688,  -0.4569386753436193,
      0.4569386753436193,   1.4136294790194688,   -1.312655944803793,
      -0.5048676710783815,  0.42430019853336054,  1.3381775492205992,
      -1.3126559448037929,  -0.4038941368627058,  0.4038941368627058,
      1.3055390724103404,   -1.3055390724103404,  -0.4038941368627056,
      0.5048676710783813,   1.3126559448037929,   -1.3381775492205992,
      -0.42430019853336054, 0.5048676710783817,   1.4136294790194688,
      -1.4136294790194688,  -0.4569386753436193,  0.4569386753436193,
      1.4136294790194688,   -1.312655944803793,   -0.5048676710783815,
      0.42430019853336054,  1.3381775492205992,   -1.3126559448037929,
      -0.4038941368627058,  0.4038941368627058,   1.3055390724103404,
      -1.3055390724103404,  -0.4038941368627056,  0.5048676710783813,
      1.3126559448037929,   -1.3381775492205992,  -0.42430019853336054,
      0.5048676710783817,   1.4136294790194688,   -1.4136294790194688,
      -0.4569386753436193,  0.4569386753436193,   1.4136294790194688,
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817,
      1.4136294790194688,   -1.4136294790194688,  -0.4569386753436193,
      0.4569386753436193,   1.4136294790194688,   -1.312655944803793,
      -0.5048676710783815,  0.42430019853336054,  1.3381775492205992,
      -1.3126559448037929,  -0.4038941368627058,  0.4038941368627058,
      1.3055390724103404,   -1.3055390724103404,  -0.4038941368627056,
      0.5048676710783813,   1.3126559448037929,   -1.3381775492205992,
      -0.42430019853336054, 0.5048676710783817,   1.4136294790194688,
      -1.4136294790194688,  -0.4569386753436193,  0.4569386753436193,
      1.4136294790194688,   -1.312655944803793,   -0.5048676710783815,
      0.42430019853336054,  1.3381775492205992,   -1.3126559448037929,
      -0.4038941368627058,  0.4038941368627058,   1.3055390724103404,
      -1.3055390724103404,  -0.4038941368627056,  0.5048676710783813,
      1.3126559448037929,   -1.3381775492205992,  -0.42430019853336054,
      0.5048676710783817,   1.4136294790194688,   -1.4136294790194688,
      -0.4569386753436193,  0.4569386753436193,   1.4136294790194688,
      -1.312655944803793,   -0.5048676710783815,  0.42430019853336054,
      1.3381775492205992,   -1.3126559448037929,  -0.4038941368627058,
      0.4038941368627058,   1.3055390724103404,   -1.3055390724103404,
      -0.4038941368627056,  0.5048676710783813,   1.3126559448037929,
      -1.3381775492205992,  -0.42430019853336054, 0.5048676710783817};
  const std::vector<DataType> mean = {2.4444444444444446, 2.5555555555555554,
                                      2.5185185185185186, 2.4814814814814814,
                                      2.4444444444444446};
  const std::vector<DataType> variance = {
      1.2098765432098764, 1.2098765432098768, 1.286694101508916,
      1.2866941015089164, 1.2098765432098768};
  const std::array<int, 4> in_shape = {{3, 9, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503,
      -1.3411044519645503,  -0.44703481732151684, 0.4470348173215166,
      1.3411044519645503,   -1.3411044519645503,  -0.44703481732151684,
      0.4470348173215166,   1.3411044519645503,   -1.3411044519645503,
      -0.44703481732151684, 0.4470348173215166,   1.3411044519645503};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 9, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711,
      1.3488643823120263,   -1.337808116883239,   -0.44225061715148395,
      0.4533068825802711,   1.3488643823120263,   -1.337808116883239,
      -0.44225061715148395, 0.4533068825802711,   1.3488643823120263,
      -1.337808116883239,   -0.44225061715148395, 0.4533068825802711};
  const std::vector<DataType> mean = {2.493827160493827};
  const std::vector<DataType> variance = {1.2458466697149824};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711,
      1.3488643823120259,   -1.3488643823120259,  -0.44813874175713075,
      0.44813874175713053,  1.3488643823120259,   -1.3378081168832385,
      -0.4533068825802711,  0.4444654733820719,   1.340742956896333,
      -1.337808116883239,   -0.4422506171514837,  0.4422506171514837,
      1.3370696885212743,   -1.3370696885212747,  -0.44225061715148395,
      0.4533068825802711,   1.3378081168832385,   -1.3407429568963334,
      -0.4444654733820721,  0.4533068825802711,   1.3488643823120259,
      -1.3488643823120259,  -0.44813874175713075, 0.44813874175713053,
      1.3488643823120259,   -1.3378081168832385,  -0.4533068825802711,
      0.4444654733820719,   1.340742956896333,    -1.337808116883239,
      -0.4422506171514837,  0.4422506171514837,   1.3370696885212743,
      -1.3370696885212747,  -0.44225061715148395, 0.4533068825802711,
      1.3378081168832385,   -1.3407429568963334,  -0.4444654733820721,
      0.4533068825802711,   1.3488643823120259,   -1.3488643823120259,
      -0.44813874175713075, 0.44813874175713053,  1.3488643823120259,
      -1.3378081168832385,  -0.4533068825802711,  0.4444654733820719,
      1.340742956896333,    -1.337808116883239,   -0.4422506171514837,
      0.4422506171514837,   1.3370696885212743,   -1.3370696885212747,
      -0.44225061715148395, 0.4533068825802711,   1.3378081168832385,
      -1.3407429568963334,  -0.4444654733820721,  0.4533068825802711};
  const std::vector<DataType> mean = {2.493827160493827, 2.506172839506173,
                                      2.5020576131687244, 2.4979423868312756,
                                      2.493827160493827};
  const std::vector<DataType> variance = {
      1.2458466697149835, 1.2458466697149835, 1.254110992565497,
      1.254110992565497, 1.2458466697149828};
  const std::array<int, 4> in_shape = {{3, 9, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardTraining, 3x9x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
