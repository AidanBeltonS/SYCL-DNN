/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_batchnorm_tests.py.
// Results calculated using Tensorflow v2.5.0.

#include <gtest/gtest.h>

#include "sycldnn/data_format.h"

#include "sycldnn/batchnorm/direction.h"
#include "sycldnn/batchnorm/params.h"

#include "test/batchnorm/batchnorm_fixture.h"
#include "test/types/kernel_data_types.h"

#include <vector>

using namespace sycldnn;  // NOLINT(google-build-using-namespace)
template <typename DataType>
using BatchnormForwardInference =
    BatchNormFixture<DataType, batchnorm::Forward, batchnorm::Inference>;
TYPED_TEST_CASE(BatchnormForwardInference, types::GTestKernelDataTypes);
TYPED_TEST(BatchnormForwardInference, 1x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0.};
  const std::vector<DataType> mean = {1.};
  const std::vector<DataType> variance = {0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 0.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 1., 2., 1.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 2.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {-1.3411043, -0.44703472, 0.44703484,
                                         1.3411045,  -1.3411043,  -0.44703472,
                                         0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {-1.1542675, -0.28856683, 0.5771339,
                                         1.4428346,  -1.1542675,  -0.28856683,
                                         0.5771339,  1.4428346,   -1.1542675};
  const std::vector<DataType> mean = {2.3333333};
  const std::vector<DataType> variance = {1.3333335};
  const std::array<int, 4> in_shape = {{1, 1, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.1542675, -0.41684544, 0.41684532, 1.1542675,   -1.1542675, -0.28856683,
      0.52105665, 1.3547473,   -1.4428346, -0.28856683, 0.5771339,  1.4589586,
      -1.4589589, -0.5771339,  0.5771339,  1.4428346,   -1.3547475, -0.5210568,
      0.28856683, 1.4428346,   -1.1542675, -0.41684544, 0.41684532, 1.1542675,
      -1.1542675, -0.28856683, 0.52105665, 1.3547473,   -1.4428346, -0.28856683,
      0.5771339,  1.4589586,   -1.4589589, -0.5771339,  0.5771339,  1.4428346,
      -1.3547475, -0.5210568,  0.28856683, 1.4428346,   -1.1542675, -0.41684544,
      0.41684532, 1.1542675,   -1.1542675};
  const std::vector<DataType> mean = {2.3333333, 2.4444444, 2.5555556,
                                      2.6666667, 2.3333333};
  const std::vector<DataType> variance = {1.3333335, 1.1358024, 1.1358025,
                                          1.3333335, 1.3333335};
  const std::array<int, 4> in_shape = {{1, 1, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x1x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 1, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {-1.3411043, -0.44703472, 0.44703484,
                                         1.3411045,  -1.3411043,  -0.44703472,
                                         0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 8, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x8x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {-1.1542675, -0.28856683, 0.5771339,
                                         1.4428346,  -1.1542675,  -0.28856683,
                                         0.5771339,  1.4428346,   -1.1542675};
  const std::vector<DataType> mean = {2.3333333};
  const std::vector<DataType> variance = {1.3333335};
  const std::array<int, 4> in_shape = {{1, 9, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.1542675, -0.41684544, 0.41684532, 1.1542675,   -1.1542675, -0.28856683,
      0.52105665, 1.3547473,   -1.4428346, -0.28856683, 0.5771339,  1.4589586,
      -1.4589589, -0.5771339,  0.5771339,  1.4428346,   -1.3547475, -0.5210568,
      0.28856683, 1.4428346,   -1.1542675, -0.41684544, 0.41684532, 1.1542675,
      -1.1542675, -0.28856683, 0.52105665, 1.3547473,   -1.4428346, -0.28856683,
      0.5771339,  1.4589586,   -1.4589589, -0.5771339,  0.5771339,  1.4428346,
      -1.3547475, -0.5210568,  0.28856683, 1.4428346,   -1.1542675, -0.41684544,
      0.41684532, 1.1542675,   -1.1542675};
  const std::vector<DataType> mean = {2.3333333, 2.4444444, 2.5555556,
                                      2.6666667, 2.3333333};
  const std::vector<DataType> variance = {1.3333335, 1.1358024, 1.1358025,
                                          1.3333335, 1.3333335};
  const std::array<int, 4> in_shape = {{1, 9, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{1, 9, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387, -0.42842758, 0.46138358, 1.3511949,
      -1.3182387, -0.42842758, 0.46138358, 1.3511949,   -1.3182387, -0.42842758,
      0.46138358, 1.3511949,   -1.3182387};
  const std::vector<DataType> mean = {2.4814816};
  const std::vector<DataType> variance = {1.2620027};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387, -0.42842758, 0.45481038, 1.3422453,
      -1.3511946, -0.42842758, 0.46138358, 1.3533385,   -1.3533386, -0.46138346,
      0.46138358, 1.3511949,   -1.3422455, -0.45481062, 0.4284277,  1.3511949,
      -1.3182387, -0.44371748, 0.44371724, 1.318239,    -1.3182387, -0.42842758,
      0.45481038, 1.3422453,   -1.3511946, -0.42842758, 0.46138358, 1.3533385,
      -1.3533386, -0.46138346, 0.46138358, 1.3511949,   -1.3422455, -0.45481062,
      0.4284277,  1.3511949,   -1.3182387, -0.44371748, 0.44371724, 1.318239,
      -1.3182387, -0.42842758, 0.45481038, 1.3422453,   -1.3511946, -0.42842758,
      0.46138358, 1.3533385,   -1.3533386, -0.46138346, 0.46138358, 1.3511949,
      -1.3422455, -0.45481062, 0.4284277,  1.3511949,   -1.3182387, -0.44371748,
      0.44371724, 1.318239,    -1.3182387};
  const std::vector<DataType> mean = {2.4814816, 2.493827, 2.506173, 2.5185184,
                                      2.4814816};
  const std::vector<DataType> variance = {1.2620025, 1.2376163, 1.2376163,
                                          1.2620025, 1.2620025};
  const std::array<int, 4> in_shape = {{1, 9, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 1x9x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0.};
  const std::vector<DataType> mean = {1.};
  const std::vector<DataType> variance = {0.};
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 1.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -0.70552135, 0.70552135, -0.70552135, 0.70552135, -0.70552135,
      1.4110422,   -1.4110422, 1.4110422,   -1.4110422, 1.4110422,
      -0.70552135, 0.70552135, -0.70552135, 0.70552135, -0.70552135};
  const std::vector<DataType> mean = {1.3333334, 1.6666666, 1.3333334,
                                      1.6666666, 1.3333334};
  const std::vector<DataType> variance = {0.22222221, 0.22222221, 0.22222221,
                                          0.22222221, 0.22222221};
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 2.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 0., 0., 0., 0., 0., 0., 0.,
                                         0., 0., 0., 0., 0., 0., 0., 0.,
                                         0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312656,  -0.4038942, 0.50486755, 1.4136295,  -1.312656,  -0.4038942,
      0.50486755, 1.4136295,  -1.312656,  -0.4038942, 0.50486755, 1.4136295,
      -1.312656,  -0.4038942, 0.50486755, 1.4136295,  -1.312656,  -0.4038942,
      0.50486755, 1.4136295,  -1.312656,  -0.4038942, 0.50486755, 1.4136295,
      -1.312656,  -0.4038942, 0.50486755};
  const std::vector<DataType> mean = {2.4444444};
  const std::vector<DataType> variance = {1.2098764};
  const std::array<int, 4> in_shape = {{3, 1, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755, 1.4136295,   -1.4136297, -0.45693862,
      0.4569385,  1.4136295,   -1.312656,  -0.5048678,  0.4243002,  1.3381774,
      -1.312656,  -0.4038942,  0.40389395, 1.3055389,   -1.3055391, -0.4038942,
      0.50486755, 1.3126559,   -1.3381774, -0.4243003,  0.50486755, 1.4136295,
      -1.4136297, -0.45693862, 0.4569385,  1.4136295,   -1.312656,  -0.5048678,
      0.4243002,  1.3381774,   -1.312656,  -0.4038942,  0.40389395, 1.3055389,
      -1.3055391, -0.4038942,  0.50486755, 1.3126559,   -1.3381774, -0.4243003,
      0.50486755, 1.4136295,   -1.4136297, -0.45693862, 0.4569385,  1.4136295,
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755, 1.4136295,   -1.4136297, -0.45693862,
      0.4569385,  1.4136295,   -1.312656,  -0.5048678,  0.4243002,  1.3381774,
      -1.312656,  -0.4038942,  0.40389395, 1.3055389,   -1.3055391, -0.4038942,
      0.50486755, 1.3126559,   -1.3381774, -0.4243003,  0.50486755, 1.4136295,
      -1.4136297, -0.45693862, 0.4569385,  1.4136295,   -1.312656,  -0.5048678,
      0.4243002,  1.3381774,   -1.312656,  -0.4038942,  0.40389395, 1.3055389,
      -1.3055391, -0.4038942,  0.50486755, 1.3126559,   -1.3381774, -0.4243003,
      0.50486755, 1.4136295,   -1.4136297, -0.45693862, 0.4569385,  1.4136295,
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755};
  const std::vector<DataType> mean = {2.4444444, 2.5555556, 2.5185184,
                                      2.4814816, 2.4444444};
  const std::vector<DataType> variance = {1.2098764, 1.2098763, 1.2866943,
                                          1.2866942, 1.2098764};
  const std::array<int, 4> in_shape = {{3, 1, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x1x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 1, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 8, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x8x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312656,  -0.4038942, 0.50486755, 1.4136295,  -1.312656,  -0.4038942,
      0.50486755, 1.4136295,  -1.312656,  -0.4038942, 0.50486755, 1.4136295,
      -1.312656,  -0.4038942, 0.50486755, 1.4136295,  -1.312656,  -0.4038942,
      0.50486755, 1.4136295,  -1.312656,  -0.4038942, 0.50486755, 1.4136295,
      -1.312656,  -0.4038942, 0.50486755};
  const std::vector<DataType> mean = {2.4444444};
  const std::vector<DataType> variance = {1.2098764};
  const std::array<int, 4> in_shape = {{3, 9, 1, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x1x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755, 1.4136295,   -1.4136297, -0.45693862,
      0.4569385,  1.4136295,   -1.312656,  -0.5048678,  0.4243002,  1.3381774,
      -1.312656,  -0.4038942,  0.40389395, 1.3055389,   -1.3055391, -0.4038942,
      0.50486755, 1.3126559,   -1.3381774, -0.4243003,  0.50486755, 1.4136295,
      -1.4136297, -0.45693862, 0.4569385,  1.4136295,   -1.312656,  -0.5048678,
      0.4243002,  1.3381774,   -1.312656,  -0.4038942,  0.40389395, 1.3055389,
      -1.3055391, -0.4038942,  0.50486755, 1.3126559,   -1.3381774, -0.4243003,
      0.50486755, 1.4136295,   -1.4136297, -0.45693862, 0.4569385,  1.4136295,
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755, 1.4136295,   -1.4136297, -0.45693862,
      0.4569385,  1.4136295,   -1.312656,  -0.5048678,  0.4243002,  1.3381774,
      -1.312656,  -0.4038942,  0.40389395, 1.3055389,   -1.3055391, -0.4038942,
      0.50486755, 1.3126559,   -1.3381774, -0.4243003,  0.50486755, 1.4136295,
      -1.4136297, -0.45693862, 0.4569385,  1.4136295,   -1.312656,  -0.5048678,
      0.4243002,  1.3381774,   -1.312656,  -0.4038942,  0.40389395, 1.3055389,
      -1.3055391, -0.4038942,  0.50486755, 1.3126559,   -1.3381774, -0.4243003,
      0.50486755, 1.4136295,   -1.4136297, -0.45693862, 0.4569385,  1.4136295,
      -1.312656,  -0.5048678,  0.4243002,  1.3381774,   -1.312656,  -0.4038942,
      0.40389395, 1.3055389,   -1.3055391, -0.4038942,  0.50486755, 1.3126559,
      -1.3381774, -0.4243003,  0.50486755};
  const std::vector<DataType> mean = {2.4444444, 2.5555556, 2.5185184,
                                      2.4814816, 2.4444444};
  const std::vector<DataType> variance = {1.2098764, 1.2098763, 1.2866943,
                                          1.2866942, 1.2098764};
  const std::array<int, 4> in_shape = {{3, 9, 1, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x1x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 1, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5};
  const std::vector<DataType> variance = {1.25};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x8x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045,
      -1.3411043, -0.44703472, 0.44703484, 1.3411045,   -1.3411043, -0.44703472,
      0.44703484, 1.3411045,   -1.3411043, -0.44703472, 0.44703484, 1.3411045};
  const std::vector<DataType> mean = {2.5, 2.5, 2.5, 2.5, 2.5};
  const std::vector<DataType> variance = {1.25, 1.25, 1.25, 1.25, 1.25};
  const std::array<int, 4> in_shape = {{3, 9, 8, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x8x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069,  1.3488643,  -1.3378081, -0.4422506,
      0.4533069,  1.3488643,  -1.3378081, -0.4422506, 0.4533069,  1.3488643,
      -1.3378081, -0.4422506, 0.4533069};
  const std::vector<DataType> mean = {2.493827};
  const std::vector<DataType> variance = {1.2458467};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x9x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069,  1.3488643,   -1.3488646, -0.4481387,
      0.4481387,  1.3488643,   -1.3378081, -0.45330703, 0.4444654,  1.3407428,
      -1.3378081, -0.4422506,  0.4422505,  1.3370695,   -1.3370695, -0.4422506,
      0.4533069,  1.3378079,   -1.3407428, -0.4444654,  0.4533069,  1.3488643,
      -1.3488646, -0.4481387,  0.4481387,  1.3488643,   -1.3378081, -0.45330703,
      0.4444654,  1.3407428,   -1.3378081, -0.4422506,  0.4422505,  1.3370695,
      -1.3370695, -0.4422506,  0.4533069,  1.3378079,   -1.3407428, -0.4444654,
      0.4533069,  1.3488643,   -1.3488646, -0.4481387,  0.4481387,  1.3488643,
      -1.3378081, -0.45330703, 0.4444654,  1.3407428,   -1.3378081, -0.4422506,
      0.4422505,  1.3370695,   -1.3370695, -0.4422506,  0.4533069,  1.3378079,
      -1.3407428, -0.4444654,  0.4533069};
  const std::vector<DataType> mean = {2.493827, 2.506173, 2.5020576, 2.4979424,
                                      2.493827};
  const std::vector<DataType> variance = {1.2458467, 1.2458467, 1.254111,
                                          1.2541112, 1.2458467};
  const std::array<int, 4> in_shape = {{3, 9, 9, 5}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
TYPED_TEST(BatchnormForwardInference, 3x9x9x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
  const std::vector<DataType> mean = {1., 2., 3., 4., 1., 2., 3., 4.};
  const std::vector<DataType> variance = {0., 0., 0., 0., 0., 0., 0., 0.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 8}};
  const auto params = getBatchNormParams(in_shape, DataFormat::NHWC);
  const DataType max_input_val = 4.0;
  this->test_batchnorm(exp_out, mean, variance, params, max_input_val);
}
