/*
 * Copyright 2018 Codeplay Software Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "test/backend/eigen_matmul_backend_test_fixture_impl.h"

// clang-format off
#define DATA_TYPE_  ${DATA_TYPE}
#define INDEX_TYPE_ ${INDEX_TYPE}
//clang-format on

template void EigenBackendMatmul::test_square_matmul<true, true,
                                                     DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ dim);
template void EigenBackendMatmul::test_square_batch_matmul<
    true, true, DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ batch, INDEX_TYPE_ dim);

template void EigenBackendMatmul::test_square_matmul<false, true,
                                                     DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ dim);
template void EigenBackendMatmul::test_square_batch_matmul<
    false, true, DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ batch, INDEX_TYPE_ dim);

template void EigenBackendMatmul::test_square_matmul<true, false,
                                                     DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ dim);
template void EigenBackendMatmul::test_square_batch_matmul<
    true, false, DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ batch, INDEX_TYPE_ dim);

template void EigenBackendMatmul::test_square_matmul<false, false,
                                                     DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ dim);
template void EigenBackendMatmul::test_square_batch_matmul<
    false, false, DATA_TYPE_, INDEX_TYPE_>(
    std::vector<DATA_TYPE_>& lhs, std::vector<DATA_TYPE_>& rhs,
    std::vector<DATA_TYPE_>& expected, INDEX_TYPE_ batch, INDEX_TYPE_ dim);
