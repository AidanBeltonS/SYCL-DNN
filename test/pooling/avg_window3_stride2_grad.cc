/*
 * Copyright 2018 Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.8.0.

#include <gtest/gtest.h>

#include "sycldnn/pooling/launch.h"
#include "sycldnn/pooling/operators.h"
#include "sycldnn/pooling/params.h"

#include "test/pooling/pooling_fixture.h"
#include "test/types/kernel_data_types.h"

#include <CL/sycl.hpp>

#include <vector>

using namespace sycldnn;
template <typename DataType>
using AvgWindow3Stride2Grad =
    PoolingFixture<DataType, pooling::Average, pooling::Backpropagate>;
TYPED_TEST_CASE(AvgWindow3Stride2Grad, types::GTestKernelDataTypes);
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,         0.5833333333, 0.3333333333, 1.0833333333, 0.75,
      0.9166666667, 1.8055555556, 0.8888888889, 2.6388888889, 1.75,
      0.6666666667, 1.2222222222, 0.5555555556, 1.5555555556, 1.,
      2.4166666667, 4.3055555556, 1.8888888889, 5.1388888889, 3.25,
      1.75,         3.0833333333, 1.3333333333, 3.5833333333, 2.25,
  };
  const std::array<int, 4> in_shape = {{1, 5, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444};
  const std::array<int, 4> in_shape = {{1, 5, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,         0.5,          0.75,          1.1666666667, 0.5,
      0.6666666667, 1.75,         2.1666666667,  1.25,         1.5,
      1.4166666667, 1.8333333333, 2.9166666667,  3.6111111111, 1.5,
      1.7777777778, 4.5833333333, 5.2777777778,  3.0833333333, 3.5,
      1.1666666667, 1.3333333333, 2.1666666667,  2.4444444444, 1.,
      1.1111111111, 2.8333333333, 3.1111111111,  1.8333333333, 2.,
      4.4166666667, 4.8333333333, 7.9166666667,  8.6111111111, 3.5,
      3.7777777778, 9.5833333333, 10.2777777778, 6.0833333333, 6.5,
      3.25,         3.5,          5.75,          6.1666666667, 2.5,
      2.6666666667, 6.75,         7.1666666667,  4.25,         4.5,
  };
  const std::array<int, 4> in_shape = {{1, 5, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778,
      2.2222222222, 1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889};
  const std::array<int, 4> in_shape = {{1, 5, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,          0.5,
      0.75,          1.,
      1.0833333333,  1.5,
      1.9166666667,  2.3333333333,
      0.8333333333,  1.,
      1.1666666667,  1.3333333333,
      3.0833333333,  3.5,
      3.9166666667,  4.3333333333,
      2.25,          2.5,
      2.75,          3.,
      2.4166666667,  2.8333333333,
      3.25,          3.6666666667,
      5.1388888889,  5.8333333333,
      6.5277777778,  7.2222222222,
      2.7222222222,  3.,
      3.2777777778,  3.5555555556,
      8.4722222222,  9.1666666667,
      9.8611111111,  10.5555555556,
      5.75,          6.1666666667,
      6.5833333333,  7.,
      2.1666666667,  2.3333333333,
      2.5,           2.6666666667,
      4.0555555556,  4.3333333333,
      4.6111111111,  4.8888888889,
      1.8888888889,  2.,
      2.1111111111,  2.2222222222,
      5.3888888889,  5.6666666667,
      5.9444444444,  6.2222222222,
      3.5,           3.6666666667,
      3.8333333333,  4.,
      8.4166666667,  8.8333333333,
      9.25,          9.6666666667,
      15.1388888889, 15.8333333333,
      16.5277777778, 17.2222222222,
      6.7222222222,  7.,
      7.2777777778,  7.5555555556,
      18.4722222222, 19.1666666667,
      19.8611111111, 20.5555555556,
      11.75,         12.1666666667,
      12.5833333333, 13.,
      6.25,          6.5,
      6.75,          7.,
      11.0833333333, 11.5,
      11.9166666667, 12.3333333333,
      4.8333333333,  5.,
      5.1666666667,  5.3333333333,
      13.0833333333, 13.5,
      13.9166666667, 14.3333333333,
      8.25,          8.5,
      8.75,          9.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      1.1111111111, 1.3333333333, 1.5555555556, 1.7777777778, 1.1111111111,
      1.3333333333, 1.5555555556, 1.7777777778, 3.1111111111, 3.5555555556,
      4.,           4.4444444444, 2.,           2.2222222222, 2.4444444444,
      2.6666666667, 2.,           2.2222222222, 2.4444444444, 2.6666666667,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444, 2.6666666667,
      2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444, 2.6666666667,
      2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778};
  const std::array<int, 4> in_shape = {{1, 5, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.1666666667, 0.5, 0.3333333333, 1.0833333333, 0.75,
      0.6111111111, 0.6111111111, 1.5, 0.8888888889, 2.6388888889, 1.75,
      0.4444444444, 0.4444444444, 1.,  0.5555555556, 1.5555555556, 1.,
      1.6111111111, 1.6111111111, 3.5, 1.8888888889, 5.1388888889, 3.25,
      1.1666666667, 1.1666666667, 2.5, 1.3333333333, 3.5833333333, 2.25,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.3333333333,
      0.1666666667, 0.3333333333,
      0.6666666667, 1.,
      0.5,          0.6666666667,
      1.75,         2.1666666667,
      1.25,         1.5,
      0.9444444444, 1.2222222222,
      0.9444444444, 1.2222222222,
      2.4444444444, 3.,
      1.5,          1.7777777778,
      4.5833333333, 5.2777777778,
      3.0833333333, 3.5,
      0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889,
      1.7777777778, 2.,
      1.,           1.1111111111,
      2.8333333333, 3.1111111111,
      1.8333333333, 2.,
      2.9444444444, 3.2222222222,
      2.9444444444, 3.2222222222,
      6.4444444444, 7.,
      3.5,          3.7777777778,
      9.5833333333, 10.2777777778,
      6.0833333333, 6.5,
      2.1666666667, 2.3333333333,
      2.1666666667, 2.3333333333,
      4.6666666667, 5.,
      2.5,          2.6666666667,
      6.75,         7.1666666667,
      4.25,         4.5,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.,           0.,           0.1111111111, 0.2222222222, 0.1111111111,
      0.2222222222, 0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444,
      0.3333333333, 0.4444444444, 0.,           0.,           0.6666666667,
      0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778, 2.2222222222,
      1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333, 0.,
      0.,           0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      1.3333333333, 1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778,
      0.8888888889, 0.,           0.,           0.5555555556, 0.6666666667,
      0.5555555556, 0.6666666667, 1.3333333333, 1.5555555556, 0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      1.,
      1.3333333333,
      1.6666666667,
      2.,
      0.8333333333,
      1.,
      1.1666666667,
      1.3333333333,
      3.0833333333,
      3.5,
      3.9166666667,
      4.3333333333,
      2.25,
      2.5,
      2.75,
      3.,
      1.6111111111,
      1.8888888889,
      2.1666666667,
      2.4444444444,
      1.6111111111,
      1.8888888889,
      2.1666666667,
      2.4444444444,
      4.3333333333,
      4.8888888889,
      5.4444444444,
      6.,
      2.7222222222,
      3.,
      3.2777777778,
      3.5555555556,
      8.4722222222,
      9.1666666667,
      9.8611111111,
      10.5555555556,
      5.75,
      6.1666666667,
      6.5833333333,
      7.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      12.3333333333,
      12.8888888889,
      13.4444444444,
      14.,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.,           0.,           0.,           0.,           0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111, 0.2222222222,
      0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889, 1.1111111111,
      1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889, 0.,
      0.,           0.,           0.,           1.1111111111, 1.3333333333,
      1.5555555556, 1.7777777778, 1.1111111111, 1.3333333333, 1.5555555556,
      1.7777777778, 3.1111111111, 3.5555555556, 4.,           4.4444444444,
      2.,           2.2222222222, 2.4444444444, 2.6666666667, 2.,
      2.2222222222, 2.4444444444, 2.6666666667, 0.,           0.,
      0.,           0.,           1.,           1.1111111111, 1.2222222222,
      1.3333333333, 1.,           1.1111111111, 1.2222222222, 1.3333333333,
      2.4444444444, 2.6666666667, 2.8888888889, 3.1111111111, 1.4444444444,
      1.5555555556, 1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 0.,           0.,           0.,
      0.,           1.,           1.1111111111, 1.2222222222, 1.3333333333,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444,
      2.6666666667, 2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.1666666667, 0.5,          0.3333333333, 0.8333333333,
      0.5,          1.5,          1.,           0.7222222222, 0.7222222222,
      1.7222222222, 1.,           2.2777777778, 1.2777777778, 3.6111111111,
      2.3333333333, 0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667,
      1.4444444444, 0.7777777778, 2.1111111111, 1.3333333333, 2.0555555556,
      2.0555555556, 4.3888888889, 2.3333333333, 4.9444444444, 2.6111111111,
      6.9444444444, 4.3333333333, 1.5,          1.5,          3.1666666667,
      1.6666666667, 3.5,          1.8333333333, 4.8333333333, 3.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 0.3333333333, 0.,           0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 0.3333333333,
      0.,           0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778,
      1.7777777778, 1.,           1.,           0.,           0.4444444444,
      0.4444444444, 1.,           0.5555555556, 1.2222222222, 0.6666666667,
      0.6666666667, 0.,           0.4444444444, 0.4444444444, 1.,
      0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.1666666667,
      0.3333333333,
      0.6666666667,
      1.,
      0.5,
      0.6666666667,
      1.3333333333,
      1.6666666667,
      0.8333333333,
      1.,
      2.5833333333,
      3.,
      1.75,
      2.,
      1.1666666667,
      1.4444444444,
      1.1666666667,
      1.4444444444,
      2.8888888889,
      3.4444444444,
      1.7222222222,
      2.,
      4.,
      4.5555555556,
      2.2777777778,
      2.5555555556,
      6.5277777778,
      7.2222222222,
      4.25,
      4.6666666667,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      3.8333333333,
      4.1111111111,
      3.8333333333,
      4.1111111111,
      8.2222222222,
      8.7777777778,
      4.3888888889,
      4.6666666667,
      9.3333333333,
      9.8888888889,
      4.9444444444,
      5.2222222222,
      13.1944444444,
      13.8888888889,
      8.25,
      8.6666666667,
      2.8333333333,
      3.,
      2.8333333333,
      3.,
      6.,
      6.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889, 1.1111111111,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 0.,
      0.,           0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889,
      1.1111111111, 0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      0.,           0.,           0.8888888889, 1.1111111111, 0.8888888889,
      1.1111111111, 2.2222222222, 2.6666666667, 1.3333333333, 1.5555555556,
      3.1111111111, 3.5555555556, 1.7777777778, 2.,           1.7777777778,
      2.,           0.,           0.,           0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889, 1.7777777778, 2.,           1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 1.7777777778, 2.,
      1.,           1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222,
      1.3333333333, 1.2222222222, 1.3333333333, 0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x5x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      1.,
      1.3333333333,
      1.6666666667,
      2.,
      0.8333333333,
      1.,
      1.1666666667,
      1.3333333333,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      4.75,
      5.1666666667,
      5.5833333333,
      6.,
      3.25,
      3.5,
      3.75,
      4.,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      5.2222222222,
      5.7777777778,
      6.3333333333,
      6.8888888889,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      4.2777777778,
      4.5555555556,
      4.8333333333,
      5.1111111111,
      12.3611111111,
      13.0555555556,
      13.75,
      14.4444444444,
      8.0833333333,
      8.5,
      8.9166666667,
      9.3333333333,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      15.8888888889,
      16.4444444444,
      17.,
      17.5555555556,
      8.5,
      8.7777777778,
      9.0555555556,
      9.3333333333,
      18.1111111111,
      18.6666666667,
      19.2222222222,
      19.7777777778,
      9.6111111111,
      9.8888888889,
      10.1666666667,
      10.4444444444,
      25.6944444444,
      26.3888888889,
      27.0833333333,
      27.7777777778,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      11.6666666667,
      12.,
      12.3333333333,
      12.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x5x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 1.5555555556, 1.7777777778, 2.,           2.2222222222,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 0.,           0.,
      0.,           0.,           0.1111111111, 0.2222222222, 0.3333333333,
      0.4444444444, 0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 1.1111111111, 1.3333333333, 0.5555555556,
      0.6666666667, 0.7777777778, 0.8888888889, 1.5555555556, 1.7777777778,
      2.,           2.2222222222, 1.,           1.1111111111, 1.2222222222,
      1.3333333333, 1.,           1.1111111111, 1.2222222222, 1.3333333333,
      0.,           0.,           0.,           0.,           1.5555555556,
      1.7777777778, 2.,           2.2222222222, 1.5555555556, 1.7777777778,
      2.,           2.2222222222, 4.,           4.4444444444, 4.8888888889,
      5.3333333333, 2.4444444444, 2.6666666667, 2.8888888889, 3.1111111111,
      5.7777777778, 6.2222222222, 6.6666666667, 7.1111111111, 3.3333333333,
      3.5555555556, 3.7777777778, 4.,           3.3333333333, 3.5555555556,
      3.7777777778, 4.,           0.,           0.,           0.,
      0.,           1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778, 3.3333333333,
      3.5555555556, 3.7777777778, 4.,           1.8888888889, 2.,
      2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444, 4.6666666667,
      4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667, 0.,
      0.,           0.,           0.,           1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 3.3333333333, 3.5555555556, 3.7777777778, 4.,
      1.8888888889, 2.,           2.1111111111, 2.2222222222, 4.2222222222,
      4.4444444444, 4.6666666667, 4.8888888889, 2.3333333333, 2.4444444444,
      2.5555555556, 2.6666666667, 2.3333333333, 2.4444444444, 2.5555555556,
      2.6666666667, 0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 5, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.3888888889, 0.2222222222, 0.7222222222, 0.5,
      0.1666666667, 0.3888888889, 0.2222222222, 0.7222222222, 0.5,
      0.8333333333, 1.6111111111, 0.7777777778, 2.2777777778, 1.5,
      0.6666666667, 1.2222222222, 0.5555555556, 1.5555555556, 1.,
      2.4166666667, 4.3055555556, 1.8888888889, 5.1388888889, 3.25,
      1.75,         3.0833333333, 1.3333333333, 3.5833333333, 2.25,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.3333333333, 0.5,           0.7777777778, 0.3333333333,
      0.4444444444, 1.1666666667, 1.4444444444,  0.8333333333, 1.,
      0.1666666667, 0.3333333333, 0.5,           0.7777777778, 0.3333333333,
      0.4444444444, 1.1666666667, 1.4444444444,  0.8333333333, 1.,
      1.3333333333, 1.6666666667, 2.6666666667,  3.2222222222, 1.3333333333,
      1.5555555556, 4.,           4.5555555556,  2.6666666667, 3.,
      1.1666666667, 1.3333333333, 2.1666666667,  2.4444444444, 1.,
      1.1111111111, 2.8333333333, 3.1111111111,  1.8333333333, 2.,
      4.4166666667, 4.8333333333, 7.9166666667,  8.6111111111, 3.5,
      3.7777777778, 9.5833333333, 10.2777777778, 6.0833333333, 6.5,
      3.25,         3.5,          5.75,          6.1666666667, 2.5,
      2.6666666667, 6.75,         7.1666666667,  4.25,         4.5,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778,
      2.2222222222, 1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      4.7777777778,
      5.3333333333,
      5.8888888889,
      6.4444444444,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      4.0555555556,
      4.3333333333,
      4.6111111111,
      4.8888888889,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      8.4166666667,
      8.8333333333,
      9.25,
      9.6666666667,
      15.1388888889,
      15.8333333333,
      16.5277777778,
      17.2222222222,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      6.25,
      6.5,
      6.75,
      7.,
      11.0833333333,
      11.5,
      11.9166666667,
      12.3333333333,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      1.1111111111, 1.3333333333, 1.5555555556, 1.7777777778, 1.1111111111,
      1.3333333333, 1.5555555556, 1.7777777778, 3.1111111111, 3.5555555556,
      4.,           4.4444444444, 2.,           2.2222222222, 2.4444444444,
      2.6666666667, 2.,           2.2222222222, 2.4444444444, 2.6666666667,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444, 2.6666666667,
      2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444, 2.6666666667,
      2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.7222222222,
      0.5,          0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222,
      0.7222222222, 0.5,          0.5555555556, 0.5555555556, 1.3333333333,
      0.7777777778, 2.2777777778, 1.5,          0.4444444444, 0.4444444444,
      1.,           0.5555555556, 1.5555555556, 1.,           1.6111111111,
      1.6111111111, 3.5,          1.8888888889, 5.1388888889, 3.25,
      1.1666666667, 1.1666666667, 2.5,          1.3333333333, 3.5833333333,
      2.25,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222,
      0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667,
      0.3333333333, 0.4444444444,
      1.1666666667, 1.4444444444,
      0.8333333333, 1.,
      0.1111111111, 0.2222222222,
      0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667,
      0.3333333333, 0.4444444444,
      1.1666666667, 1.4444444444,
      0.8333333333, 1.,
      0.8888888889, 1.1111111111,
      0.8888888889, 1.1111111111,
      2.2222222222, 2.6666666667,
      1.3333333333, 1.5555555556,
      4.,           4.5555555556,
      2.6666666667, 3.,
      0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889,
      1.7777777778, 2.,
      1.,           1.1111111111,
      2.8333333333, 3.1111111111,
      1.8333333333, 2.,
      2.9444444444, 3.2222222222,
      2.9444444444, 3.2222222222,
      6.4444444444, 7.,
      3.5,          3.7777777778,
      9.5833333333, 10.2777777778,
      6.0833333333, 6.5,
      2.1666666667, 2.3333333333,
      2.1666666667, 2.3333333333,
      4.6666666667, 5.,
      2.5,          2.6666666667,
      6.75,         7.1666666667,
      4.25,         4.5,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.,           0.,           0.1111111111, 0.2222222222, 0.1111111111,
      0.2222222222, 0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444,
      0.3333333333, 0.4444444444, 0.,           0.,           0.6666666667,
      0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778, 2.2222222222,
      1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333, 0.,
      0.,           0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      1.3333333333, 1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778,
      0.8888888889, 0.,           0.,           0.5555555556, 0.6666666667,
      0.5555555556, 0.6666666667, 1.3333333333, 1.5555555556, 0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      12.3333333333,
      12.8888888889,
      13.4444444444,
      14.,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.,           0.,           0.,           0.,           0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111, 0.2222222222,
      0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889, 1.1111111111,
      1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889, 0.,
      0.,           0.,           0.,           1.1111111111, 1.3333333333,
      1.5555555556, 1.7777777778, 1.1111111111, 1.3333333333, 1.5555555556,
      1.7777777778, 3.1111111111, 3.5555555556, 4.,           4.4444444444,
      2.,           2.2222222222, 2.4444444444, 2.6666666667, 2.,
      2.2222222222, 2.4444444444, 2.6666666667, 0.,           0.,
      0.,           0.,           1.,           1.1111111111, 1.2222222222,
      1.3333333333, 1.,           1.1111111111, 1.2222222222, 1.3333333333,
      2.4444444444, 2.6666666667, 2.8888888889, 3.1111111111, 1.4444444444,
      1.5555555556, 1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 0.,           0.,           0.,
      0.,           1.,           1.1111111111, 1.2222222222, 1.3333333333,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444,
      2.6666666667, 2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 1.,           0.6666666667, 0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 1.,
      0.6666666667, 0.6666666667, 0.6666666667, 1.5555555556, 0.8888888889,
      2.,           1.1111111111, 3.1111111111, 2.,           0.5555555556,
      0.5555555556, 1.2222222222, 0.6666666667, 1.4444444444, 0.7777777778,
      2.1111111111, 1.3333333333, 2.0555555556, 2.0555555556, 4.3888888889,
      2.3333333333, 4.9444444444, 2.6111111111, 6.9444444444, 4.3333333333,
      1.5,          1.5,          3.1666666667, 1.6666666667, 3.5,
      1.8333333333, 4.8333333333, 3.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 0.3333333333, 0.,           0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 0.3333333333,
      0.,           0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778,
      1.7777777778, 1.,           1.,           0.,           0.4444444444,
      0.4444444444, 1.,           0.5555555556, 1.2222222222, 0.6666666667,
      0.6666666667, 0.,           0.4444444444, 0.4444444444, 1.,
      0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      2.6666666667,
      3.1111111111,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      5.6666666667,
      6.2222222222,
      3.6666666667,
      4.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      3.8333333333,
      4.1111111111,
      3.8333333333,
      4.1111111111,
      8.2222222222,
      8.7777777778,
      4.3888888889,
      4.6666666667,
      9.3333333333,
      9.8888888889,
      4.9444444444,
      5.2222222222,
      13.1944444444,
      13.8888888889,
      8.25,
      8.6666666667,
      2.8333333333,
      3.,
      2.8333333333,
      3.,
      6.,
      6.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889, 1.1111111111,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 0.,
      0.,           0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889,
      1.1111111111, 0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      0.,           0.,           0.8888888889, 1.1111111111, 0.8888888889,
      1.1111111111, 2.2222222222, 2.6666666667, 1.3333333333, 1.5555555556,
      3.1111111111, 3.5555555556, 1.7777777778, 2.,           1.7777777778,
      2.,           0.,           0.,           0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889, 1.7777777778, 2.,           1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 1.7777777778, 2.,
      1.,           1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222,
      1.3333333333, 1.2222222222, 1.3333333333, 0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      4.8888888889,
      5.3333333333,
      5.7777777778,
      6.2222222222,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      10.7777777778,
      11.3333333333,
      11.8888888889,
      12.4444444444,
      7.,
      7.3333333333,
      7.6666666667,
      8.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      15.8888888889,
      16.4444444444,
      17.,
      17.5555555556,
      8.5,
      8.7777777778,
      9.0555555556,
      9.3333333333,
      18.1111111111,
      18.6666666667,
      19.2222222222,
      19.7777777778,
      9.6111111111,
      9.8888888889,
      10.1666666667,
      10.4444444444,
      25.6944444444,
      26.3888888889,
      27.0833333333,
      27.7777777778,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      11.6666666667,
      12.,
      12.3333333333,
      12.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 1.5555555556, 1.7777777778, 2.,           2.2222222222,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 0.,           0.,
      0.,           0.,           0.1111111111, 0.2222222222, 0.3333333333,
      0.4444444444, 0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 1.1111111111, 1.3333333333, 0.5555555556,
      0.6666666667, 0.7777777778, 0.8888888889, 1.5555555556, 1.7777777778,
      2.,           2.2222222222, 1.,           1.1111111111, 1.2222222222,
      1.3333333333, 1.,           1.1111111111, 1.2222222222, 1.3333333333,
      0.,           0.,           0.,           0.,           1.5555555556,
      1.7777777778, 2.,           2.2222222222, 1.5555555556, 1.7777777778,
      2.,           2.2222222222, 4.,           4.4444444444, 4.8888888889,
      5.3333333333, 2.4444444444, 2.6666666667, 2.8888888889, 3.1111111111,
      5.7777777778, 6.2222222222, 6.6666666667, 7.1111111111, 3.3333333333,
      3.5555555556, 3.7777777778, 4.,           3.3333333333, 3.5555555556,
      3.7777777778, 4.,           0.,           0.,           0.,
      0.,           1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778, 3.3333333333,
      3.5555555556, 3.7777777778, 4.,           1.8888888889, 2.,
      2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444, 4.6666666667,
      4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667, 0.,
      0.,           0.,           0.,           1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 3.3333333333, 3.5555555556, 3.7777777778, 4.,
      1.8888888889, 2.,           2.1111111111, 2.2222222222, 4.2222222222,
      4.4444444444, 4.6666666667, 4.8888888889, 2.3333333333, 2.4444444444,
      2.5555555556, 2.6666666667, 2.3333333333, 2.4444444444, 2.5555555556,
      2.6666666667, 0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.3888888889, 0.2222222222, 0.7222222222, 0.5,
      0.1666666667, 0.3888888889, 0.2222222222, 0.7222222222, 0.5,
      0.8333333333, 1.6111111111, 0.7777777778, 2.2777777778, 1.5,
      0.6666666667, 1.2222222222, 0.5555555556, 1.5555555556, 1.,
      1.8333333333, 3.2777777778, 1.4444444444, 3.9444444444, 2.5,
      1.1666666667, 2.0555555556, 0.8888888889, 2.3888888889, 1.5,
      3.6666666667, 6.3888888889, 2.7222222222, 7.2222222222, 4.5,
      2.5,          4.3333333333, 1.8333333333, 4.8333333333, 3.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.8888888889, 0.8888888889, 2.,           1.1111111111, 1.1111111111,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      1.3333333333,
      1.6666666667,
      2.6666666667,
      3.2222222222,
      1.3333333333,
      1.5555555556,
      4.,
      4.5555555556,
      2.6666666667,
      3.,
      1.1666666667,
      1.3333333333,
      2.1666666667,
      2.4444444444,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      3.3333333333,
      3.6666666667,
      6.,
      6.5555555556,
      2.6666666667,
      2.8888888889,
      7.3333333333,
      7.8888888889,
      4.6666666667,
      5.,
      2.1666666667,
      2.3333333333,
      3.8333333333,
      4.1111111111,
      1.6666666667,
      1.7777777778,
      4.5,
      4.7777777778,
      2.8333333333,
      3.,
      6.9166666667,
      7.3333333333,
      12.0833333333,
      12.7777777778,
      5.1666666667,
      5.4444444444,
      13.75,
      14.4444444444,
      8.5833333333,
      9.,
      4.75,
      5.,
      8.25,
      8.6666666667,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778,
      2.2222222222, 1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      1.5555555556, 1.7777777778, 1.5555555556, 1.7777777778, 3.5555555556,
      4.,           2.,           2.2222222222, 2.,           2.2222222222,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      4.7777777778,
      5.3333333333,
      5.8888888889,
      6.4444444444,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      4.0555555556,
      4.3333333333,
      4.6111111111,
      4.8888888889,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      6.3333333333,
      6.6666666667,
      7.,
      7.3333333333,
      11.4444444444,
      12.,
      12.5555555556,
      13.1111111111,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      14.1111111111,
      14.6666666667,
      15.2222222222,
      15.7777777778,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      8.7222222222,
      9.,
      9.2777777778,
      9.5555555556,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      13.4166666667,
      13.8333333333,
      14.25,
      14.6666666667,
      23.4722222222,
      24.1666666667,
      24.8611111111,
      25.5555555556,
      10.0555555556,
      10.3333333333,
      10.6111111111,
      10.8888888889,
      26.8055555556,
      27.5,
      28.1944444444,
      28.8888888889,
      16.75,
      17.1666666667,
      17.5833333333,
      18.,
      9.25,
      9.5,
      9.75,
      10.,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      1.1111111111, 1.3333333333, 1.5555555556, 1.7777777778, 1.1111111111,
      1.3333333333, 1.5555555556, 1.7777777778, 3.1111111111, 3.5555555556,
      4.,           4.4444444444, 2.,           2.2222222222, 2.4444444444,
      2.6666666667, 2.,           2.2222222222, 2.4444444444, 2.6666666667,
      1.,           1.1111111111, 1.2222222222, 1.3333333333, 1.,
      1.1111111111, 1.2222222222, 1.3333333333, 2.4444444444, 2.6666666667,
      2.8888888889, 3.1111111111, 1.4444444444, 1.5555555556, 1.6666666667,
      1.7777777778, 1.4444444444, 1.5555555556, 1.6666666667, 1.7777777778,
      2.8888888889, 3.1111111111, 3.3333333333, 3.5555555556, 2.8888888889,
      3.1111111111, 3.3333333333, 3.5555555556, 6.6666666667, 7.1111111111,
      7.5555555556, 8.,           3.7777777778, 4.,           4.2222222222,
      4.4444444444, 3.7777777778, 4.,           4.2222222222, 4.4444444444,
      1.8888888889, 2.,           2.1111111111, 2.2222222222, 1.8888888889,
      2.,           2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444,
      4.6666666667, 4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556,
      2.6666666667, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      1.8888888889, 2.,           2.1111111111, 2.2222222222, 1.8888888889,
      2.,           2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444,
      4.6666666667, 4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556,
      2.6666666667, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.7222222222, 0.5,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.7222222222, 0.5,
      0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778, 2.2777777778, 1.5,
      0.4444444444, 0.4444444444, 1.,           0.5555555556, 1.5555555556, 1.,
      1.2222222222, 1.2222222222, 2.6666666667, 1.4444444444, 3.9444444444, 2.5,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 2.3888888889, 1.5,
      2.4444444444, 2.4444444444, 5.1666666667, 2.7222222222, 7.2222222222, 4.5,
      1.6666666667, 1.6666666667, 3.5,          1.8333333333, 4.8333333333, 3.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.8888888889, 0.8888888889, 2.,           1.1111111111, 1.1111111111, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222,
      0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667,
      0.3333333333, 0.4444444444,
      1.1666666667, 1.4444444444,
      0.8333333333, 1.,
      0.1111111111, 0.2222222222,
      0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667,
      0.3333333333, 0.4444444444,
      1.1666666667, 1.4444444444,
      0.8333333333, 1.,
      0.8888888889, 1.1111111111,
      0.8888888889, 1.1111111111,
      2.2222222222, 2.6666666667,
      1.3333333333, 1.5555555556,
      4.,           4.5555555556,
      2.6666666667, 3.,
      0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889,
      1.7777777778, 2.,
      1.,           1.1111111111,
      2.8333333333, 3.1111111111,
      1.8333333333, 2.,
      2.2222222222, 2.4444444444,
      2.2222222222, 2.4444444444,
      4.8888888889, 5.3333333333,
      2.6666666667, 2.8888888889,
      7.3333333333, 7.8888888889,
      4.6666666667, 5.,
      1.4444444444, 1.5555555556,
      1.4444444444, 1.5555555556,
      3.1111111111, 3.3333333333,
      1.6666666667, 1.7777777778,
      4.5,          4.7777777778,
      2.8333333333, 3.,
      4.6111111111, 4.8888888889,
      4.6111111111, 4.8888888889,
      9.7777777778, 10.3333333333,
      5.1666666667, 5.4444444444,
      13.75,        14.4444444444,
      8.5833333333, 9.,
      3.1666666667, 3.3333333333,
      3.1666666667, 3.3333333333,
      6.6666666667, 7.,
      3.5,          3.6666666667,
      9.25,         9.6666666667,
      5.75,         6.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.,           0.,           0.1111111111, 0.2222222222, 0.1111111111,
      0.2222222222, 0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444,
      0.3333333333, 0.4444444444, 0.,           0.,           0.6666666667,
      0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778, 2.2222222222,
      1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333, 0.,
      0.,           0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      1.3333333333, 1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778,
      0.8888888889, 0.,           0.,           1.5555555556, 1.7777777778,
      1.5555555556, 1.7777777778, 3.5555555556, 4.,           2.,
      2.2222222222, 2.,           2.2222222222, 0.,           0.,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      0.,           0.,           1.,           1.1111111111, 1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      9.3333333333,
      9.7777777778,
      10.2222222222,
      10.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      14.1111111111,
      14.6666666667,
      15.2222222222,
      15.7777777778,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      8.7222222222,
      9.,
      9.2777777778,
      9.5555555556,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      8.9444444444,
      9.2222222222,
      9.5,
      9.7777777778,
      8.9444444444,
      9.2222222222,
      9.5,
      9.7777777778,
      19.,
      19.5555555556,
      20.1111111111,
      20.6666666667,
      10.0555555556,
      10.3333333333,
      10.6111111111,
      10.8888888889,
      26.8055555556,
      27.5,
      28.1944444444,
      28.8888888889,
      16.75,
      17.1666666667,
      17.5833333333,
      18.,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889,
      1.1111111111, 1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778,
      0.8888888889, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.,           0.,           0.,           0.,           0.1111111111,
      0.2222222222, 0.3333333333, 0.4444444444, 0.1111111111, 0.2222222222,
      0.3333333333, 0.4444444444, 0.6666666667, 0.8888888889, 1.1111111111,
      1.3333333333, 0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.7777777778, 0.8888888889, 0.,
      0.,           0.,           0.,           1.1111111111, 1.3333333333,
      1.5555555556, 1.7777777778, 1.1111111111, 1.3333333333, 1.5555555556,
      1.7777777778, 3.1111111111, 3.5555555556, 4.,           4.4444444444,
      2.,           2.2222222222, 2.4444444444, 2.6666666667, 2.,
      2.2222222222, 2.4444444444, 2.6666666667, 0.,           0.,
      0.,           0.,           1.,           1.1111111111, 1.2222222222,
      1.3333333333, 1.,           1.1111111111, 1.2222222222, 1.3333333333,
      2.4444444444, 2.6666666667, 2.8888888889, 3.1111111111, 1.4444444444,
      1.5555555556, 1.6666666667, 1.7777777778, 1.4444444444, 1.5555555556,
      1.6666666667, 1.7777777778, 0.,           0.,           0.,
      0.,           2.8888888889, 3.1111111111, 3.3333333333, 3.5555555556,
      2.8888888889, 3.1111111111, 3.3333333333, 3.5555555556, 6.6666666667,
      7.1111111111, 7.5555555556, 8.,           3.7777777778, 4.,
      4.2222222222, 4.4444444444, 3.7777777778, 4.,           4.2222222222,
      4.4444444444, 0.,           0.,           0.,           0.,
      1.8888888889, 2.,           2.1111111111, 2.2222222222, 1.8888888889,
      2.,           2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444,
      4.6666666667, 4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556,
      2.6666666667, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      0.,           0.,           0.,           0.,           1.8888888889,
      2.,           2.1111111111, 2.2222222222, 1.8888888889, 2.,
      2.1111111111, 2.2222222222, 4.2222222222, 4.4444444444, 4.6666666667,
      4.8888888889, 2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667,
      2.3333333333, 2.4444444444, 2.5555555556, 2.6666666667, 0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 1.,           0.6666666667, 0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 1.,
      0.6666666667, 0.6666666667, 0.6666666667, 1.5555555556, 0.8888888889,
      2.,           1.1111111111, 3.1111111111, 2.,           0.5555555556,
      0.5555555556, 1.2222222222, 0.6666666667, 1.4444444444, 0.7777777778,
      2.1111111111, 1.3333333333, 1.5555555556, 1.5555555556, 3.3333333333,
      1.7777777778, 3.7777777778, 2.,           5.3333333333, 3.3333333333,
      1.,           1.,           2.1111111111, 1.1111111111, 2.3333333333,
      1.2222222222, 3.2222222222, 2.,           3.1666666667, 3.1666666667,
      6.6111111111, 3.4444444444, 7.1666666667, 3.7222222222, 9.7222222222,
      6.,           2.1666666667, 2.1666666667, 4.5,          2.3333333333,
      4.8333333333, 2.5,          6.5,          4.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 0.3333333333, 0.,           0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 0.3333333333,
      0.,           0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778,
      1.7777777778, 1.,           1.,           0.,           0.4444444444,
      0.4444444444, 1.,           0.5555555556, 1.2222222222, 0.6666666667,
      0.6666666667, 0.,           1.2222222222, 1.2222222222, 2.6666666667,
      1.4444444444, 3.1111111111, 1.6666666667, 1.6666666667, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 1.8888888889,
      1.,           1.,           0.,           0.7777777778, 0.7777777778,
      1.6666666667, 0.8888888889, 1.8888888889, 1.,           1.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      2.6666666667,
      3.1111111111,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      5.6666666667,
      6.2222222222,
      3.6666666667,
      4.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      2.8888888889,
      3.1111111111,
      6.2222222222,
      6.6666666667,
      3.3333333333,
      3.5555555556,
      7.1111111111,
      7.5555555556,
      3.7777777778,
      4.,
      10.1111111111,
      10.6666666667,
      6.3333333333,
      6.6666666667,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      4.,
      4.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      6.0555555556,
      6.3333333333,
      6.0555555556,
      6.3333333333,
      12.6666666667,
      13.2222222222,
      6.6111111111,
      6.8888888889,
      13.7777777778,
      14.3333333333,
      7.1666666667,
      7.4444444444,
      18.75,
      19.4444444444,
      11.5833333333,
      12.,
      4.1666666667,
      4.3333333333,
      4.1666666667,
      4.3333333333,
      8.6666666667,
      9.,
      4.5,
      4.6666666667,
      9.3333333333,
      9.6666666667,
      4.8333333333,
      5.,
      12.5833333333,
      13.,
      7.75,
      8.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889, 1.1111111111,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 0.,
      0.,           0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222,
      0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444, 0.8888888889,
      1.1111111111, 0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      0.,           0.,           0.8888888889, 1.1111111111, 0.8888888889,
      1.1111111111, 2.2222222222, 2.6666666667, 1.3333333333, 1.5555555556,
      3.1111111111, 3.5555555556, 1.7777777778, 2.,           1.7777777778,
      2.,           0.,           0.,           0.7777777778, 0.8888888889,
      0.7777777778, 0.8888888889, 1.7777777778, 2.,           1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           2.2222222222,
      2.4444444444, 2.2222222222, 2.4444444444, 4.8888888889, 5.3333333333,
      2.6666666667, 2.8888888889, 5.7777777778, 6.2222222222, 3.1111111111,
      3.3333333333, 3.1111111111, 3.3333333333, 0.,           0.,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 3.5555555556, 3.7777777778,
      1.8888888889, 2.,           1.8888888889, 2.,           0.,
      0.,           1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556,
      3.1111111111, 3.3333333333, 1.6666666667, 1.7777777778, 3.5555555556,
      3.7777777778, 1.8888888889, 2.,           1.8888888889, 2.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      4.8888888889,
      5.3333333333,
      5.7777777778,
      6.2222222222,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      10.7777777778,
      11.3333333333,
      11.8888888889,
      12.4444444444,
      7.,
      7.3333333333,
      7.6666666667,
      8.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      12.,
      12.4444444444,
      12.8888888889,
      13.3333333333,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      13.7777777778,
      14.2222222222,
      14.6666666667,
      15.1111111111,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      19.6666666667,
      20.2222222222,
      20.7777777778,
      21.3333333333,
      12.3333333333,
      12.6666666667,
      13.,
      13.3333333333,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      11.8333333333,
      12.1111111111,
      12.3888888889,
      12.6666666667,
      11.8333333333,
      12.1111111111,
      12.3888888889,
      12.6666666667,
      24.7777777778,
      25.3333333333,
      25.8888888889,
      26.4444444444,
      12.9444444444,
      13.2222222222,
      13.5,
      13.7777777778,
      27.,
      27.5555555556,
      28.1111111111,
      28.6666666667,
      14.0555555556,
      14.3333333333,
      14.6111111111,
      14.8888888889,
      36.8055555556,
      37.5,
      38.1944444444,
      38.8888888889,
      22.75,
      23.1666666667,
      23.5833333333,
      24.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      17.,
      17.3333333333,
      17.6666666667,
      18.,
      8.8333333333,
      9.,
      9.1666666667,
      9.3333333333,
      18.3333333333,
      18.6666666667,
      19.,
      19.3333333333,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      24.75,
      25.1666666667,
      25.5833333333,
      26.,
      15.25,
      15.5,
      15.75,
      16.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      5.7777777778,
      6.2222222222,
      6.6666666667,
      7.1111111111,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      9.3333333333,
      9.7777777778,
      10.2222222222,
      10.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      11.1111111111,
      11.5555555556,
      12.,
      12.4444444444,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,         0.5833333333,  0.3333333333, 1.0833333333,  0.75,
      0.9166666667, 1.8055555556,  0.8888888889, 2.6388888889,  1.75,
      0.6666666667, 1.2222222222,  0.5555555556, 1.5555555556,  1.,
      2.4166666667, 4.3055555556,  1.8888888889, 5.1388888889,  3.25,
      1.75,         3.0833333333,  1.3333333333, 3.5833333333,  2.25,
      2.5,          4.3333333333,  1.8333333333, 4.8333333333,  3.,
      4.6666666667, 8.0555555556,  3.3888888889, 8.8888888889,  5.5,
      2.1666666667, 3.7222222222,  1.5555555556, 4.0555555556,  2.5,
      6.1666666667, 10.5555555556, 4.3888888889, 11.3888888889, 7.,
      4.,           6.8333333333,  2.8333333333, 7.3333333333,  4.5,
      4.75,         8.0833333333,  3.3333333333, 8.5833333333,  5.25,
      8.4166666667, 14.3055555556, 5.8888888889, 15.1388888889, 9.25,
      3.6666666667, 6.2222222222,  2.5555555556, 6.5555555556,  4.,
      9.9166666667, 16.8055555556, 6.8888888889, 17.6388888889, 10.75,
      6.25,         10.5833333333, 4.3333333333, 11.0833333333, 6.75,
  };
  const std::array<int, 4> in_shape = {{3, 5, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      1.3333333333, 1.3333333333, 2.8888888889, 1.5555555556, 1.5555555556,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333};
  const std::array<int, 4> in_shape = {{3, 5, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,
      0.5,
      0.75,
      1.1666666667,
      0.5,
      0.6666666667,
      1.75,
      2.1666666667,
      1.25,
      1.5,
      1.4166666667,
      1.8333333333,
      2.9166666667,
      3.6111111111,
      1.5,
      1.7777777778,
      4.5833333333,
      5.2777777778,
      3.0833333333,
      3.5,
      1.1666666667,
      1.3333333333,
      2.1666666667,
      2.4444444444,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      4.4166666667,
      4.8333333333,
      7.9166666667,
      8.6111111111,
      3.5,
      3.7777777778,
      9.5833333333,
      10.2777777778,
      6.0833333333,
      6.5,
      3.25,
      3.5,
      5.75,
      6.1666666667,
      2.5,
      2.6666666667,
      6.75,
      7.1666666667,
      4.25,
      4.5,
      4.75,
      5.,
      8.25,
      8.6666666667,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      8.9166666667,
      9.3333333333,
      15.4166666667,
      16.1111111111,
      6.5,
      6.7777777778,
      17.0833333333,
      17.7777777778,
      10.5833333333,
      11.,
      4.1666666667,
      4.3333333333,
      7.1666666667,
      7.4444444444,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      11.9166666667,
      12.3333333333,
      20.4166666667,
      21.1111111111,
      8.5,
      8.7777777778,
      22.0833333333,
      22.7777777778,
      13.5833333333,
      14.,
      7.75,
      8.,
      13.25,
      13.6666666667,
      5.5,
      5.6666666667,
      14.25,
      14.6666666667,
      8.75,
      9.,
      9.25,
      9.5,
      15.75,
      16.1666666667,
      6.5,
      6.6666666667,
      16.75,
      17.1666666667,
      10.25,
      10.5,
      16.4166666667,
      16.8333333333,
      27.9166666667,
      28.6111111111,
      11.5,
      11.7777777778,
      29.5833333333,
      30.2777777778,
      18.0833333333,
      18.5,
      7.1666666667,
      7.3333333333,
      12.1666666667,
      12.4444444444,
      5.,
      5.1111111111,
      12.8333333333,
      13.1111111111,
      7.8333333333,
      8.,
      19.4166666667,
      19.8333333333,
      32.9166666667,
      33.6111111111,
      13.5,
      13.7777777778,
      34.5833333333,
      35.2777777778,
      21.0833333333,
      21.5,
      12.25,
      12.5,
      20.75,
      21.1666666667,
      8.5,
      8.6666666667,
      21.75,
      22.1666666667,
      13.25,
      13.5,
  };
  const std::array<int, 4> in_shape = {{3, 5, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778,
      2.2222222222, 1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      2.4444444444, 2.6666666667, 2.4444444444, 2.6666666667, 5.3333333333,
      5.7777777778, 2.8888888889, 3.1111111111, 2.8888888889, 3.1111111111,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667, 1.7777777778,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667, 1.7777777778,
      1.8888888889, 2.,           1.8888888889, 2.,           4.,
      4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222,
      1.8888888889, 2.,           1.8888888889, 2.,           4.,
      4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222,
      4.2222222222, 4.4444444444, 4.2222222222, 4.4444444444, 8.8888888889,
      9.3333333333, 4.6666666667, 4.8888888889, 4.6666666667, 4.8888888889,
      2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444, 4.8888888889,
      5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556, 2.6666666667,
      2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444, 4.8888888889,
      5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556, 2.6666666667};
  const std::array<int, 4> in_shape = {{3, 5, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.25,          0.5,
      0.75,          1.,
      1.0833333333,  1.5,
      1.9166666667,  2.3333333333,
      0.8333333333,  1.,
      1.1666666667,  1.3333333333,
      3.0833333333,  3.5,
      3.9166666667,  4.3333333333,
      2.25,          2.5,
      2.75,          3.,
      2.4166666667,  2.8333333333,
      3.25,          3.6666666667,
      5.1388888889,  5.8333333333,
      6.5277777778,  7.2222222222,
      2.7222222222,  3.,
      3.2777777778,  3.5555555556,
      8.4722222222,  9.1666666667,
      9.8611111111,  10.5555555556,
      5.75,          6.1666666667,
      6.5833333333,  7.,
      2.1666666667,  2.3333333333,
      2.5,           2.6666666667,
      4.0555555556,  4.3333333333,
      4.6111111111,  4.8888888889,
      1.8888888889,  2.,
      2.1111111111,  2.2222222222,
      5.3888888889,  5.6666666667,
      5.9444444444,  6.2222222222,
      3.5,           3.6666666667,
      3.8333333333,  4.,
      8.4166666667,  8.8333333333,
      9.25,          9.6666666667,
      15.1388888889, 15.8333333333,
      16.5277777778, 17.2222222222,
      6.7222222222,  7.,
      7.2777777778,  7.5555555556,
      18.4722222222, 19.1666666667,
      19.8611111111, 20.5555555556,
      11.75,         12.1666666667,
      12.5833333333, 13.,
      6.25,          6.5,
      6.75,          7.,
      11.0833333333, 11.5,
      11.9166666667, 12.3333333333,
      4.8333333333,  5.,
      5.1666666667,  5.3333333333,
      13.0833333333, 13.5,
      13.9166666667, 14.3333333333,
      8.25,          8.5,
      8.75,          9.,
      9.25,          9.5,
      9.75,          10.,
      16.0833333333, 16.5,
      16.9166666667, 17.3333333333,
      6.8333333333,  7.,
      7.1666666667,  7.3333333333,
      18.0833333333, 18.5,
      18.9166666667, 19.3333333333,
      11.25,         11.5,
      11.75,         12.,
      17.4166666667, 17.8333333333,
      18.25,         18.6666666667,
      30.1388888889, 30.8333333333,
      31.5277777778, 32.2222222222,
      12.7222222222, 13.,
      13.2777777778, 13.5555555556,
      33.4722222222, 34.1666666667,
      34.8611111111, 35.5555555556,
      20.75,         21.1666666667,
      21.5833333333, 22.,
      8.1666666667,  8.3333333333,
      8.5,           8.6666666667,
      14.0555555556, 14.3333333333,
      14.6111111111, 14.8888888889,
      5.8888888889,  6.,
      6.1111111111,  6.2222222222,
      15.3888888889, 15.6666666667,
      15.9444444444, 16.2222222222,
      9.5,           9.6666666667,
      9.8333333333,  10.,
      23.4166666667, 23.8333333333,
      24.25,         24.6666666667,
      40.1388888889, 40.8333333333,
      41.5277777778, 42.2222222222,
      16.7222222222, 17.,
      17.2777777778, 17.5555555556,
      43.4722222222, 44.1666666667,
      44.8611111111, 45.5555555556,
      26.75,         27.1666666667,
      27.5833333333, 28.,
      15.25,         15.5,
      15.75,         16.,
      26.0833333333, 26.5,
      26.9166666667, 27.3333333333,
      10.8333333333, 11.,
      11.1666666667, 11.3333333333,
      28.0833333333, 28.5,
      28.9166666667, 29.3333333333,
      17.25,         17.5,
      17.75,         18.,
      18.25,         18.5,
      18.75,         19.,
      31.0833333333, 31.5,
      31.9166666667, 32.3333333333,
      12.8333333333, 13.,
      13.1666666667, 13.3333333333,
      33.0833333333, 33.5,
      33.9166666667, 34.3333333333,
      20.25,         20.5,
      20.75,         21.,
      32.4166666667, 32.8333333333,
      33.25,         33.6666666667,
      55.1388888889, 55.8333333333,
      56.5277777778, 57.2222222222,
      22.7222222222, 23.,
      23.2777777778, 23.5555555556,
      58.4722222222, 59.1666666667,
      59.8611111111, 60.5555555556,
      35.75,         36.1666666667,
      36.5833333333, 37.,
      14.1666666667, 14.3333333333,
      14.5,          14.6666666667,
      24.0555555556, 24.3333333333,
      24.6111111111, 24.8888888889,
      9.8888888889,  10.,
      10.1111111111, 10.2222222222,
      25.3888888889, 25.6666666667,
      25.9444444444, 26.2222222222,
      15.5,          15.6666666667,
      15.8333333333, 16.,
      38.4166666667, 38.8333333333,
      39.25,         39.6666666667,
      65.1388888889, 65.8333333333,
      66.5277777778, 67.2222222222,
      26.7222222222, 27.,
      27.2777777778, 27.5555555556,
      68.4722222222, 69.1666666667,
      69.8611111111, 70.5555555556,
      41.75,         42.1666666667,
      42.5833333333, 43.,
      24.25,         24.5,
      24.75,         25.,
      41.0833333333, 41.5,
      41.9166666667, 42.3333333333,
      16.8333333333, 17.,
      17.1666666667, 17.3333333333,
      43.0833333333, 43.5,
      43.9166666667, 44.3333333333,
      26.25,         26.5,
      26.75,         27.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0.1111111111,
                                         0.2222222222,
                                         0.3333333333,
                                         0.4444444444,
                                         0.1111111111,
                                         0.2222222222,
                                         0.3333333333,
                                         0.4444444444,
                                         0.6666666667,
                                         0.8888888889,
                                         1.1111111111,
                                         1.3333333333,
                                         0.5555555556,
                                         0.6666666667,
                                         0.7777777778,
                                         0.8888888889,
                                         0.5555555556,
                                         0.6666666667,
                                         0.7777777778,
                                         0.8888888889,
                                         0.1111111111,
                                         0.2222222222,
                                         0.3333333333,
                                         0.4444444444,
                                         0.1111111111,
                                         0.2222222222,
                                         0.3333333333,
                                         0.4444444444,
                                         0.6666666667,
                                         0.8888888889,
                                         1.1111111111,
                                         1.3333333333,
                                         0.5555555556,
                                         0.6666666667,
                                         0.7777777778,
                                         0.8888888889,
                                         0.5555555556,
                                         0.6666666667,
                                         0.7777777778,
                                         0.8888888889,
                                         1.1111111111,
                                         1.3333333333,
                                         1.5555555556,
                                         1.7777777778,
                                         1.1111111111,
                                         1.3333333333,
                                         1.5555555556,
                                         1.7777777778,
                                         3.1111111111,
                                         3.5555555556,
                                         4.,
                                         4.4444444444,
                                         2.,
                                         2.2222222222,
                                         2.4444444444,
                                         2.6666666667,
                                         2.,
                                         2.2222222222,
                                         2.4444444444,
                                         2.6666666667,
                                         1.,
                                         1.1111111111,
                                         1.2222222222,
                                         1.3333333333,
                                         1.,
                                         1.1111111111,
                                         1.2222222222,
                                         1.3333333333,
                                         2.4444444444,
                                         2.6666666667,
                                         2.8888888889,
                                         3.1111111111,
                                         1.4444444444,
                                         1.5555555556,
                                         1.6666666667,
                                         1.7777777778,
                                         1.4444444444,
                                         1.5555555556,
                                         1.6666666667,
                                         1.7777777778,
                                         1.,
                                         1.1111111111,
                                         1.2222222222,
                                         1.3333333333,
                                         1.,
                                         1.1111111111,
                                         1.2222222222,
                                         1.3333333333,
                                         2.4444444444,
                                         2.6666666667,
                                         2.8888888889,
                                         3.1111111111,
                                         1.4444444444,
                                         1.5555555556,
                                         1.6666666667,
                                         1.7777777778,
                                         1.4444444444,
                                         1.5555555556,
                                         1.6666666667,
                                         1.7777777778,
                                         1.8888888889,
                                         2.,
                                         2.1111111111,
                                         2.2222222222,
                                         1.8888888889,
                                         2.,
                                         2.1111111111,
                                         2.2222222222,
                                         4.2222222222,
                                         4.4444444444,
                                         4.6666666667,
                                         4.8888888889,
                                         2.3333333333,
                                         2.4444444444,
                                         2.5555555556,
                                         2.6666666667,
                                         2.3333333333,
                                         2.4444444444,
                                         2.5555555556,
                                         2.6666666667,
                                         1.8888888889,
                                         2.,
                                         2.1111111111,
                                         2.2222222222,
                                         1.8888888889,
                                         2.,
                                         2.1111111111,
                                         2.2222222222,
                                         4.2222222222,
                                         4.4444444444,
                                         4.6666666667,
                                         4.8888888889,
                                         2.3333333333,
                                         2.4444444444,
                                         2.5555555556,
                                         2.6666666667,
                                         2.3333333333,
                                         2.4444444444,
                                         2.5555555556,
                                         2.6666666667,
                                         4.6666666667,
                                         4.8888888889,
                                         5.1111111111,
                                         5.3333333333,
                                         4.6666666667,
                                         4.8888888889,
                                         5.1111111111,
                                         5.3333333333,
                                         10.2222222222,
                                         10.6666666667,
                                         11.1111111111,
                                         11.5555555556,
                                         5.5555555556,
                                         5.7777777778,
                                         6.,
                                         6.2222222222,
                                         5.5555555556,
                                         5.7777777778,
                                         6.,
                                         6.2222222222,
                                         2.7777777778,
                                         2.8888888889,
                                         3.,
                                         3.1111111111,
                                         2.7777777778,
                                         2.8888888889,
                                         3.,
                                         3.1111111111,
                                         6.,
                                         6.2222222222,
                                         6.4444444444,
                                         6.6666666667,
                                         3.2222222222,
                                         3.3333333333,
                                         3.4444444444,
                                         3.5555555556,
                                         3.2222222222,
                                         3.3333333333,
                                         3.4444444444,
                                         3.5555555556,
                                         2.7777777778,
                                         2.8888888889,
                                         3.,
                                         3.1111111111,
                                         2.7777777778,
                                         2.8888888889,
                                         3.,
                                         3.1111111111,
                                         6.,
                                         6.2222222222,
                                         6.4444444444,
                                         6.6666666667,
                                         3.2222222222,
                                         3.3333333333,
                                         3.4444444444,
                                         3.5555555556,
                                         3.2222222222,
                                         3.3333333333,
                                         3.4444444444,
                                         3.5555555556,
                                         3.6666666667,
                                         3.7777777778,
                                         3.8888888889,
                                         4.,
                                         3.6666666667,
                                         3.7777777778,
                                         3.8888888889,
                                         4.,
                                         7.7777777778,
                                         8.,
                                         8.2222222222,
                                         8.4444444444,
                                         4.1111111111,
                                         4.2222222222,
                                         4.3333333333,
                                         4.4444444444,
                                         4.1111111111,
                                         4.2222222222,
                                         4.3333333333,
                                         4.4444444444,
                                         3.6666666667,
                                         3.7777777778,
                                         3.8888888889,
                                         4.,
                                         3.6666666667,
                                         3.7777777778,
                                         3.8888888889,
                                         4.,
                                         7.7777777778,
                                         8.,
                                         8.2222222222,
                                         8.4444444444,
                                         4.1111111111,
                                         4.2222222222,
                                         4.3333333333,
                                         4.4444444444,
                                         4.1111111111,
                                         4.2222222222,
                                         4.3333333333,
                                         4.4444444444,
                                         8.2222222222,
                                         8.4444444444,
                                         8.6666666667,
                                         8.8888888889,
                                         8.2222222222,
                                         8.4444444444,
                                         8.6666666667,
                                         8.8888888889,
                                         17.3333333333,
                                         17.7777777778,
                                         18.2222222222,
                                         18.6666666667,
                                         9.1111111111,
                                         9.3333333333,
                                         9.5555555556,
                                         9.7777777778,
                                         9.1111111111,
                                         9.3333333333,
                                         9.5555555556,
                                         9.7777777778,
                                         4.5555555556,
                                         4.6666666667,
                                         4.7777777778,
                                         4.8888888889,
                                         4.5555555556,
                                         4.6666666667,
                                         4.7777777778,
                                         4.8888888889,
                                         9.5555555556,
                                         9.7777777778,
                                         10.,
                                         10.2222222222,
                                         5.,
                                         5.1111111111,
                                         5.2222222222,
                                         5.3333333333,
                                         5.,
                                         5.1111111111,
                                         5.2222222222,
                                         5.3333333333,
                                         4.5555555556,
                                         4.6666666667,
                                         4.7777777778,
                                         4.8888888889,
                                         4.5555555556,
                                         4.6666666667,
                                         4.7777777778,
                                         4.8888888889,
                                         9.5555555556,
                                         9.7777777778,
                                         10.,
                                         10.2222222222,
                                         5.,
                                         5.1111111111,
                                         5.2222222222,
                                         5.3333333333,
                                         5.,
                                         5.1111111111,
                                         5.2222222222,
                                         5.3333333333};
  const std::array<int, 4> in_shape = {{3, 5, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.1666666667, 0.5,  0.3333333333, 1.0833333333,  0.75,
      0.6111111111, 0.6111111111, 1.5,  0.8888888889, 2.6388888889,  1.75,
      0.4444444444, 0.4444444444, 1.,   0.5555555556, 1.5555555556,  1.,
      1.6111111111, 1.6111111111, 3.5,  1.8888888889, 5.1388888889,  3.25,
      1.1666666667, 1.1666666667, 2.5,  1.3333333333, 3.5833333333,  2.25,
      1.6666666667, 1.6666666667, 3.5,  1.8333333333, 4.8333333333,  3.,
      3.1111111111, 3.1111111111, 6.5,  3.3888888889, 8.8888888889,  5.5,
      1.4444444444, 1.4444444444, 3.,   1.5555555556, 4.0555555556,  2.5,
      4.1111111111, 4.1111111111, 8.5,  4.3888888889, 11.3888888889, 7.,
      2.6666666667, 2.6666666667, 5.5,  2.8333333333, 7.3333333333,  4.5,
      3.1666666667, 3.1666666667, 6.5,  3.3333333333, 8.5833333333,  5.25,
      5.6111111111, 5.6111111111, 11.5, 5.8888888889, 15.1388888889, 9.25,
      2.4444444444, 2.4444444444, 5.,   2.5555555556, 6.5555555556,  4.,
      6.6111111111, 6.6111111111, 13.5, 6.8888888889, 17.6388888889, 10.75,
      4.1666666667, 4.1666666667, 8.5,  4.3333333333, 11.0833333333, 6.75,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      1.3333333333, 1.3333333333, 2.8888888889, 1.5555555556, 1.5555555556, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111, 0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111, 0.,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.1666666667,
      0.3333333333,
      0.6666666667,
      1.,
      0.5,
      0.6666666667,
      1.75,
      2.1666666667,
      1.25,
      1.5,
      0.9444444444,
      1.2222222222,
      0.9444444444,
      1.2222222222,
      2.4444444444,
      3.,
      1.5,
      1.7777777778,
      4.5833333333,
      5.2777777778,
      3.0833333333,
      3.5,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      2.9444444444,
      3.2222222222,
      2.9444444444,
      3.2222222222,
      6.4444444444,
      7.,
      3.5,
      3.7777777778,
      9.5833333333,
      10.2777777778,
      6.0833333333,
      6.5,
      2.1666666667,
      2.3333333333,
      2.1666666667,
      2.3333333333,
      4.6666666667,
      5.,
      2.5,
      2.6666666667,
      6.75,
      7.1666666667,
      4.25,
      4.5,
      3.1666666667,
      3.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      5.9444444444,
      6.2222222222,
      5.9444444444,
      6.2222222222,
      12.4444444444,
      13.,
      6.5,
      6.7777777778,
      17.0833333333,
      17.7777777778,
      10.5833333333,
      11.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      7.9444444444,
      8.2222222222,
      7.9444444444,
      8.2222222222,
      16.4444444444,
      17.,
      8.5,
      8.7777777778,
      22.0833333333,
      22.7777777778,
      13.5833333333,
      14.,
      5.1666666667,
      5.3333333333,
      5.1666666667,
      5.3333333333,
      10.6666666667,
      11.,
      5.5,
      5.6666666667,
      14.25,
      14.6666666667,
      8.75,
      9.,
      6.1666666667,
      6.3333333333,
      6.1666666667,
      6.3333333333,
      12.6666666667,
      13.,
      6.5,
      6.6666666667,
      16.75,
      17.1666666667,
      10.25,
      10.5,
      10.9444444444,
      11.2222222222,
      10.9444444444,
      11.2222222222,
      22.4444444444,
      23.,
      11.5,
      11.7777777778,
      29.5833333333,
      30.2777777778,
      18.0833333333,
      18.5,
      4.7777777778,
      4.8888888889,
      4.7777777778,
      4.8888888889,
      9.7777777778,
      10.,
      5.,
      5.1111111111,
      12.8333333333,
      13.1111111111,
      7.8333333333,
      8.,
      12.9444444444,
      13.2222222222,
      12.9444444444,
      13.2222222222,
      26.4444444444,
      27.,
      13.5,
      13.7777777778,
      34.5833333333,
      35.2777777778,
      21.0833333333,
      21.5,
      8.1666666667,
      8.3333333333,
      8.1666666667,
      8.3333333333,
      16.6666666667,
      17.,
      8.5,
      8.6666666667,
      21.75,
      22.1666666667,
      13.25,
      13.5,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.,           0.,           0.1111111111, 0.2222222222, 0.1111111111,
      0.2222222222, 0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444,
      0.3333333333, 0.4444444444, 0.,           0.,           0.6666666667,
      0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778, 2.2222222222,
      1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333, 0.,
      0.,           0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      1.3333333333, 1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778,
      0.8888888889, 0.,           0.,           0.5555555556, 0.6666666667,
      0.5555555556, 0.6666666667, 1.3333333333, 1.5555555556, 0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 0.,           0.,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      0.,           0.,           1.,           1.1111111111, 1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           2.4444444444,
      2.6666666667, 2.4444444444, 2.6666666667, 5.3333333333, 5.7777777778,
      2.8888888889, 3.1111111111, 2.8888888889, 3.1111111111, 0.,
      0.,           1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556,
      3.1111111111, 3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667,
      1.7777777778, 0.,           0.,           1.4444444444, 1.5555555556,
      1.4444444444, 1.5555555556, 3.1111111111, 3.3333333333, 1.6666666667,
      1.7777777778, 1.6666666667, 1.7777777778, 0.,           0.,
      1.8888888889, 2.,           1.8888888889, 2.,           4.,
      4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222,
      0.,           0.,           1.8888888889, 2.,           1.8888888889,
      2.,           4.,           4.2222222222, 2.1111111111, 2.2222222222,
      2.1111111111, 2.2222222222, 0.,           0.,           4.2222222222,
      4.4444444444, 4.2222222222, 4.4444444444, 8.8888888889, 9.3333333333,
      4.6666666667, 4.8888888889, 4.6666666667, 4.8888888889, 0.,
      0.,           2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444,
      4.8888888889, 5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556,
      2.6666666667, 0.,           0.,           2.3333333333, 2.4444444444,
      2.3333333333, 2.4444444444, 4.8888888889, 5.1111111111, 2.5555555556,
      2.6666666667, 2.5555555556, 2.6666666667, 0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      1.,
      1.3333333333,
      1.6666666667,
      2.,
      0.8333333333,
      1.,
      1.1666666667,
      1.3333333333,
      3.0833333333,
      3.5,
      3.9166666667,
      4.3333333333,
      2.25,
      2.5,
      2.75,
      3.,
      1.6111111111,
      1.8888888889,
      2.1666666667,
      2.4444444444,
      1.6111111111,
      1.8888888889,
      2.1666666667,
      2.4444444444,
      4.3333333333,
      4.8888888889,
      5.4444444444,
      6.,
      2.7222222222,
      3.,
      3.2777777778,
      3.5555555556,
      8.4722222222,
      9.1666666667,
      9.8611111111,
      10.5555555556,
      5.75,
      6.1666666667,
      6.5833333333,
      7.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      12.3333333333,
      12.8888888889,
      13.4444444444,
      14.,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
      11.6111111111,
      11.8888888889,
      12.1666666667,
      12.4444444444,
      11.6111111111,
      11.8888888889,
      12.1666666667,
      12.4444444444,
      24.3333333333,
      24.8888888889,
      25.4444444444,
      26.,
      12.7222222222,
      13.,
      13.2777777778,
      13.5555555556,
      33.4722222222,
      34.1666666667,
      34.8611111111,
      35.5555555556,
      20.75,
      21.1666666667,
      21.5833333333,
      22.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      15.6111111111,
      15.8888888889,
      16.1666666667,
      16.4444444444,
      15.6111111111,
      15.8888888889,
      16.1666666667,
      16.4444444444,
      32.3333333333,
      32.8888888889,
      33.4444444444,
      34.,
      16.7222222222,
      17.,
      17.2777777778,
      17.5555555556,
      43.4722222222,
      44.1666666667,
      44.8611111111,
      45.5555555556,
      26.75,
      27.1666666667,
      27.5833333333,
      28.,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      21.,
      21.3333333333,
      21.6666666667,
      22.,
      10.8333333333,
      11.,
      11.1666666667,
      11.3333333333,
      28.0833333333,
      28.5,
      28.9166666667,
      29.3333333333,
      17.25,
      17.5,
      17.75,
      18.,
      12.1666666667,
      12.3333333333,
      12.5,
      12.6666666667,
      12.1666666667,
      12.3333333333,
      12.5,
      12.6666666667,
      25.,
      25.3333333333,
      25.6666666667,
      26.,
      12.8333333333,
      13.,
      13.1666666667,
      13.3333333333,
      33.0833333333,
      33.5,
      33.9166666667,
      34.3333333333,
      20.25,
      20.5,
      20.75,
      21.,
      21.6111111111,
      21.8888888889,
      22.1666666667,
      22.4444444444,
      21.6111111111,
      21.8888888889,
      22.1666666667,
      22.4444444444,
      44.3333333333,
      44.8888888889,
      45.4444444444,
      46.,
      22.7222222222,
      23.,
      23.2777777778,
      23.5555555556,
      58.4722222222,
      59.1666666667,
      59.8611111111,
      60.5555555556,
      35.75,
      36.1666666667,
      36.5833333333,
      37.,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      9.8888888889,
      10.,
      10.1111111111,
      10.2222222222,
      25.3888888889,
      25.6666666667,
      25.9444444444,
      26.2222222222,
      15.5,
      15.6666666667,
      15.8333333333,
      16.,
      25.6111111111,
      25.8888888889,
      26.1666666667,
      26.4444444444,
      25.6111111111,
      25.8888888889,
      26.1666666667,
      26.4444444444,
      52.3333333333,
      52.8888888889,
      53.4444444444,
      54.,
      26.7222222222,
      27.,
      27.2777777778,
      27.5555555556,
      68.4722222222,
      69.1666666667,
      69.8611111111,
      70.5555555556,
      41.75,
      42.1666666667,
      42.5833333333,
      43.,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      33.,
      33.3333333333,
      33.6666666667,
      34.,
      16.8333333333,
      17.,
      17.1666666667,
      17.3333333333,
      43.0833333333,
      43.5,
      43.9166666667,
      44.3333333333,
      26.25,
      26.5,
      26.75,
      27.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      3.1111111111,
      3.5555555556,
      4.,
      4.4444444444,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      10.2222222222,
      10.6666666667,
      11.1111111111,
      11.5555555556,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      17.3333333333,
      17.7777777778,
      18.2222222222,
      18.6666666667,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,  0.1666666667, 0.5,           0.3333333333,
      0.8333333333,  0.5,          1.5,           1.,
      0.7222222222,  0.7222222222, 1.7222222222,  1.,
      2.2777777778,  1.2777777778, 3.6111111111,  2.3333333333,
      0.5555555556,  0.5555555556, 1.2222222222,  0.6666666667,
      1.4444444444,  0.7777777778, 2.1111111111,  1.3333333333,
      2.0555555556,  2.0555555556, 4.3888888889,  2.3333333333,
      4.9444444444,  2.6111111111, 6.9444444444,  4.3333333333,
      1.5,           1.5,          3.1666666667,  1.6666666667,
      3.5,           1.8333333333, 4.8333333333,  3.,
      2.1666666667,  2.1666666667, 4.5,           2.3333333333,
      4.8333333333,  2.5,          6.5,           4.,
      4.0555555556,  4.0555555556, 8.3888888889,  4.3333333333,
      8.9444444444,  4.6111111111, 11.9444444444, 7.3333333333,
      1.8888888889,  1.8888888889, 3.8888888889,  2.,
      4.1111111111,  2.1111111111, 5.4444444444,  3.3333333333,
      5.3888888889,  5.3888888889, 11.0555555556, 5.6666666667,
      11.6111111111, 5.9444444444, 15.2777777778, 9.3333333333,
      3.5,           3.5,          7.1666666667,  3.6666666667,
      7.5,           3.8333333333, 9.8333333333,  6.,
      4.1666666667,  4.1666666667, 8.5,           4.3333333333,
      8.8333333333,  4.5,          11.5,          7.,
      7.3888888889,  7.3888888889, 15.0555555556, 7.6666666667,
      15.6111111111, 7.9444444444, 20.2777777778, 12.3333333333,
      3.2222222222,  3.2222222222, 6.5555555556,  3.3333333333,
      6.7777777778,  3.4444444444, 8.7777777778,  5.3333333333,
      8.7222222222,  8.7222222222, 17.7222222222, 9.,
      18.2777777778, 9.2777777778, 23.6111111111, 14.3333333333,
      5.5,           5.5,          11.1666666667, 5.6666666667,
      11.5,          5.8333333333, 14.8333333333, 9.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 0.3333333333, 0.,           0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 0.3333333333,
      0.,           0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778,
      1.7777777778, 1.,           1.,           0.,           0.4444444444,
      0.4444444444, 1.,           0.5555555556, 1.2222222222, 0.6666666667,
      0.6666666667, 0.,           0.4444444444, 0.4444444444, 1.,
      0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 1.8888888889,
      1.,           1.,           0.,           0.7777777778, 0.7777777778,
      1.6666666667, 0.8888888889, 1.8888888889, 1.,           1.,
      0.,           1.8888888889, 1.8888888889, 4.,           2.1111111111,
      4.4444444444, 2.3333333333, 2.3333333333, 0.,           1.1111111111,
      1.1111111111, 2.3333333333, 1.2222222222, 2.5555555556, 1.3333333333,
      1.3333333333, 0.,           1.1111111111, 1.1111111111, 2.3333333333,
      1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      1.4444444444, 1.4444444444, 3.,           1.5555555556, 3.2222222222,
      1.6666666667, 1.6666666667, 0.,           1.4444444444, 1.4444444444,
      3.,           1.5555555556, 3.2222222222, 1.6666666667, 1.6666666667,
      0.,           3.2222222222, 3.2222222222, 6.6666666667, 3.4444444444,
      7.1111111111, 3.6666666667, 3.6666666667, 0.,           1.7777777778,
      1.7777777778, 3.6666666667, 1.8888888889, 3.8888888889, 2.,
      2.,           0.,           1.7777777778, 1.7777777778, 3.6666666667,
      1.8888888889, 3.8888888889, 2.,           2.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.1666666667,
      0.3333333333,
      0.6666666667,
      1.,
      0.5,
      0.6666666667,
      1.3333333333,
      1.6666666667,
      0.8333333333,
      1.,
      2.5833333333,
      3.,
      1.75,
      2.,
      1.1666666667,
      1.4444444444,
      1.1666666667,
      1.4444444444,
      2.8888888889,
      3.4444444444,
      1.7222222222,
      2.,
      4.,
      4.5555555556,
      2.2777777778,
      2.5555555556,
      6.5277777778,
      7.2222222222,
      4.25,
      4.6666666667,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      3.8333333333,
      4.1111111111,
      3.8333333333,
      4.1111111111,
      8.2222222222,
      8.7777777778,
      4.3888888889,
      4.6666666667,
      9.3333333333,
      9.8888888889,
      4.9444444444,
      5.2222222222,
      13.1944444444,
      13.8888888889,
      8.25,
      8.6666666667,
      2.8333333333,
      3.,
      2.8333333333,
      3.,
      6.,
      6.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      4.1666666667,
      4.3333333333,
      4.1666666667,
      4.3333333333,
      8.6666666667,
      9.,
      4.5,
      4.6666666667,
      9.3333333333,
      9.6666666667,
      4.8333333333,
      5.,
      12.5833333333,
      13.,
      7.75,
      8.,
      7.8333333333,
      8.1111111111,
      7.8333333333,
      8.1111111111,
      16.2222222222,
      16.7777777778,
      8.3888888889,
      8.6666666667,
      17.3333333333,
      17.8888888889,
      8.9444444444,
      9.2222222222,
      23.1944444444,
      23.8888888889,
      14.25,
      14.6666666667,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      8.,
      8.2222222222,
      4.1111111111,
      4.2222222222,
      10.6111111111,
      10.8888888889,
      6.5,
      6.6666666667,
      10.5,
      10.7777777778,
      10.5,
      10.7777777778,
      21.5555555556,
      22.1111111111,
      11.0555555556,
      11.3333333333,
      22.6666666667,
      23.2222222222,
      11.6111111111,
      11.8888888889,
      29.8611111111,
      30.5555555556,
      18.25,
      18.6666666667,
      6.8333333333,
      7.,
      6.8333333333,
      7.,
      14.,
      14.3333333333,
      7.1666666667,
      7.3333333333,
      14.6666666667,
      15.,
      7.5,
      7.6666666667,
      19.25,
      19.6666666667,
      11.75,
      12.,
      8.1666666667,
      8.3333333333,
      8.1666666667,
      8.3333333333,
      16.6666666667,
      17.,
      8.5,
      8.6666666667,
      17.3333333333,
      17.6666666667,
      8.8333333333,
      9.,
      22.5833333333,
      23.,
      13.75,
      14.,
      14.5,
      14.7777777778,
      14.5,
      14.7777777778,
      29.5555555556,
      30.1111111111,
      15.0555555556,
      15.3333333333,
      30.6666666667,
      31.2222222222,
      15.6111111111,
      15.8888888889,
      39.8611111111,
      40.5555555556,
      24.25,
      24.6666666667,
      6.3333333333,
      6.4444444444,
      6.3333333333,
      6.4444444444,
      12.8888888889,
      13.1111111111,
      6.5555555556,
      6.6666666667,
      13.3333333333,
      13.5555555556,
      6.7777777778,
      6.8888888889,
      17.2777777778,
      17.5555555556,
      10.5,
      10.6666666667,
      17.1666666667,
      17.4444444444,
      17.1666666667,
      17.4444444444,
      34.8888888889,
      35.4444444444,
      17.7222222222,
      18.,
      36.,
      36.5555555556,
      18.2777777778,
      18.5555555556,
      46.5277777778,
      47.2222222222,
      28.25,
      28.6666666667,
      10.8333333333,
      11.,
      10.8333333333,
      11.,
      22.,
      22.3333333333,
      11.1666666667,
      11.3333333333,
      22.6666666667,
      23.,
      11.5,
      11.6666666667,
      29.25,
      29.6666666667,
      17.75,
      18.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.8888888889,
      1.1111111111,
      0.8888888889,
      1.1111111111,
      2.2222222222,
      2.6666666667,
      1.3333333333,
      1.5555555556,
      3.1111111111,
      3.5555555556,
      1.7777777778,
      2.,
      1.7777777778,
      2.,
      0.,
      0.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      3.5555555556,
      3.7777777778,
      3.5555555556,
      3.7777777778,
      7.5555555556,
      8.,
      4.,
      4.2222222222,
      8.4444444444,
      8.8888888889,
      4.4444444444,
      4.6666666667,
      4.4444444444,
      4.6666666667,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      0.,
      0.,
      6.2222222222,
      6.4444444444,
      6.2222222222,
      6.4444444444,
      12.8888888889,
      13.3333333333,
      6.6666666667,
      6.8888888889,
      13.7777777778,
      14.2222222222,
      7.1111111111,
      7.3333333333,
      7.1111111111,
      7.3333333333,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x5x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      1.,
      1.3333333333,
      1.6666666667,
      2.,
      0.8333333333,
      1.,
      1.1666666667,
      1.3333333333,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      4.75,
      5.1666666667,
      5.5833333333,
      6.,
      3.25,
      3.5,
      3.75,
      4.,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      5.2222222222,
      5.7777777778,
      6.3333333333,
      6.8888888889,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      4.2777777778,
      4.5555555556,
      4.8333333333,
      5.1111111111,
      12.3611111111,
      13.0555555556,
      13.75,
      14.4444444444,
      8.0833333333,
      8.5,
      8.9166666667,
      9.3333333333,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      15.8888888889,
      16.4444444444,
      17.,
      17.5555555556,
      8.5,
      8.7777777778,
      9.0555555556,
      9.3333333333,
      18.1111111111,
      18.6666666667,
      19.2222222222,
      19.7777777778,
      9.6111111111,
      9.8888888889,
      10.1666666667,
      10.4444444444,
      25.6944444444,
      26.3888888889,
      27.0833333333,
      27.7777777778,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      11.6666666667,
      12.,
      12.3333333333,
      12.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      17.,
      17.3333333333,
      17.6666666667,
      18.,
      8.8333333333,
      9.,
      9.1666666667,
      9.3333333333,
      18.3333333333,
      18.6666666667,
      19.,
      19.3333333333,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      24.75,
      25.1666666667,
      25.5833333333,
      26.,
      15.25,
      15.5,
      15.75,
      16.,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      31.8888888889,
      32.4444444444,
      33.,
      33.5555555556,
      16.5,
      16.7777777778,
      17.0555555556,
      17.3333333333,
      34.1111111111,
      34.6666666667,
      35.2222222222,
      35.7777777778,
      17.6111111111,
      17.8888888889,
      18.1666666667,
      18.4444444444,
      45.6944444444,
      46.3888888889,
      47.0833333333,
      47.7777777778,
      28.0833333333,
      28.5,
      28.9166666667,
      29.3333333333,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      20.9444444444,
      21.2222222222,
      21.5,
      21.7777777778,
      12.8333333333,
      13.,
      13.1666666667,
      13.3333333333,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      42.5555555556,
      43.1111111111,
      43.6666666667,
      44.2222222222,
      21.8333333333,
      22.1111111111,
      22.3888888889,
      22.6666666667,
      44.7777777778,
      45.3333333333,
      45.8888888889,
      46.4444444444,
      22.9444444444,
      23.2222222222,
      23.5,
      23.7777777778,
      59.0277777778,
      59.7222222222,
      60.4166666667,
      61.1111111111,
      36.0833333333,
      36.5,
      36.9166666667,
      37.3333333333,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      27.6666666667,
      28.,
      28.3333333333,
      28.6666666667,
      14.1666666667,
      14.3333333333,
      14.5,
      14.6666666667,
      29.,
      29.3333333333,
      29.6666666667,
      30.,
      14.8333333333,
      15.,
      15.1666666667,
      15.3333333333,
      38.0833333333,
      38.5,
      38.9166666667,
      39.3333333333,
      23.25,
      23.5,
      23.75,
      24.,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      33.,
      33.3333333333,
      33.6666666667,
      34.,
      16.8333333333,
      17.,
      17.1666666667,
      17.3333333333,
      34.3333333333,
      34.6666666667,
      35.,
      35.3333333333,
      17.5,
      17.6666666667,
      17.8333333333,
      18.,
      44.75,
      45.1666666667,
      45.5833333333,
      46.,
      27.25,
      27.5,
      27.75,
      28.,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      58.5555555556,
      59.1111111111,
      59.6666666667,
      60.2222222222,
      29.8333333333,
      30.1111111111,
      30.3888888889,
      30.6666666667,
      60.7777777778,
      61.3333333333,
      61.8888888889,
      62.4444444444,
      30.9444444444,
      31.2222222222,
      31.5,
      31.7777777778,
      79.0277777778,
      79.7222222222,
      80.4166666667,
      81.1111111111,
      48.0833333333,
      48.5,
      48.9166666667,
      49.3333333333,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      25.5555555556,
      25.7777777778,
      26.,
      26.2222222222,
      13.,
      13.1111111111,
      13.2222222222,
      13.3333333333,
      26.4444444444,
      26.6666666667,
      26.8888888889,
      27.1111111111,
      13.4444444444,
      13.5555555556,
      13.6666666667,
      13.7777777778,
      34.2777777778,
      34.5555555556,
      34.8333333333,
      35.1111111111,
      20.8333333333,
      21.,
      21.1666666667,
      21.3333333333,
      34.0555555556,
      34.3333333333,
      34.6111111111,
      34.8888888889,
      34.0555555556,
      34.3333333333,
      34.6111111111,
      34.8888888889,
      69.2222222222,
      69.7777777778,
      70.3333333333,
      70.8888888889,
      35.1666666667,
      35.4444444444,
      35.7222222222,
      36.,
      71.4444444444,
      72.,
      72.5555555556,
      73.1111111111,
      36.2777777778,
      36.5555555556,
      36.8333333333,
      37.1111111111,
      92.3611111111,
      93.0555555556,
      93.75,
      94.4444444444,
      56.0833333333,
      56.5,
      56.9166666667,
      57.3333333333,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      43.6666666667,
      44.,
      44.3333333333,
      44.6666666667,
      22.1666666667,
      22.3333333333,
      22.5,
      22.6666666667,
      45.,
      45.3333333333,
      45.6666666667,
      46.,
      22.8333333333,
      23.,
      23.1666666667,
      23.3333333333,
      58.0833333333,
      58.5,
      58.9166666667,
      59.3333333333,
      35.25,
      35.5,
      35.75,
      36.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x5x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      5.7777777778,
      6.2222222222,
      6.6666666667,
      7.1111111111,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      14.6666666667,
      15.1111111111,
      15.5555555556,
      16.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      16.4444444444,
      16.8888888889,
      17.3333333333,
      17.7777777778,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      25.3333333333,
      25.7777777778,
      26.2222222222,
      26.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      27.1111111111,
      27.5555555556,
      28.,
      28.4444444444,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 5, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667, 0.3888888889,  0.2222222222, 0.7222222222,  0.5,
      0.1666666667, 0.3888888889,  0.2222222222, 0.7222222222,  0.5,
      0.8333333333, 1.6111111111,  0.7777777778, 2.2777777778,  1.5,
      0.6666666667, 1.2222222222,  0.5555555556, 1.5555555556,  1.,
      2.4166666667, 4.3055555556,  1.8888888889, 5.1388888889,  3.25,
      1.75,         3.0833333333,  1.3333333333, 3.5833333333,  2.25,
      1.6666666667, 2.8888888889,  1.2222222222, 3.2222222222,  2.,
      1.6666666667, 2.8888888889,  1.2222222222, 3.2222222222,  2.,
      3.8333333333, 6.6111111111,  2.7777777778, 7.2777777778,  4.5,
      2.1666666667, 3.7222222222,  1.5555555556, 4.0555555556,  2.5,
      6.1666666667, 10.5555555556, 4.3888888889, 11.3888888889, 7.,
      4.,           6.8333333333,  2.8333333333, 7.3333333333,  4.5,
      3.1666666667, 5.3888888889,  2.2222222222, 5.7222222222,  3.5,
      3.1666666667, 5.3888888889,  2.2222222222, 5.7222222222,  3.5,
      6.8333333333, 11.6111111111, 4.7777777778, 12.2777777778, 7.5,
      3.6666666667, 6.2222222222,  2.5555555556, 6.5555555556,  4.,
      9.9166666667, 16.8055555556, 6.8888888889, 17.6388888889, 10.75,
      6.25,         10.5833333333, 4.3333333333, 11.0833333333, 6.75,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.,           0.,           0.,           0.,           0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      1.3333333333, 1.3333333333, 2.8888888889, 1.5555555556, 1.5555555556,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      0.,           0.,           0.,           0.,           0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      1.3333333333,
      1.6666666667,
      2.6666666667,
      3.2222222222,
      1.3333333333,
      1.5555555556,
      4.,
      4.5555555556,
      2.6666666667,
      3.,
      1.1666666667,
      1.3333333333,
      2.1666666667,
      2.4444444444,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      4.4166666667,
      4.8333333333,
      7.9166666667,
      8.6111111111,
      3.5,
      3.7777777778,
      9.5833333333,
      10.2777777778,
      6.0833333333,
      6.5,
      3.25,
      3.5,
      5.75,
      6.1666666667,
      2.5,
      2.6666666667,
      6.75,
      7.1666666667,
      4.25,
      4.5,
      3.1666666667,
      3.3333333333,
      5.5,
      5.7777777778,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      3.1666666667,
      3.3333333333,
      5.5,
      5.7777777778,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      7.3333333333,
      7.6666666667,
      12.6666666667,
      13.2222222222,
      5.3333333333,
      5.5555555556,
      14.,
      14.5555555556,
      8.6666666667,
      9.,
      4.1666666667,
      4.3333333333,
      7.1666666667,
      7.4444444444,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      11.9166666667,
      12.3333333333,
      20.4166666667,
      21.1111111111,
      8.5,
      8.7777777778,
      22.0833333333,
      22.7777777778,
      13.5833333333,
      14.,
      7.75,
      8.,
      13.25,
      13.6666666667,
      5.5,
      5.6666666667,
      14.25,
      14.6666666667,
      8.75,
      9.,
      6.1666666667,
      6.3333333333,
      10.5,
      10.7777777778,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      6.1666666667,
      6.3333333333,
      10.5,
      10.7777777778,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      13.3333333333,
      13.6666666667,
      22.6666666667,
      23.2222222222,
      9.3333333333,
      9.5555555556,
      24.,
      24.5555555556,
      14.6666666667,
      15.,
      7.1666666667,
      7.3333333333,
      12.1666666667,
      12.4444444444,
      5.,
      5.1111111111,
      12.8333333333,
      13.1111111111,
      7.8333333333,
      8.,
      19.4166666667,
      19.8333333333,
      32.9166666667,
      33.6111111111,
      13.5,
      13.7777777778,
      34.5833333333,
      35.2777777778,
      21.0833333333,
      21.5,
      12.25,
      12.5,
      20.75,
      21.1666666667,
      8.5,
      8.6666666667,
      21.75,
      22.1666666667,
      13.25,
      13.5,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.6666666667, 0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778,
      2.2222222222, 1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667, 1.3333333333,
      1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778, 0.8888888889,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      1.,           1.1111111111, 1.,           1.1111111111, 2.2222222222,
      2.4444444444, 1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333,
      2.4444444444, 2.6666666667, 2.4444444444, 2.6666666667, 5.3333333333,
      5.7777777778, 2.8888888889, 3.1111111111, 2.8888888889, 3.1111111111,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667, 1.7777777778,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667, 1.7777777778,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      1.8888888889, 2.,           1.8888888889, 2.,           4.,
      4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222,
      1.8888888889, 2.,           1.8888888889, 2.,           4.,
      4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222,
      4.2222222222, 4.4444444444, 4.2222222222, 4.4444444444, 8.8888888889,
      9.3333333333, 4.6666666667, 4.8888888889, 4.6666666667, 4.8888888889,
      2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444, 4.8888888889,
      5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556, 2.6666666667,
      2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444, 4.8888888889,
      5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556, 2.6666666667,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      4.7777777778,
      5.3333333333,
      5.8888888889,
      6.4444444444,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      4.0555555556,
      4.3333333333,
      4.6111111111,
      4.8888888889,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      8.4166666667,
      8.8333333333,
      9.25,
      9.6666666667,
      15.1388888889,
      15.8333333333,
      16.5277777778,
      17.2222222222,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      6.25,
      6.5,
      6.75,
      7.,
      11.0833333333,
      11.5,
      11.9166666667,
      12.3333333333,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      10.7222222222,
      11.,
      11.2777777778,
      11.5555555556,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      10.7222222222,
      11.,
      11.2777777778,
      11.5555555556,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      14.3333333333,
      14.6666666667,
      15.,
      15.3333333333,
      24.7777777778,
      25.3333333333,
      25.8888888889,
      26.4444444444,
      10.4444444444,
      10.6666666667,
      10.8888888889,
      11.1111111111,
      27.4444444444,
      28.,
      28.5555555556,
      29.1111111111,
      17.,
      17.3333333333,
      17.6666666667,
      18.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      14.0555555556,
      14.3333333333,
      14.6111111111,
      14.8888888889,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      23.4166666667,
      23.8333333333,
      24.25,
      24.6666666667,
      40.1388888889,
      40.8333333333,
      41.5277777778,
      42.2222222222,
      16.7222222222,
      17.,
      17.2777777778,
      17.5555555556,
      43.4722222222,
      44.1666666667,
      44.8611111111,
      45.5555555556,
      26.75,
      27.1666666667,
      27.5833333333,
      28.,
      15.25,
      15.5,
      15.75,
      16.,
      26.0833333333,
      26.5,
      26.9166666667,
      27.3333333333,
      10.8333333333,
      11.,
      11.1666666667,
      11.3333333333,
      28.0833333333,
      28.5,
      28.9166666667,
      29.3333333333,
      17.25,
      17.5,
      17.75,
      18.,
      12.1666666667,
      12.3333333333,
      12.5,
      12.6666666667,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      12.1666666667,
      12.3333333333,
      12.5,
      12.6666666667,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      26.3333333333,
      26.6666666667,
      27.,
      27.3333333333,
      44.7777777778,
      45.3333333333,
      45.8888888889,
      46.4444444444,
      18.4444444444,
      18.6666666667,
      18.8888888889,
      19.1111111111,
      47.4444444444,
      48.,
      48.5555555556,
      49.1111111111,
      29.,
      29.3333333333,
      29.6666666667,
      30.,
      14.1666666667,
      14.3333333333,
      14.5,
      14.6666666667,
      24.0555555556,
      24.3333333333,
      24.6111111111,
      24.8888888889,
      9.8888888889,
      10.,
      10.1111111111,
      10.2222222222,
      25.3888888889,
      25.6666666667,
      25.9444444444,
      26.2222222222,
      15.5,
      15.6666666667,
      15.8333333333,
      16.,
      38.4166666667,
      38.8333333333,
      39.25,
      39.6666666667,
      65.1388888889,
      65.8333333333,
      66.5277777778,
      67.2222222222,
      26.7222222222,
      27.,
      27.2777777778,
      27.5555555556,
      68.4722222222,
      69.1666666667,
      69.8611111111,
      70.5555555556,
      41.75,
      42.1666666667,
      42.5833333333,
      43.,
      24.25,
      24.5,
      24.75,
      25.,
      41.0833333333,
      41.5,
      41.9166666667,
      42.3333333333,
      16.8333333333,
      17.,
      17.1666666667,
      17.3333333333,
      43.0833333333,
      43.5,
      43.9166666667,
      44.3333333333,
      26.25,
      26.5,
      26.75,
      27.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      3.1111111111,
      3.5555555556,
      4.,
      4.4444444444,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      10.2222222222,
      10.6666666667,
      11.1111111111,
      11.5555555556,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      17.3333333333,
      17.7777777778,
      18.2222222222,
      18.6666666667,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111,  0.3333333333,
      0.2222222222, 0.7222222222,  0.5,
      0.1111111111, 0.1111111111,  0.3333333333,
      0.2222222222, 0.7222222222,  0.5,
      0.5555555556, 0.5555555556,  1.3333333333,
      0.7777777778, 2.2777777778,  1.5,
      0.4444444444, 0.4444444444,  1.,
      0.5555555556, 1.5555555556,  1.,
      1.6111111111, 1.6111111111,  3.5,
      1.8888888889, 5.1388888889,  3.25,
      1.1666666667, 1.1666666667,  2.5,
      1.3333333333, 3.5833333333,  2.25,
      1.1111111111, 1.1111111111,  2.3333333333,
      1.2222222222, 3.2222222222,  2.,
      1.1111111111, 1.1111111111,  2.3333333333,
      1.2222222222, 3.2222222222,  2.,
      2.5555555556, 2.5555555556,  5.3333333333,
      2.7777777778, 7.2777777778,  4.5,
      1.4444444444, 1.4444444444,  3.,
      1.5555555556, 4.0555555556,  2.5,
      4.1111111111, 4.1111111111,  8.5,
      4.3888888889, 11.3888888889, 7.,
      2.6666666667, 2.6666666667,  5.5,
      2.8333333333, 7.3333333333,  4.5,
      2.1111111111, 2.1111111111,  4.3333333333,
      2.2222222222, 5.7222222222,  3.5,
      2.1111111111, 2.1111111111,  4.3333333333,
      2.2222222222, 5.7222222222,  3.5,
      4.5555555556, 4.5555555556,  9.3333333333,
      4.7777777778, 12.2777777778, 7.5,
      2.4444444444, 2.4444444444,  5.,
      2.5555555556, 6.5555555556,  4.,
      6.6111111111, 6.6111111111,  13.5,
      6.8888888889, 17.6388888889, 10.75,
      4.1666666667, 4.1666666667,  8.5,
      4.3333333333, 11.0833333333, 6.75,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      1.3333333333, 1.3333333333, 2.8888888889, 1.5555555556, 1.5555555556, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111, 0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111, 0.,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.8888888889,
      1.1111111111,
      0.8888888889,
      1.1111111111,
      2.2222222222,
      2.6666666667,
      1.3333333333,
      1.5555555556,
      4.,
      4.5555555556,
      2.6666666667,
      3.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      2.9444444444,
      3.2222222222,
      2.9444444444,
      3.2222222222,
      6.4444444444,
      7.,
      3.5,
      3.7777777778,
      9.5833333333,
      10.2777777778,
      6.0833333333,
      6.5,
      2.1666666667,
      2.3333333333,
      2.1666666667,
      2.3333333333,
      4.6666666667,
      5.,
      2.5,
      2.6666666667,
      6.75,
      7.1666666667,
      4.25,
      4.5,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      4.8888888889,
      5.1111111111,
      4.8888888889,
      5.1111111111,
      10.2222222222,
      10.6666666667,
      5.3333333333,
      5.5555555556,
      14.,
      14.5555555556,
      8.6666666667,
      9.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      7.9444444444,
      8.2222222222,
      7.9444444444,
      8.2222222222,
      16.4444444444,
      17.,
      8.5,
      8.7777777778,
      22.0833333333,
      22.7777777778,
      13.5833333333,
      14.,
      5.1666666667,
      5.3333333333,
      5.1666666667,
      5.3333333333,
      10.6666666667,
      11.,
      5.5,
      5.6666666667,
      14.25,
      14.6666666667,
      8.75,
      9.,
      4.1111111111,
      4.2222222222,
      4.1111111111,
      4.2222222222,
      8.4444444444,
      8.6666666667,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      4.1111111111,
      4.2222222222,
      4.1111111111,
      4.2222222222,
      8.4444444444,
      8.6666666667,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      8.8888888889,
      9.1111111111,
      8.8888888889,
      9.1111111111,
      18.2222222222,
      18.6666666667,
      9.3333333333,
      9.5555555556,
      24.,
      24.5555555556,
      14.6666666667,
      15.,
      4.7777777778,
      4.8888888889,
      4.7777777778,
      4.8888888889,
      9.7777777778,
      10.,
      5.,
      5.1111111111,
      12.8333333333,
      13.1111111111,
      7.8333333333,
      8.,
      12.9444444444,
      13.2222222222,
      12.9444444444,
      13.2222222222,
      26.4444444444,
      27.,
      13.5,
      13.7777777778,
      34.5833333333,
      35.2777777778,
      21.0833333333,
      21.5,
      8.1666666667,
      8.3333333333,
      8.1666666667,
      8.3333333333,
      16.6666666667,
      17.,
      8.5,
      8.6666666667,
      21.75,
      22.1666666667,
      13.25,
      13.5,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.2222222222, 0.1111111111, 0.2222222222, 0.4444444444,
      0.6666666667, 0.3333333333, 0.4444444444, 0.3333333333, 0.4444444444,
      0.,           0.,           0.1111111111, 0.2222222222, 0.1111111111,
      0.2222222222, 0.4444444444, 0.6666666667, 0.3333333333, 0.4444444444,
      0.3333333333, 0.4444444444, 0.,           0.,           0.6666666667,
      0.8888888889, 0.6666666667, 0.8888888889, 1.7777777778, 2.2222222222,
      1.1111111111, 1.3333333333, 1.1111111111, 1.3333333333, 0.,
      0.,           0.5555555556, 0.6666666667, 0.5555555556, 0.6666666667,
      1.3333333333, 1.5555555556, 0.7777777778, 0.8888888889, 0.7777777778,
      0.8888888889, 0.,           0.,           0.5555555556, 0.6666666667,
      0.5555555556, 0.6666666667, 1.3333333333, 1.5555555556, 0.7777777778,
      0.8888888889, 0.7777777778, 0.8888888889, 0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           1.,           1.1111111111, 1.,
      1.1111111111, 2.2222222222, 2.4444444444, 1.2222222222, 1.3333333333,
      1.2222222222, 1.3333333333, 0.,           0.,           1.,
      1.1111111111, 1.,           1.1111111111, 2.2222222222, 2.4444444444,
      1.2222222222, 1.3333333333, 1.2222222222, 1.3333333333, 0.,
      0.,           2.4444444444, 2.6666666667, 2.4444444444, 2.6666666667,
      5.3333333333, 5.7777777778, 2.8888888889, 3.1111111111, 2.8888888889,
      3.1111111111, 0.,           0.,           1.4444444444, 1.5555555556,
      1.4444444444, 1.5555555556, 3.1111111111, 3.3333333333, 1.6666666667,
      1.7777777778, 1.6666666667, 1.7777777778, 0.,           0.,
      1.4444444444, 1.5555555556, 1.4444444444, 1.5555555556, 3.1111111111,
      3.3333333333, 1.6666666667, 1.7777777778, 1.6666666667, 1.7777777778,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           1.8888888889,
      2.,           1.8888888889, 2.,           4.,           4.2222222222,
      2.1111111111, 2.2222222222, 2.1111111111, 2.2222222222, 0.,
      0.,           1.8888888889, 2.,           1.8888888889, 2.,
      4.,           4.2222222222, 2.1111111111, 2.2222222222, 2.1111111111,
      2.2222222222, 0.,           0.,           4.2222222222, 4.4444444444,
      4.2222222222, 4.4444444444, 8.8888888889, 9.3333333333, 4.6666666667,
      4.8888888889, 4.6666666667, 4.8888888889, 0.,           0.,
      2.3333333333, 2.4444444444, 2.3333333333, 2.4444444444, 4.8888888889,
      5.1111111111, 2.5555555556, 2.6666666667, 2.5555555556, 2.6666666667,
      0.,           0.,           2.3333333333, 2.4444444444, 2.3333333333,
      2.4444444444, 4.8888888889, 5.1111111111, 2.5555555556, 2.6666666667,
      2.5555555556, 2.6666666667, 0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      5.6111111111,
      5.8888888889,
      6.1666666667,
      6.4444444444,
      12.3333333333,
      12.8888888889,
      13.4444444444,
      14.,
      6.7222222222,
      7.,
      7.2777777778,
      7.5555555556,
      18.4722222222,
      19.1666666667,
      19.8611111111,
      20.5555555556,
      11.75,
      12.1666666667,
      12.5833333333,
      13.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      13.0833333333,
      13.5,
      13.9166666667,
      14.3333333333,
      8.25,
      8.5,
      8.75,
      9.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      20.,
      20.4444444444,
      20.8888888889,
      21.3333333333,
      10.4444444444,
      10.6666666667,
      10.8888888889,
      11.1111111111,
      27.4444444444,
      28.,
      28.5555555556,
      29.1111111111,
      17.,
      17.3333333333,
      17.6666666667,
      18.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      15.6111111111,
      15.8888888889,
      16.1666666667,
      16.4444444444,
      15.6111111111,
      15.8888888889,
      16.1666666667,
      16.4444444444,
      32.3333333333,
      32.8888888889,
      33.4444444444,
      34.,
      16.7222222222,
      17.,
      17.2777777778,
      17.5555555556,
      43.4722222222,
      44.1666666667,
      44.8611111111,
      45.5555555556,
      26.75,
      27.1666666667,
      27.5833333333,
      28.,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      21.,
      21.3333333333,
      21.6666666667,
      22.,
      10.8333333333,
      11.,
      11.1666666667,
      11.3333333333,
      28.0833333333,
      28.5,
      28.9166666667,
      29.3333333333,
      17.25,
      17.5,
      17.75,
      18.,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      16.6666666667,
      16.8888888889,
      17.1111111111,
      17.3333333333,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      16.6666666667,
      16.8888888889,
      17.1111111111,
      17.3333333333,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      36.,
      36.4444444444,
      36.8888888889,
      37.3333333333,
      18.4444444444,
      18.6666666667,
      18.8888888889,
      19.1111111111,
      47.4444444444,
      48.,
      48.5555555556,
      49.1111111111,
      29.,
      29.3333333333,
      29.6666666667,
      30.,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      9.8888888889,
      10.,
      10.1111111111,
      10.2222222222,
      25.3888888889,
      25.6666666667,
      25.9444444444,
      26.2222222222,
      15.5,
      15.6666666667,
      15.8333333333,
      16.,
      25.6111111111,
      25.8888888889,
      26.1666666667,
      26.4444444444,
      25.6111111111,
      25.8888888889,
      26.1666666667,
      26.4444444444,
      52.3333333333,
      52.8888888889,
      53.4444444444,
      54.,
      26.7222222222,
      27.,
      27.2777777778,
      27.5555555556,
      68.4722222222,
      69.1666666667,
      69.8611111111,
      70.5555555556,
      41.75,
      42.1666666667,
      42.5833333333,
      43.,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      33.,
      33.3333333333,
      33.6666666667,
      34.,
      16.8333333333,
      17.,
      17.1666666667,
      17.3333333333,
      43.0833333333,
      43.5,
      43.9166666667,
      44.3333333333,
      26.25,
      26.5,
      26.75,
      27.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      3.1111111111,
      3.5555555556,
      4.,
      4.4444444444,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      4.6666666667,
      4.8888888889,
      5.1111111111,
      5.3333333333,
      10.2222222222,
      10.6666666667,
      11.1111111111,
      11.5555555556,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      17.3333333333,
      17.7777777778,
      18.2222222222,
      18.6666666667,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      1.,
      0.6666666667,
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      1.,
      0.6666666667,
      0.6666666667,
      0.6666666667,
      1.5555555556,
      0.8888888889,
      2.,
      1.1111111111,
      3.1111111111,
      2.,
      0.5555555556,
      0.5555555556,
      1.2222222222,
      0.6666666667,
      1.4444444444,
      0.7777777778,
      2.1111111111,
      1.3333333333,
      2.0555555556,
      2.0555555556,
      4.3888888889,
      2.3333333333,
      4.9444444444,
      2.6111111111,
      6.9444444444,
      4.3333333333,
      1.5,
      1.5,
      3.1666666667,
      1.6666666667,
      3.5,
      1.8333333333,
      4.8333333333,
      3.,
      1.4444444444,
      1.4444444444,
      3.,
      1.5555555556,
      3.2222222222,
      1.6666666667,
      4.3333333333,
      2.6666666667,
      1.4444444444,
      1.4444444444,
      3.,
      1.5555555556,
      3.2222222222,
      1.6666666667,
      4.3333333333,
      2.6666666667,
      3.3333333333,
      3.3333333333,
      6.8888888889,
      3.5555555556,
      7.3333333333,
      3.7777777778,
      9.7777777778,
      6.,
      1.8888888889,
      1.8888888889,
      3.8888888889,
      2.,
      4.1111111111,
      2.1111111111,
      5.4444444444,
      3.3333333333,
      5.3888888889,
      5.3888888889,
      11.0555555556,
      5.6666666667,
      11.6111111111,
      5.9444444444,
      15.2777777778,
      9.3333333333,
      3.5,
      3.5,
      7.1666666667,
      3.6666666667,
      7.5,
      3.8333333333,
      9.8333333333,
      6.,
      2.7777777778,
      2.7777777778,
      5.6666666667,
      2.8888888889,
      5.8888888889,
      3.,
      7.6666666667,
      4.6666666667,
      2.7777777778,
      2.7777777778,
      5.6666666667,
      2.8888888889,
      5.8888888889,
      3.,
      7.6666666667,
      4.6666666667,
      6.,
      6.,
      12.2222222222,
      6.2222222222,
      12.6666666667,
      6.4444444444,
      16.4444444444,
      10.,
      3.2222222222,
      3.2222222222,
      6.5555555556,
      3.3333333333,
      6.7777777778,
      3.4444444444,
      8.7777777778,
      5.3333333333,
      8.7222222222,
      8.7222222222,
      17.7222222222,
      9.,
      18.2777777778,
      9.2777777778,
      23.6111111111,
      14.3333333333,
      5.5,
      5.5,
      11.1666666667,
      5.6666666667,
      11.5,
      5.8333333333,
      14.8333333333,
      9.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.5555555556,
      0.3333333333, 0.3333333333, 0.,           0.1111111111, 0.1111111111,
      0.3333333333, 0.2222222222, 0.5555555556, 0.3333333333, 0.3333333333,
      0.,           0.5555555556, 0.5555555556, 1.3333333333, 0.7777777778,
      1.7777777778, 1.,           1.,           0.,           0.4444444444,
      0.4444444444, 1.,           0.5555555556, 1.2222222222, 0.6666666667,
      0.6666666667, 0.,           0.4444444444, 0.4444444444, 1.,
      0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.7777777778, 0.7777777778,
      1.6666666667, 0.8888888889, 1.8888888889, 1.,           1.,
      0.,           0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889,
      1.8888888889, 1.,           1.,           0.,           1.8888888889,
      1.8888888889, 4.,           2.1111111111, 4.4444444444, 2.3333333333,
      2.3333333333, 0.,           1.1111111111, 1.1111111111, 2.3333333333,
      1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      1.1111111111, 1.1111111111, 2.3333333333, 1.2222222222, 2.5555555556,
      1.3333333333, 1.3333333333, 0.,           0.,           0.,
      0.,           0.,           0.,           0.,           0.,
      0.,           1.4444444444, 1.4444444444, 3.,           1.5555555556,
      3.2222222222, 1.6666666667, 1.6666666667, 0.,           1.4444444444,
      1.4444444444, 3.,           1.5555555556, 3.2222222222, 1.6666666667,
      1.6666666667, 0.,           3.2222222222, 3.2222222222, 6.6666666667,
      3.4444444444, 7.1111111111, 3.6666666667, 3.6666666667, 0.,
      1.7777777778, 1.7777777778, 3.6666666667, 1.8888888889, 3.8888888889,
      2.,           2.,           0.,           1.7777777778, 1.7777777778,
      3.6666666667, 1.8888888889, 3.8888888889, 2.,           2.,
      0.,           0.,           0.,           0.,           0.,
      0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      2.6666666667,
      3.1111111111,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      5.6666666667,
      6.2222222222,
      3.6666666667,
      4.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      3.8333333333,
      4.1111111111,
      3.8333333333,
      4.1111111111,
      8.2222222222,
      8.7777777778,
      4.3888888889,
      4.6666666667,
      9.3333333333,
      9.8888888889,
      4.9444444444,
      5.2222222222,
      13.1944444444,
      13.8888888889,
      8.25,
      8.6666666667,
      2.8333333333,
      3.,
      2.8333333333,
      3.,
      6.,
      6.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      8.3888888889,
      8.6666666667,
      5.1666666667,
      5.3333333333,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      8.3888888889,
      8.6666666667,
      5.1666666667,
      5.3333333333,
      6.4444444444,
      6.6666666667,
      6.4444444444,
      6.6666666667,
      13.3333333333,
      13.7777777778,
      6.8888888889,
      7.1111111111,
      14.2222222222,
      14.6666666667,
      7.3333333333,
      7.5555555556,
      19.,
      19.5555555556,
      11.6666666667,
      12.,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      8.,
      8.2222222222,
      4.1111111111,
      4.2222222222,
      10.6111111111,
      10.8888888889,
      6.5,
      6.6666666667,
      10.5,
      10.7777777778,
      10.5,
      10.7777777778,
      21.5555555556,
      22.1111111111,
      11.0555555556,
      11.3333333333,
      22.6666666667,
      23.2222222222,
      11.6111111111,
      11.8888888889,
      29.8611111111,
      30.5555555556,
      18.25,
      18.6666666667,
      6.8333333333,
      7.,
      6.8333333333,
      7.,
      14.,
      14.3333333333,
      7.1666666667,
      7.3333333333,
      14.6666666667,
      15.,
      7.5,
      7.6666666667,
      19.25,
      19.6666666667,
      11.75,
      12.,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      11.5555555556,
      11.7777777778,
      5.8888888889,
      6.,
      15.0555555556,
      15.3333333333,
      9.1666666667,
      9.3333333333,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      11.5555555556,
      11.7777777778,
      5.8888888889,
      6.,
      15.0555555556,
      15.3333333333,
      9.1666666667,
      9.3333333333,
      11.7777777778,
      12.,
      11.7777777778,
      12.,
      24.,
      24.4444444444,
      12.2222222222,
      12.4444444444,
      24.8888888889,
      25.3333333333,
      12.6666666667,
      12.8888888889,
      32.3333333333,
      32.8888888889,
      19.6666666667,
      20.,
      6.3333333333,
      6.4444444444,
      6.3333333333,
      6.4444444444,
      12.8888888889,
      13.1111111111,
      6.5555555556,
      6.6666666667,
      13.3333333333,
      13.5555555556,
      6.7777777778,
      6.8888888889,
      17.2777777778,
      17.5555555556,
      10.5,
      10.6666666667,
      17.1666666667,
      17.4444444444,
      17.1666666667,
      17.4444444444,
      34.8888888889,
      35.4444444444,
      17.7222222222,
      18.,
      36.,
      36.5555555556,
      18.2777777778,
      18.5555555556,
      46.5277777778,
      47.2222222222,
      28.25,
      28.6666666667,
      10.8333333333,
      11.,
      10.8333333333,
      11.,
      22.,
      22.3333333333,
      11.1666666667,
      11.3333333333,
      22.6666666667,
      23.,
      11.5,
      11.6666666667,
      29.25,
      29.6666666667,
      17.75,
      18.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.8888888889,
      1.1111111111,
      0.8888888889,
      1.1111111111,
      2.2222222222,
      2.6666666667,
      1.3333333333,
      1.5555555556,
      3.1111111111,
      3.5555555556,
      1.7777777778,
      2.,
      1.7777777778,
      2.,
      0.,
      0.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      3.5555555556,
      3.7777777778,
      3.5555555556,
      3.7777777778,
      7.5555555556,
      8.,
      4.,
      4.2222222222,
      8.4444444444,
      8.8888888889,
      4.4444444444,
      4.6666666667,
      4.4444444444,
      4.6666666667,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      0.,
      0.,
      6.2222222222,
      6.4444444444,
      6.2222222222,
      6.4444444444,
      12.8888888889,
      13.3333333333,
      6.6666666667,
      6.8888888889,
      13.7777777778,
      14.2222222222,
      7.1111111111,
      7.3333333333,
      7.1111111111,
      7.3333333333,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      4.8888888889,
      5.3333333333,
      5.7777777778,
      6.2222222222,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      10.7777777778,
      11.3333333333,
      11.8888888889,
      12.4444444444,
      7.,
      7.3333333333,
      7.6666666667,
      8.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      15.8888888889,
      16.4444444444,
      17.,
      17.5555555556,
      8.5,
      8.7777777778,
      9.0555555556,
      9.3333333333,
      18.1111111111,
      18.6666666667,
      19.2222222222,
      19.7777777778,
      9.6111111111,
      9.8888888889,
      10.1666666667,
      10.4444444444,
      25.6944444444,
      26.3888888889,
      27.0833333333,
      27.7777777778,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      11.6666666667,
      12.,
      12.3333333333,
      12.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      16.5,
      16.7777777778,
      17.0555555556,
      17.3333333333,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      16.5,
      16.7777777778,
      17.0555555556,
      17.3333333333,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      26.2222222222,
      26.6666666667,
      27.1111111111,
      27.5555555556,
      13.5555555556,
      13.7777777778,
      14.,
      14.2222222222,
      28.,
      28.4444444444,
      28.8888888889,
      29.3333333333,
      14.4444444444,
      14.6666666667,
      14.8888888889,
      15.1111111111,
      37.4444444444,
      38.,
      38.5555555556,
      39.1111111111,
      23.,
      23.3333333333,
      23.6666666667,
      24.,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      20.9444444444,
      21.2222222222,
      21.5,
      21.7777777778,
      12.8333333333,
      13.,
      13.1666666667,
      13.3333333333,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      42.5555555556,
      43.1111111111,
      43.6666666667,
      44.2222222222,
      21.8333333333,
      22.1111111111,
      22.3888888889,
      22.6666666667,
      44.7777777778,
      45.3333333333,
      45.8888888889,
      46.4444444444,
      22.9444444444,
      23.2222222222,
      23.5,
      23.7777777778,
      59.0277777778,
      59.7222222222,
      60.4166666667,
      61.1111111111,
      36.0833333333,
      36.5,
      36.9166666667,
      37.3333333333,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      27.6666666667,
      28.,
      28.3333333333,
      28.6666666667,
      14.1666666667,
      14.3333333333,
      14.5,
      14.6666666667,
      29.,
      29.3333333333,
      29.6666666667,
      30.,
      14.8333333333,
      15.,
      15.1666666667,
      15.3333333333,
      38.0833333333,
      38.5,
      38.9166666667,
      39.3333333333,
      23.25,
      23.5,
      23.75,
      24.,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      29.8333333333,
      30.1111111111,
      30.3888888889,
      30.6666666667,
      18.1666666667,
      18.3333333333,
      18.5,
      18.6666666667,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      29.8333333333,
      30.1111111111,
      30.3888888889,
      30.6666666667,
      18.1666666667,
      18.3333333333,
      18.5,
      18.6666666667,
      23.3333333333,
      23.5555555556,
      23.7777777778,
      24.,
      23.3333333333,
      23.5555555556,
      23.7777777778,
      24.,
      47.5555555556,
      48.,
      48.4444444444,
      48.8888888889,
      24.2222222222,
      24.4444444444,
      24.6666666667,
      24.8888888889,
      49.3333333333,
      49.7777777778,
      50.2222222222,
      50.6666666667,
      25.1111111111,
      25.3333333333,
      25.5555555556,
      25.7777777778,
      64.1111111111,
      64.6666666667,
      65.2222222222,
      65.7777777778,
      39.,
      39.3333333333,
      39.6666666667,
      40.,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      25.5555555556,
      25.7777777778,
      26.,
      26.2222222222,
      13.,
      13.1111111111,
      13.2222222222,
      13.3333333333,
      26.4444444444,
      26.6666666667,
      26.8888888889,
      27.1111111111,
      13.4444444444,
      13.5555555556,
      13.6666666667,
      13.7777777778,
      34.2777777778,
      34.5555555556,
      34.8333333333,
      35.1111111111,
      20.8333333333,
      21.,
      21.1666666667,
      21.3333333333,
      34.0555555556,
      34.3333333333,
      34.6111111111,
      34.8888888889,
      34.0555555556,
      34.3333333333,
      34.6111111111,
      34.8888888889,
      69.2222222222,
      69.7777777778,
      70.3333333333,
      70.8888888889,
      35.1666666667,
      35.4444444444,
      35.7222222222,
      36.,
      71.4444444444,
      72.,
      72.5555555556,
      73.1111111111,
      36.2777777778,
      36.5555555556,
      36.8333333333,
      37.1111111111,
      92.3611111111,
      93.0555555556,
      93.75,
      94.4444444444,
      56.0833333333,
      56.5,
      56.9166666667,
      57.3333333333,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      43.6666666667,
      44.,
      44.3333333333,
      44.6666666667,
      22.1666666667,
      22.3333333333,
      22.5,
      22.6666666667,
      45.,
      45.3333333333,
      45.6666666667,
      46.,
      22.8333333333,
      23.,
      23.1666666667,
      23.3333333333,
      58.0833333333,
      58.5,
      58.9166666667,
      59.3333333333,
      35.25,
      35.5,
      35.75,
      36.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      5.7777777778,
      6.2222222222,
      6.6666666667,
      7.1111111111,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      14.6666666667,
      15.1111111111,
      15.5555555556,
      16.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      16.4444444444,
      16.8888888889,
      17.3333333333,
      17.7777777778,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      25.3333333333,
      25.7777777778,
      26.2222222222,
      26.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      27.1111111111,
      27.5555555556,
      28.,
      28.4444444444,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,  0.3888888889,  0.2222222222, 0.7222222222,  0.5,
      0.1666666667,  0.3888888889,  0.2222222222, 0.7222222222,  0.5,
      0.8333333333,  1.6111111111,  0.7777777778, 2.2777777778,  1.5,
      0.6666666667,  1.2222222222,  0.5555555556, 1.5555555556,  1.,
      1.8333333333,  3.2777777778,  1.4444444444, 3.9444444444,  2.5,
      1.1666666667,  2.0555555556,  0.8888888889, 2.3888888889,  1.5,
      3.6666666667,  6.3888888889,  2.7222222222, 7.2222222222,  4.5,
      2.5,           4.3333333333,  1.8333333333, 4.8333333333,  3.,
      2.1666666667,  3.7222222222,  1.5555555556, 4.0555555556,  2.5,
      2.1666666667,  3.7222222222,  1.5555555556, 4.0555555556,  2.5,
      4.8333333333,  8.2777777778,  3.4444444444, 8.9444444444,  5.5,
      2.6666666667,  4.5555555556,  1.8888888889, 4.8888888889,  3.,
      5.8333333333,  9.9444444444,  4.1111111111, 10.6111111111, 6.5,
      3.1666666667,  5.3888888889,  2.2222222222, 5.7222222222,  3.5,
      8.6666666667,  14.7222222222, 6.0555555556, 15.5555555556, 9.5,
      5.5,           9.3333333333,  3.8333333333, 9.8333333333,  6.,
      4.1666666667,  7.0555555556,  2.8888888889, 7.3888888889,  4.5,
      4.1666666667,  7.0555555556,  2.8888888889, 7.3888888889,  4.5,
      8.8333333333,  14.9444444444, 6.1111111111, 15.6111111111, 9.5,
      4.6666666667,  7.8888888889,  3.2222222222, 8.2222222222,  5.,
      9.8333333333,  16.6111111111, 6.7777777778, 17.2777777778, 10.5,
      5.1666666667,  8.7222222222,  3.5555555556, 9.0555555556,  5.5,
      13.6666666667, 23.0555555556, 9.3888888889, 23.8888888889, 14.5,
      8.5,           14.3333333333, 5.8333333333, 14.8333333333, 9.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x5x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444,
      0.8888888889, 0.8888888889, 2.,           1.1111111111, 1.1111111111,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667,
      0.,           0.,           0.,           0.,           0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889,
      1.7777777778, 1.7777777778, 3.7777777778, 2.,           2.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333,
      0.,           0.,           0.,           0.,           0.,
      1.4444444444, 1.4444444444, 3.,           1.5555555556, 1.5555555556,
      1.4444444444, 1.4444444444, 3.,           1.5555555556, 1.5555555556,
      3.1111111111, 3.1111111111, 6.4444444444, 3.3333333333, 3.3333333333,
      1.6666666667, 1.6666666667, 3.4444444444, 1.7777777778, 1.7777777778,
      3.5555555556, 3.5555555556, 7.3333333333, 3.7777777778, 3.7777777778,
      1.8888888889, 1.8888888889, 3.8888888889, 2.,           2.,
      1.8888888889, 1.8888888889, 3.8888888889, 2.,           2.,
      0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.7777777778,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      1.3333333333,
      1.6666666667,
      2.6666666667,
      3.2222222222,
      1.3333333333,
      1.5555555556,
      4.,
      4.5555555556,
      2.6666666667,
      3.,
      1.1666666667,
      1.3333333333,
      2.1666666667,
      2.4444444444,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      3.3333333333,
      3.6666666667,
      6.,
      6.5555555556,
      2.6666666667,
      2.8888888889,
      7.3333333333,
      7.8888888889,
      4.6666666667,
      5.,
      2.1666666667,
      2.3333333333,
      3.8333333333,
      4.1111111111,
      1.6666666667,
      1.7777777778,
      4.5,
      4.7777777778,
      2.8333333333,
      3.,
      6.9166666667,
      7.3333333333,
      12.0833333333,
      12.7777777778,
      5.1666666667,
      5.4444444444,
      13.75,
      14.4444444444,
      8.5833333333,
      9.,
      4.75,
      5.,
      8.25,
      8.6666666667,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      4.1666666667,
      4.3333333333,
      7.1666666667,
      7.4444444444,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      4.1666666667,
      4.3333333333,
      7.1666666667,
      7.4444444444,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      9.3333333333,
      9.6666666667,
      16.,
      16.5555555556,
      6.6666666667,
      6.8888888889,
      17.3333333333,
      17.8888888889,
      10.6666666667,
      11.,
      5.1666666667,
      5.3333333333,
      8.8333333333,
      9.1111111111,
      3.6666666667,
      3.7777777778,
      9.5,
      9.7777777778,
      5.8333333333,
      6.,
      11.3333333333,
      11.6666666667,
      19.3333333333,
      19.8888888889,
      8.,
      8.2222222222,
      20.6666666667,
      21.2222222222,
      12.6666666667,
      13.,
      6.1666666667,
      6.3333333333,
      10.5,
      10.7777777778,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      16.9166666667,
      17.3333333333,
      28.75,
      29.4444444444,
      11.8333333333,
      12.1111111111,
      30.4166666667,
      31.1111111111,
      18.5833333333,
      19.,
      10.75,
      11.,
      18.25,
      18.6666666667,
      7.5,
      7.6666666667,
      19.25,
      19.6666666667,
      11.75,
      12.,
      8.1666666667,
      8.3333333333,
      13.8333333333,
      14.1111111111,
      5.6666666667,
      5.7777777778,
      14.5,
      14.7777777778,
      8.8333333333,
      9.,
      8.1666666667,
      8.3333333333,
      13.8333333333,
      14.1111111111,
      5.6666666667,
      5.7777777778,
      14.5,
      14.7777777778,
      8.8333333333,
      9.,
      17.3333333333,
      17.6666666667,
      29.3333333333,
      29.8888888889,
      12.,
      12.2222222222,
      30.6666666667,
      31.2222222222,
      18.6666666667,
      19.,
      9.1666666667,
      9.3333333333,
      15.5,
      15.7777777778,
      6.3333333333,
      6.4444444444,
      16.1666666667,
      16.4444444444,
      9.8333333333,
      10.,
      19.3333333333,
      19.6666666667,
      32.6666666667,
      33.2222222222,
      13.3333333333,
      13.5555555556,
      34.,
      34.5555555556,
      20.6666666667,
      21.,
      10.1666666667,
      10.3333333333,
      17.1666666667,
      17.4444444444,
      7.,
      7.1111111111,
      17.8333333333,
      18.1111111111,
      10.8333333333,
      11.,
      26.9166666667,
      27.3333333333,
      45.4166666667,
      46.1111111111,
      18.5,
      18.7777777778,
      47.0833333333,
      47.7777777778,
      28.5833333333,
      29.,
      16.75,
      17.,
      28.25,
      28.6666666667,
      11.5,
      11.6666666667,
      29.25,
      29.6666666667,
      17.75,
      18.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x5x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      0.6666666667,
      0.8888888889,
      1.7777777778,
      2.2222222222,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      1.3333333333,
      1.5555555556,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.3333333333,
      3.5555555556,
      7.1111111111,
      7.5555555556,
      3.7777777778,
      4.,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      4.,
      4.2222222222,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.2222222222,
      4.4444444444,
      8.8888888889,
      9.3333333333,
      4.6666666667,
      4.8888888889,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.,
      6.2222222222,
      12.4444444444,
      12.8888888889,
      6.4444444444,
      6.6666666667,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      6.6666666667,
      6.8888888889,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      6.8888888889,
      7.1111111111,
      14.2222222222,
      14.6666666667,
      7.3333333333,
      7.5555555556,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1666666667,
      0.3333333333,
      0.5,
      0.6666666667,
      0.7222222222,
      1.,
      1.2777777778,
      1.5555555556,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      2.3333333333,
      2.6666666667,
      3.,
      3.3333333333,
      4.7777777778,
      5.3333333333,
      5.8888888889,
      6.4444444444,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      4.0555555556,
      4.3333333333,
      4.6111111111,
      4.8888888889,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      6.3333333333,
      6.6666666667,
      7.,
      7.3333333333,
      11.4444444444,
      12.,
      12.5555555556,
      13.1111111111,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      14.1111111111,
      14.6666666667,
      15.2222222222,
      15.7777777778,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      4.1666666667,
      4.3333333333,
      4.5,
      4.6666666667,
      7.3888888889,
      7.6666666667,
      7.9444444444,
      8.2222222222,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      8.7222222222,
      9.,
      9.2777777778,
      9.5555555556,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      13.4166666667,
      13.8333333333,
      14.25,
      14.6666666667,
      23.4722222222,
      24.1666666667,
      24.8611111111,
      25.5555555556,
      10.0555555556,
      10.3333333333,
      10.6111111111,
      10.8888888889,
      26.8055555556,
      27.5,
      28.1944444444,
      28.8888888889,
      16.75,
      17.1666666667,
      17.5833333333,
      18.,
      9.25,
      9.5,
      9.75,
      10.,
      16.0833333333,
      16.5,
      16.9166666667,
      17.3333333333,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      14.0555555556,
      14.3333333333,
      14.6111111111,
      14.8888888889,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      14.0555555556,
      14.3333333333,
      14.6111111111,
      14.8888888889,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      18.3333333333,
      18.6666666667,
      19.,
      19.3333333333,
      31.4444444444,
      32.,
      32.5555555556,
      33.1111111111,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      34.1111111111,
      34.6666666667,
      35.2222222222,
      35.7777777778,
      21.,
      21.3333333333,
      21.6666666667,
      22.,
      10.1666666667,
      10.3333333333,
      10.5,
      10.6666666667,
      17.3888888889,
      17.6666666667,
      17.9444444444,
      18.2222222222,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      18.7222222222,
      19.,
      19.2777777778,
      19.5555555556,
      11.5,
      11.6666666667,
      11.8333333333,
      12.,
      22.3333333333,
      22.6666666667,
      23.,
      23.3333333333,
      38.1111111111,
      38.6666666667,
      39.2222222222,
      39.7777777778,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      40.7777777778,
      41.3333333333,
      41.8888888889,
      42.4444444444,
      25.,
      25.3333333333,
      25.6666666667,
      26.,
      12.1666666667,
      12.3333333333,
      12.5,
      12.6666666667,
      20.7222222222,
      21.,
      21.2777777778,
      21.5555555556,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      33.4166666667,
      33.8333333333,
      34.25,
      34.6666666667,
      56.8055555556,
      57.5,
      58.1944444444,
      58.8888888889,
      23.3888888889,
      23.6666666667,
      23.9444444444,
      24.2222222222,
      60.1388888889,
      60.8333333333,
      61.5277777778,
      62.2222222222,
      36.75,
      37.1666666667,
      37.5833333333,
      38.,
      21.25,
      21.5,
      21.75,
      22.,
      36.0833333333,
      36.5,
      36.9166666667,
      37.3333333333,
      14.8333333333,
      15.,
      15.1666666667,
      15.3333333333,
      38.0833333333,
      38.5,
      38.9166666667,
      39.3333333333,
      23.25,
      23.5,
      23.75,
      24.,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      27.3888888889,
      27.6666666667,
      27.9444444444,
      28.2222222222,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      17.5,
      17.6666666667,
      17.8333333333,
      18.,
      16.1666666667,
      16.3333333333,
      16.5,
      16.6666666667,
      27.3888888889,
      27.6666666667,
      27.9444444444,
      28.2222222222,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      17.5,
      17.6666666667,
      17.8333333333,
      18.,
      34.3333333333,
      34.6666666667,
      35.,
      35.3333333333,
      58.1111111111,
      58.6666666667,
      59.2222222222,
      59.7777777778,
      23.7777777778,
      24.,
      24.2222222222,
      24.4444444444,
      60.7777777778,
      61.3333333333,
      61.8888888889,
      62.4444444444,
      37.,
      37.3333333333,
      37.6666666667,
      38.,
      18.1666666667,
      18.3333333333,
      18.5,
      18.6666666667,
      30.7222222222,
      31.,
      31.2777777778,
      31.5555555556,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      32.0555555556,
      32.3333333333,
      32.6111111111,
      32.8888888889,
      19.5,
      19.6666666667,
      19.8333333333,
      20.,
      38.3333333333,
      38.6666666667,
      39.,
      39.3333333333,
      64.7777777778,
      65.3333333333,
      65.8888888889,
      66.4444444444,
      26.4444444444,
      26.6666666667,
      26.8888888889,
      27.1111111111,
      67.4444444444,
      68.,
      68.5555555556,
      69.1111111111,
      41.,
      41.3333333333,
      41.6666666667,
      42.,
      20.1666666667,
      20.3333333333,
      20.5,
      20.6666666667,
      34.0555555556,
      34.3333333333,
      34.6111111111,
      34.8888888889,
      13.8888888889,
      14.,
      14.1111111111,
      14.2222222222,
      35.3888888889,
      35.6666666667,
      35.9444444444,
      36.2222222222,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      53.4166666667,
      53.8333333333,
      54.25,
      54.6666666667,
      90.1388888889,
      90.8333333333,
      91.5277777778,
      92.2222222222,
      36.7222222222,
      37.,
      37.2777777778,
      37.5555555556,
      93.4722222222,
      94.1666666667,
      94.8611111111,
      95.5555555556,
      56.75,
      57.1666666667,
      57.5833333333,
      58.,
      33.25,
      33.5,
      33.75,
      34.,
      56.0833333333,
      56.5,
      56.9166666667,
      57.3333333333,
      22.8333333333,
      23.,
      23.1666666667,
      23.3333333333,
      58.0833333333,
      58.5,
      58.9166666667,
      59.3333333333,
      35.25,
      35.5,
      35.75,
      36.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x5x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      3.1111111111,
      3.5555555556,
      4.,
      4.4444444444,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      13.7777777778,
      14.2222222222,
      14.6666666667,
      15.1111111111,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      17.3333333333,
      17.7777777778,
      18.2222222222,
      18.6666666667,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      11.7777777778,
      12.,
      12.2222222222,
      12.4444444444,
      11.7777777778,
      12.,
      12.2222222222,
      12.4444444444,
      24.4444444444,
      24.8888888889,
      25.3333333333,
      25.7777777778,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      13.5555555556,
      13.7777777778,
      14.,
      14.2222222222,
      13.5555555556,
      13.7777777778,
      14.,
      14.2222222222,
      28.,
      28.4444444444,
      28.8888888889,
      29.3333333333,
      14.4444444444,
      14.6666666667,
      14.8888888889,
      15.1111111111,
      14.4444444444,
      14.6666666667,
      14.8888888889,
      15.1111111111,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 5, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111,  0.3333333333,
      0.2222222222, 0.7222222222,  0.5,
      0.1111111111, 0.1111111111,  0.3333333333,
      0.2222222222, 0.7222222222,  0.5,
      0.5555555556, 0.5555555556,  1.3333333333,
      0.7777777778, 2.2777777778,  1.5,
      0.4444444444, 0.4444444444,  1.,
      0.5555555556, 1.5555555556,  1.,
      1.2222222222, 1.2222222222,  2.6666666667,
      1.4444444444, 3.9444444444,  2.5,
      0.7777777778, 0.7777777778,  1.6666666667,
      0.8888888889, 2.3888888889,  1.5,
      2.4444444444, 2.4444444444,  5.1666666667,
      2.7222222222, 7.2222222222,  4.5,
      1.6666666667, 1.6666666667,  3.5,
      1.8333333333, 4.8333333333,  3.,
      1.4444444444, 1.4444444444,  3.,
      1.5555555556, 4.0555555556,  2.5,
      1.4444444444, 1.4444444444,  3.,
      1.5555555556, 4.0555555556,  2.5,
      3.2222222222, 3.2222222222,  6.6666666667,
      3.4444444444, 8.9444444444,  5.5,
      1.7777777778, 1.7777777778,  3.6666666667,
      1.8888888889, 4.8888888889,  3.,
      3.8888888889, 3.8888888889,  8.,
      4.1111111111, 10.6111111111, 6.5,
      2.1111111111, 2.1111111111,  4.3333333333,
      2.2222222222, 5.7222222222,  3.5,
      5.7777777778, 5.7777777778,  11.8333333333,
      6.0555555556, 15.5555555556, 9.5,
      3.6666666667, 3.6666666667,  7.5,
      3.8333333333, 9.8333333333,  6.,
      2.7777777778, 2.7777777778,  5.6666666667,
      2.8888888889, 7.3888888889,  4.5,
      2.7777777778, 2.7777777778,  5.6666666667,
      2.8888888889, 7.3888888889,  4.5,
      5.8888888889, 5.8888888889,  12.,
      6.1111111111, 15.6111111111, 9.5,
      3.1111111111, 3.1111111111,  6.3333333333,
      3.2222222222, 8.2222222222,  5.,
      6.5555555556, 6.5555555556,  13.3333333333,
      6.7777777778, 17.2777777778, 10.5,
      3.4444444444, 3.4444444444,  7.,
      3.5555555556, 9.0555555556,  5.5,
      9.1111111111, 9.1111111111,  18.5,
      9.3888888889, 23.8888888889, 14.5,
      5.6666666667, 5.6666666667,  11.5,
      5.8333333333, 14.8333333333, 9.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.1111111111, 0.1111111111, 0.3333333333, 0.2222222222, 0.2222222222, 0.,
      0.4444444444, 0.4444444444, 1.1111111111, 0.6666666667, 0.6666666667, 0.,
      0.3333333333, 0.3333333333, 0.7777777778, 0.4444444444, 0.4444444444, 0.,
      0.8888888889, 0.8888888889, 2.,           1.1111111111, 1.1111111111, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.5555555556, 0.5555555556, 1.2222222222, 0.6666666667, 0.6666666667, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      0.7777777778, 0.7777777778, 1.6666666667, 0.8888888889, 0.8888888889, 0.,
      1.7777777778, 1.7777777778, 3.7777777778, 2.,           2.,           0.,
      1.,           1.,           2.1111111111, 1.1111111111, 1.1111111111, 0.,
      2.2222222222, 2.2222222222, 4.6666666667, 2.4444444444, 2.4444444444, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      1.2222222222, 1.2222222222, 2.5555555556, 1.3333333333, 1.3333333333, 0.,
      0.,           0.,           0.,           0.,           0.,           0.,
      1.4444444444, 1.4444444444, 3.,           1.5555555556, 1.5555555556, 0.,
      1.4444444444, 1.4444444444, 3.,           1.5555555556, 1.5555555556, 0.,
      3.1111111111, 3.1111111111, 6.4444444444, 3.3333333333, 3.3333333333, 0.,
      1.6666666667, 1.6666666667, 3.4444444444, 1.7777777778, 1.7777777778, 0.,
      3.5555555556, 3.5555555556, 7.3333333333, 3.7777777778, 3.7777777778, 0.,
      1.8888888889, 1.8888888889, 3.8888888889, 2.,           2.,           0.,
      1.8888888889, 1.8888888889, 3.8888888889, 2.,           2.,           0.,
      0.,           0.,           0.,           0.,           0.,           0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      1.1666666667,
      1.4444444444,
      0.8333333333,
      1.,
      0.8888888889,
      1.1111111111,
      0.8888888889,
      1.1111111111,
      2.2222222222,
      2.6666666667,
      1.3333333333,
      1.5555555556,
      4.,
      4.5555555556,
      2.6666666667,
      3.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.8333333333,
      3.1111111111,
      1.8333333333,
      2.,
      2.2222222222,
      2.4444444444,
      2.2222222222,
      2.4444444444,
      4.8888888889,
      5.3333333333,
      2.6666666667,
      2.8888888889,
      7.3333333333,
      7.8888888889,
      4.6666666667,
      5.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      4.5,
      4.7777777778,
      2.8333333333,
      3.,
      4.6111111111,
      4.8888888889,
      4.6111111111,
      4.8888888889,
      9.7777777778,
      10.3333333333,
      5.1666666667,
      5.4444444444,
      13.75,
      14.4444444444,
      8.5833333333,
      9.,
      3.1666666667,
      3.3333333333,
      3.1666666667,
      3.3333333333,
      6.6666666667,
      7.,
      3.5,
      3.6666666667,
      9.25,
      9.6666666667,
      5.75,
      6.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      7.8333333333,
      8.1111111111,
      4.8333333333,
      5.,
      6.2222222222,
      6.4444444444,
      6.2222222222,
      6.4444444444,
      12.8888888889,
      13.3333333333,
      6.6666666667,
      6.8888888889,
      17.3333333333,
      17.8888888889,
      10.6666666667,
      11.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      9.5,
      9.7777777778,
      5.8333333333,
      6.,
      7.5555555556,
      7.7777777778,
      7.5555555556,
      7.7777777778,
      15.5555555556,
      16.,
      8.,
      8.2222222222,
      20.6666666667,
      21.2222222222,
      12.6666666667,
      13.,
      4.1111111111,
      4.2222222222,
      4.1111111111,
      4.2222222222,
      8.4444444444,
      8.6666666667,
      4.3333333333,
      4.4444444444,
      11.1666666667,
      11.4444444444,
      6.8333333333,
      7.,
      11.2777777778,
      11.5555555556,
      11.2777777778,
      11.5555555556,
      23.1111111111,
      23.6666666667,
      11.8333333333,
      12.1111111111,
      30.4166666667,
      31.1111111111,
      18.5833333333,
      19.,
      7.1666666667,
      7.3333333333,
      7.1666666667,
      7.3333333333,
      14.6666666667,
      15.,
      7.5,
      7.6666666667,
      19.25,
      19.6666666667,
      11.75,
      12.,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      14.5,
      14.7777777778,
      8.8333333333,
      9.,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      14.5,
      14.7777777778,
      8.8333333333,
      9.,
      11.5555555556,
      11.7777777778,
      11.5555555556,
      11.7777777778,
      23.5555555556,
      24.,
      12.,
      12.2222222222,
      30.6666666667,
      31.2222222222,
      18.6666666667,
      19.,
      6.1111111111,
      6.2222222222,
      6.1111111111,
      6.2222222222,
      12.4444444444,
      12.6666666667,
      6.3333333333,
      6.4444444444,
      16.1666666667,
      16.4444444444,
      9.8333333333,
      10.,
      12.8888888889,
      13.1111111111,
      12.8888888889,
      13.1111111111,
      26.2222222222,
      26.6666666667,
      13.3333333333,
      13.5555555556,
      34.,
      34.5555555556,
      20.6666666667,
      21.,
      6.7777777778,
      6.8888888889,
      6.7777777778,
      6.8888888889,
      13.7777777778,
      14.,
      7.,
      7.1111111111,
      17.8333333333,
      18.1111111111,
      10.8333333333,
      11.,
      17.9444444444,
      18.2222222222,
      17.9444444444,
      18.2222222222,
      36.4444444444,
      37.,
      18.5,
      18.7777777778,
      47.0833333333,
      47.7777777778,
      28.5833333333,
      29.,
      11.1666666667,
      11.3333333333,
      11.1666666667,
      11.3333333333,
      22.6666666667,
      23.,
      11.5,
      11.6666666667,
      29.25,
      29.6666666667,
      17.75,
      18.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.3333333333,
      0.4444444444,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.3333333333,
      0.4444444444,
      0.,
      0.,
      0.6666666667,
      0.8888888889,
      0.6666666667,
      0.8888888889,
      1.7777777778,
      2.2222222222,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      0.,
      0.,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      1.3333333333,
      1.5555555556,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      1.5555555556,
      1.7777777778,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      2.,
      2.2222222222,
      0.,
      0.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      3.3333333333,
      3.5555555556,
      3.3333333333,
      3.5555555556,
      7.1111111111,
      7.5555555556,
      3.7777777778,
      4.,
      3.7777777778,
      4.,
      0.,
      0.,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      4.,
      4.2222222222,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      0.,
      0.,
      4.2222222222,
      4.4444444444,
      4.2222222222,
      4.4444444444,
      8.8888888889,
      9.3333333333,
      4.6666666667,
      4.8888888889,
      4.6666666667,
      4.8888888889,
      0.,
      0.,
      2.3333333333,
      2.4444444444,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      2.3333333333,
      2.4444444444,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      3.,
      3.1111111111,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      3.,
      3.1111111111,
      0.,
      0.,
      6.,
      6.2222222222,
      6.,
      6.2222222222,
      12.4444444444,
      12.8888888889,
      6.4444444444,
      6.6666666667,
      6.4444444444,
      6.6666666667,
      0.,
      0.,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      6.6666666667,
      6.8888888889,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      6.8888888889,
      7.1111111111,
      6.8888888889,
      7.1111111111,
      14.2222222222,
      14.6666666667,
      7.3333333333,
      7.5555555556,
      7.3333333333,
      7.5555555556,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      2.0555555556,
      2.3333333333,
      2.6111111111,
      2.8888888889,
      1.5,
      1.6666666667,
      1.8333333333,
      2.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      7.4444444444,
      8.,
      8.5555555556,
      9.1111111111,
      5.,
      5.3333333333,
      5.6666666667,
      6.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      5.3888888889,
      5.6666666667,
      5.9444444444,
      6.2222222222,
      3.5,
      3.6666666667,
      3.8333333333,
      4.,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      9.3333333333,
      9.7777777778,
      10.2222222222,
      10.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      14.1111111111,
      14.6666666667,
      15.2222222222,
      15.7777777778,
      9.,
      9.3333333333,
      9.6666666667,
      10.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      8.7222222222,
      9.,
      9.2777777778,
      9.5555555556,
      5.5,
      5.6666666667,
      5.8333333333,
      6.,
      8.9444444444,
      9.2222222222,
      9.5,
      9.7777777778,
      8.9444444444,
      9.2222222222,
      9.5,
      9.7777777778,
      19.,
      19.5555555556,
      20.1111111111,
      20.6666666667,
      10.0555555556,
      10.3333333333,
      10.6111111111,
      10.8888888889,
      26.8055555556,
      27.5,
      28.1944444444,
      28.8888888889,
      16.75,
      17.1666666667,
      17.5833333333,
      18.,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      6.1666666667,
      6.3333333333,
      6.5,
      6.6666666667,
      13.,
      13.3333333333,
      13.6666666667,
      14.,
      6.8333333333,
      7.,
      7.1666666667,
      7.3333333333,
      18.0833333333,
      18.5,
      18.9166666667,
      19.3333333333,
      11.25,
      11.5,
      11.75,
      12.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      15.3888888889,
      15.6666666667,
      15.9444444444,
      16.2222222222,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      25.3333333333,
      25.7777777778,
      26.2222222222,
      26.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      34.1111111111,
      34.6666666667,
      35.2222222222,
      35.7777777778,
      21.,
      21.3333333333,
      21.6666666667,
      22.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      18.7222222222,
      19.,
      19.2777777778,
      19.5555555556,
      11.5,
      11.6666666667,
      11.8333333333,
      12.,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      30.6666666667,
      31.1111111111,
      31.5555555556,
      32.,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      40.7777777778,
      41.3333333333,
      41.8888888889,
      42.4444444444,
      25.,
      25.3333333333,
      25.6666666667,
      26.,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      16.6666666667,
      16.8888888889,
      17.1111111111,
      17.3333333333,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      22.0555555556,
      22.3333333333,
      22.6111111111,
      22.8888888889,
      13.5,
      13.6666666667,
      13.8333333333,
      14.,
      22.2777777778,
      22.5555555556,
      22.8333333333,
      23.1111111111,
      22.2777777778,
      22.5555555556,
      22.8333333333,
      23.1111111111,
      45.6666666667,
      46.2222222222,
      46.7777777778,
      47.3333333333,
      23.3888888889,
      23.6666666667,
      23.9444444444,
      24.2222222222,
      60.1388888889,
      60.8333333333,
      61.5277777778,
      62.2222222222,
      36.75,
      37.1666666667,
      37.5833333333,
      38.,
      14.1666666667,
      14.3333333333,
      14.5,
      14.6666666667,
      14.1666666667,
      14.3333333333,
      14.5,
      14.6666666667,
      29.,
      29.3333333333,
      29.6666666667,
      30.,
      14.8333333333,
      15.,
      15.1666666667,
      15.3333333333,
      38.0833333333,
      38.5,
      38.9166666667,
      39.3333333333,
      23.25,
      23.5,
      23.75,
      24.,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      17.5,
      17.6666666667,
      17.8333333333,
      18.,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      28.7222222222,
      29.,
      29.2777777778,
      29.5555555556,
      17.5,
      17.6666666667,
      17.8333333333,
      18.,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      46.6666666667,
      47.1111111111,
      47.5555555556,
      48.,
      23.7777777778,
      24.,
      24.2222222222,
      24.4444444444,
      60.7777777778,
      61.3333333333,
      61.8888888889,
      62.4444444444,
      37.,
      37.3333333333,
      37.6666666667,
      38.,
      12.1111111111,
      12.2222222222,
      12.3333333333,
      12.4444444444,
      12.1111111111,
      12.2222222222,
      12.3333333333,
      12.4444444444,
      24.6666666667,
      24.8888888889,
      25.1111111111,
      25.3333333333,
      12.5555555556,
      12.6666666667,
      12.7777777778,
      12.8888888889,
      32.0555555556,
      32.3333333333,
      32.6111111111,
      32.8888888889,
      19.5,
      19.6666666667,
      19.8333333333,
      20.,
      25.5555555556,
      25.7777777778,
      26.,
      26.2222222222,
      25.5555555556,
      25.7777777778,
      26.,
      26.2222222222,
      52.,
      52.4444444444,
      52.8888888889,
      53.3333333333,
      26.4444444444,
      26.6666666667,
      26.8888888889,
      27.1111111111,
      67.4444444444,
      68.,
      68.5555555556,
      69.1111111111,
      41.,
      41.3333333333,
      41.6666666667,
      42.,
      13.4444444444,
      13.5555555556,
      13.6666666667,
      13.7777777778,
      13.4444444444,
      13.5555555556,
      13.6666666667,
      13.7777777778,
      27.3333333333,
      27.5555555556,
      27.7777777778,
      28.,
      13.8888888889,
      14.,
      14.1111111111,
      14.2222222222,
      35.3888888889,
      35.6666666667,
      35.9444444444,
      36.2222222222,
      21.5,
      21.6666666667,
      21.8333333333,
      22.,
      35.6111111111,
      35.8888888889,
      36.1666666667,
      36.4444444444,
      35.6111111111,
      35.8888888889,
      36.1666666667,
      36.4444444444,
      72.3333333333,
      72.8888888889,
      73.4444444444,
      74.,
      36.7222222222,
      37.,
      37.2777777778,
      37.5555555556,
      93.4722222222,
      94.1666666667,
      94.8611111111,
      95.5555555556,
      56.75,
      57.1666666667,
      57.5833333333,
      58.,
      22.1666666667,
      22.3333333333,
      22.5,
      22.6666666667,
      22.1666666667,
      22.3333333333,
      22.5,
      22.6666666667,
      45.,
      45.3333333333,
      45.6666666667,
      46.,
      22.8333333333,
      23.,
      23.1666666667,
      23.3333333333,
      58.0833333333,
      58.5,
      58.9166666667,
      59.3333333333,
      35.25,
      35.5,
      35.75,
      36.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      0.,
      0.,
      0.,
      0.,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      1.1111111111,
      1.3333333333,
      1.5555555556,
      1.7777777778,
      3.1111111111,
      3.5555555556,
      4.,
      4.4444444444,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      0.,
      0.,
      0.,
      0.,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      0.,
      0.,
      0.,
      0.,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      13.7777777778,
      14.2222222222,
      14.6666666667,
      15.1111111111,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      0.,
      0.,
      0.,
      0.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      0.,
      0.,
      0.,
      0.,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      8.2222222222,
      8.4444444444,
      8.6666666667,
      8.8888888889,
      17.3333333333,
      17.7777777778,
      18.2222222222,
      18.6666666667,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      9.1111111111,
      9.3333333333,
      9.5555555556,
      9.7777777778,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      0.,
      0.,
      0.,
      0.,
      11.7777777778,
      12.,
      12.2222222222,
      12.4444444444,
      11.7777777778,
      12.,
      12.2222222222,
      12.4444444444,
      24.4444444444,
      24.8888888889,
      25.3333333333,
      25.7777777778,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      12.6666666667,
      12.8888888889,
      13.1111111111,
      13.3333333333,
      0.,
      0.,
      0.,
      0.,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      0.,
      0.,
      0.,
      0.,
      13.5555555556,
      13.7777777778,
      14.,
      14.2222222222,
      13.5555555556,
      13.7777777778,
      14.,
      14.2222222222,
      28.,
      28.4444444444,
      28.8888888889,
      29.3333333333,
      14.4444444444,
      14.6666666667,
      14.8888888889,
      15.1111111111,
      14.4444444444,
      14.6666666667,
      14.8888888889,
      15.1111111111,
      0.,
      0.,
      0.,
      0.,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      1.,
      0.6666666667,
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      1.,
      0.6666666667,
      0.6666666667,
      0.6666666667,
      1.5555555556,
      0.8888888889,
      2.,
      1.1111111111,
      3.1111111111,
      2.,
      0.5555555556,
      0.5555555556,
      1.2222222222,
      0.6666666667,
      1.4444444444,
      0.7777777778,
      2.1111111111,
      1.3333333333,
      1.5555555556,
      1.5555555556,
      3.3333333333,
      1.7777777778,
      3.7777777778,
      2.,
      5.3333333333,
      3.3333333333,
      1.,
      1.,
      2.1111111111,
      1.1111111111,
      2.3333333333,
      1.2222222222,
      3.2222222222,
      2.,
      3.1666666667,
      3.1666666667,
      6.6111111111,
      3.4444444444,
      7.1666666667,
      3.7222222222,
      9.7222222222,
      6.,
      2.1666666667,
      2.1666666667,
      4.5,
      2.3333333333,
      4.8333333333,
      2.5,
      6.5,
      4.,
      1.8888888889,
      1.8888888889,
      3.8888888889,
      2.,
      4.1111111111,
      2.1111111111,
      5.4444444444,
      3.3333333333,
      1.8888888889,
      1.8888888889,
      3.8888888889,
      2.,
      4.1111111111,
      2.1111111111,
      5.4444444444,
      3.3333333333,
      4.2222222222,
      4.2222222222,
      8.6666666667,
      4.4444444444,
      9.1111111111,
      4.6666666667,
      12.,
      7.3333333333,
      2.3333333333,
      2.3333333333,
      4.7777777778,
      2.4444444444,
      5.,
      2.5555555556,
      6.5555555556,
      4.,
      5.1111111111,
      5.1111111111,
      10.4444444444,
      5.3333333333,
      10.8888888889,
      5.5555555556,
      14.2222222222,
      8.6666666667,
      2.7777777778,
      2.7777777778,
      5.6666666667,
      2.8888888889,
      5.8888888889,
      3.,
      7.6666666667,
      4.6666666667,
      7.6111111111,
      7.6111111111,
      15.5,
      7.8888888889,
      16.0555555556,
      8.1666666667,
      20.8333333333,
      12.6666666667,
      4.8333333333,
      4.8333333333,
      9.8333333333,
      5.,
      10.1666666667,
      5.1666666667,
      13.1666666667,
      8.,
      3.6666666667,
      3.6666666667,
      7.4444444444,
      3.7777777778,
      7.6666666667,
      3.8888888889,
      9.8888888889,
      6.,
      3.6666666667,
      3.6666666667,
      7.4444444444,
      3.7777777778,
      7.6666666667,
      3.8888888889,
      9.8888888889,
      6.,
      7.7777777778,
      7.7777777778,
      15.7777777778,
      8.,
      16.2222222222,
      8.2222222222,
      20.8888888889,
      12.6666666667,
      4.1111111111,
      4.1111111111,
      8.3333333333,
      4.2222222222,
      8.5555555556,
      4.3333333333,
      11.,
      6.6666666667,
      8.6666666667,
      8.6666666667,
      17.5555555556,
      8.8888888889,
      18.,
      9.1111111111,
      23.1111111111,
      14.,
      4.5555555556,
      4.5555555556,
      9.2222222222,
      4.6666666667,
      9.4444444444,
      4.7777777778,
      12.1111111111,
      7.3333333333,
      12.0555555556,
      12.0555555556,
      24.3888888889,
      12.3333333333,
      24.9444444444,
      12.6111111111,
      31.9444444444,
      19.3333333333,
      7.5,
      7.5,
      15.1666666667,
      7.6666666667,
      15.5,
      7.8333333333,
      19.8333333333,
      12.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      0.3333333333,
      0.,
      0.1111111111,
      0.1111111111,
      0.3333333333,
      0.2222222222,
      0.5555555556,
      0.3333333333,
      0.3333333333,
      0.,
      0.5555555556,
      0.5555555556,
      1.3333333333,
      0.7777777778,
      1.7777777778,
      1.,
      1.,
      0.,
      0.4444444444,
      0.4444444444,
      1.,
      0.5555555556,
      1.2222222222,
      0.6666666667,
      0.6666666667,
      0.,
      1.2222222222,
      1.2222222222,
      2.6666666667,
      1.4444444444,
      3.1111111111,
      1.6666666667,
      1.6666666667,
      0.,
      0.7777777778,
      0.7777777778,
      1.6666666667,
      0.8888888889,
      1.8888888889,
      1.,
      1.,
      0.,
      0.7777777778,
      0.7777777778,
      1.6666666667,
      0.8888888889,
      1.8888888889,
      1.,
      1.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      1.1111111111,
      1.1111111111,
      2.3333333333,
      1.2222222222,
      2.5555555556,
      1.3333333333,
      1.3333333333,
      0.,
      1.1111111111,
      1.1111111111,
      2.3333333333,
      1.2222222222,
      2.5555555556,
      1.3333333333,
      1.3333333333,
      0.,
      2.5555555556,
      2.5555555556,
      5.3333333333,
      2.7777777778,
      5.7777777778,
      3.,
      3.,
      0.,
      1.4444444444,
      1.4444444444,
      3.,
      1.5555555556,
      3.2222222222,
      1.6666666667,
      1.6666666667,
      0.,
      3.2222222222,
      3.2222222222,
      6.6666666667,
      3.4444444444,
      7.1111111111,
      3.6666666667,
      3.6666666667,
      0.,
      1.7777777778,
      1.7777777778,
      3.6666666667,
      1.8888888889,
      3.8888888889,
      2.,
      2.,
      0.,
      1.7777777778,
      1.7777777778,
      3.6666666667,
      1.8888888889,
      3.8888888889,
      2.,
      2.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.1111111111,
      2.1111111111,
      4.3333333333,
      2.2222222222,
      4.5555555556,
      2.3333333333,
      2.3333333333,
      0.,
      2.1111111111,
      2.1111111111,
      4.3333333333,
      2.2222222222,
      4.5555555556,
      2.3333333333,
      2.3333333333,
      0.,
      4.5555555556,
      4.5555555556,
      9.3333333333,
      4.7777777778,
      9.7777777778,
      5.,
      5.,
      0.,
      2.4444444444,
      2.4444444444,
      5.,
      2.5555555556,
      5.2222222222,
      2.6666666667,
      2.6666666667,
      0.,
      5.2222222222,
      5.2222222222,
      10.6666666667,
      5.4444444444,
      11.1111111111,
      5.6666666667,
      5.6666666667,
      0.,
      2.7777777778,
      2.7777777778,
      5.6666666667,
      2.8888888889,
      5.8888888889,
      3.,
      3.,
      0.,
      2.7777777778,
      2.7777777778,
      5.6666666667,
      2.8888888889,
      5.8888888889,
      3.,
      3.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      1.7222222222,
      2.,
      1.1666666667,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      1.1111111111,
      1.3333333333,
      2.6666666667,
      3.1111111111,
      1.5555555556,
      1.7777777778,
      3.5555555556,
      4.,
      2.,
      2.2222222222,
      5.6666666667,
      6.2222222222,
      3.6666666667,
      4.,
      1.,
      1.1111111111,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      2.6666666667,
      2.8888888889,
      1.4444444444,
      1.5555555556,
      3.9444444444,
      4.2222222222,
      2.5,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      2.8888888889,
      3.1111111111,
      6.2222222222,
      6.6666666667,
      3.3333333333,
      3.5555555556,
      7.1111111111,
      7.5555555556,
      3.7777777778,
      4.,
      10.1111111111,
      10.6666666667,
      6.3333333333,
      6.6666666667,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      4.,
      4.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      6.1666666667,
      6.4444444444,
      3.8333333333,
      4.,
      6.0555555556,
      6.3333333333,
      6.0555555556,
      6.3333333333,
      12.6666666667,
      13.2222222222,
      6.6111111111,
      6.8888888889,
      13.7777777778,
      14.3333333333,
      7.1666666667,
      7.4444444444,
      18.75,
      19.4444444444,
      11.5833333333,
      12.,
      4.1666666667,
      4.3333333333,
      4.1666666667,
      4.3333333333,
      8.6666666667,
      9.,
      4.5,
      4.6666666667,
      9.3333333333,
      9.6666666667,
      4.8333333333,
      5.,
      12.5833333333,
      13.,
      7.75,
      8.,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      8.,
      8.2222222222,
      4.1111111111,
      4.2222222222,
      10.6111111111,
      10.8888888889,
      6.5,
      6.6666666667,
      3.6666666667,
      3.7777777778,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      8.,
      8.2222222222,
      4.1111111111,
      4.2222222222,
      10.6111111111,
      10.8888888889,
      6.5,
      6.6666666667,
      8.2222222222,
      8.4444444444,
      8.2222222222,
      8.4444444444,
      16.8888888889,
      17.3333333333,
      8.6666666667,
      8.8888888889,
      17.7777777778,
      18.2222222222,
      9.1111111111,
      9.3333333333,
      23.4444444444,
      24.,
      14.3333333333,
      14.6666666667,
      4.5555555556,
      4.6666666667,
      4.5555555556,
      4.6666666667,
      9.3333333333,
      9.5555555556,
      4.7777777778,
      4.8888888889,
      9.7777777778,
      10.,
      5.,
      5.1111111111,
      12.8333333333,
      13.1111111111,
      7.8333333333,
      8.,
      10.,
      10.2222222222,
      10.,
      10.2222222222,
      20.4444444444,
      20.8888888889,
      10.4444444444,
      10.6666666667,
      21.3333333333,
      21.7777777778,
      10.8888888889,
      11.1111111111,
      27.8888888889,
      28.4444444444,
      17.,
      17.3333333333,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      11.5555555556,
      11.7777777778,
      5.8888888889,
      6.,
      15.0555555556,
      15.3333333333,
      9.1666666667,
      9.3333333333,
      14.9444444444,
      15.2222222222,
      14.9444444444,
      15.2222222222,
      30.4444444444,
      31.,
      15.5,
      15.7777777778,
      31.5555555556,
      32.1111111111,
      16.0555555556,
      16.3333333333,
      40.9722222222,
      41.6666666667,
      24.9166666667,
      25.3333333333,
      9.5,
      9.6666666667,
      9.5,
      9.6666666667,
      19.3333333333,
      19.6666666667,
      9.8333333333,
      10.,
      20.,
      20.3333333333,
      10.1666666667,
      10.3333333333,
      25.9166666667,
      26.3333333333,
      15.75,
      16.,
      7.2222222222,
      7.3333333333,
      7.2222222222,
      7.3333333333,
      14.6666666667,
      14.8888888889,
      7.4444444444,
      7.5555555556,
      15.1111111111,
      15.3333333333,
      7.6666666667,
      7.7777777778,
      19.5,
      19.7777777778,
      11.8333333333,
      12.,
      7.2222222222,
      7.3333333333,
      7.2222222222,
      7.3333333333,
      14.6666666667,
      14.8888888889,
      7.4444444444,
      7.5555555556,
      15.1111111111,
      15.3333333333,
      7.6666666667,
      7.7777777778,
      19.5,
      19.7777777778,
      11.8333333333,
      12.,
      15.3333333333,
      15.5555555556,
      15.3333333333,
      15.5555555556,
      31.1111111111,
      31.5555555556,
      15.7777777778,
      16.,
      32.,
      32.4444444444,
      16.2222222222,
      16.4444444444,
      41.2222222222,
      41.7777777778,
      25.,
      25.3333333333,
      8.1111111111,
      8.2222222222,
      8.1111111111,
      8.2222222222,
      16.4444444444,
      16.6666666667,
      8.3333333333,
      8.4444444444,
      16.8888888889,
      17.1111111111,
      8.5555555556,
      8.6666666667,
      21.7222222222,
      22.,
      13.1666666667,
      13.3333333333,
      17.1111111111,
      17.3333333333,
      17.1111111111,
      17.3333333333,
      34.6666666667,
      35.1111111111,
      17.5555555556,
      17.7777777778,
      35.5555555556,
      36.,
      18.,
      18.2222222222,
      45.6666666667,
      46.2222222222,
      27.6666666667,
      28.,
      9.,
      9.1111111111,
      9.,
      9.1111111111,
      18.2222222222,
      18.4444444444,
      9.2222222222,
      9.3333333333,
      18.6666666667,
      18.8888888889,
      9.4444444444,
      9.5555555556,
      23.9444444444,
      24.2222222222,
      14.5,
      14.6666666667,
      23.8333333333,
      24.1111111111,
      23.8333333333,
      24.1111111111,
      48.2222222222,
      48.7777777778,
      24.3888888889,
      24.6666666667,
      49.3333333333,
      49.8888888889,
      24.9444444444,
      25.2222222222,
      63.1944444444,
      63.8888888889,
      38.25,
      38.6666666667,
      14.8333333333,
      15.,
      14.8333333333,
      15.,
      30.,
      30.3333333333,
      15.1666666667,
      15.3333333333,
      30.6666666667,
      31.,
      15.5,
      15.6666666667,
      39.25,
      39.6666666667,
      23.75,
      24.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.1111111111,
      0.2222222222,
      0.4444444444,
      0.6666666667,
      0.3333333333,
      0.4444444444,
      0.8888888889,
      1.1111111111,
      0.5555555556,
      0.6666666667,
      0.5555555556,
      0.6666666667,
      0.,
      0.,
      0.8888888889,
      1.1111111111,
      0.8888888889,
      1.1111111111,
      2.2222222222,
      2.6666666667,
      1.3333333333,
      1.5555555556,
      3.1111111111,
      3.5555555556,
      1.7777777778,
      2.,
      1.7777777778,
      2.,
      0.,
      0.,
      0.7777777778,
      0.8888888889,
      0.7777777778,
      0.8888888889,
      1.7777777778,
      2.,
      1.,
      1.1111111111,
      2.2222222222,
      2.4444444444,
      1.2222222222,
      1.3333333333,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      2.2222222222,
      2.4444444444,
      2.2222222222,
      2.4444444444,
      4.8888888889,
      5.3333333333,
      2.6666666667,
      2.8888888889,
      5.7777777778,
      6.2222222222,
      3.1111111111,
      3.3333333333,
      3.1111111111,
      3.3333333333,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.4444444444,
      1.5555555556,
      3.1111111111,
      3.3333333333,
      1.6666666667,
      1.7777777778,
      3.5555555556,
      3.7777777778,
      1.8888888889,
      2.,
      1.8888888889,
      2.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      2.1111111111,
      2.2222222222,
      2.1111111111,
      2.2222222222,
      4.4444444444,
      4.6666666667,
      2.3333333333,
      2.4444444444,
      4.8888888889,
      5.1111111111,
      2.5555555556,
      2.6666666667,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      4.8888888889,
      5.1111111111,
      4.8888888889,
      5.1111111111,
      10.2222222222,
      10.6666666667,
      5.3333333333,
      5.5555555556,
      11.1111111111,
      11.5555555556,
      5.7777777778,
      6.,
      5.7777777778,
      6.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      2.7777777778,
      2.8888888889,
      5.7777777778,
      6.,
      3.,
      3.1111111111,
      6.2222222222,
      6.4444444444,
      3.2222222222,
      3.3333333333,
      3.2222222222,
      3.3333333333,
      0.,
      0.,
      6.2222222222,
      6.4444444444,
      6.2222222222,
      6.4444444444,
      12.8888888889,
      13.3333333333,
      6.6666666667,
      6.8888888889,
      13.7777777778,
      14.2222222222,
      7.1111111111,
      7.3333333333,
      7.1111111111,
      7.3333333333,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      3.4444444444,
      3.5555555556,
      3.4444444444,
      3.5555555556,
      7.1111111111,
      7.3333333333,
      3.6666666667,
      3.7777777778,
      7.5555555556,
      7.7777777778,
      3.8888888889,
      4.,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.1111111111,
      4.2222222222,
      8.4444444444,
      8.6666666667,
      4.3333333333,
      4.4444444444,
      8.8888888889,
      9.1111111111,
      4.5555555556,
      4.6666666667,
      4.5555555556,
      4.6666666667,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.1111111111,
      4.2222222222,
      8.4444444444,
      8.6666666667,
      4.3333333333,
      4.4444444444,
      8.8888888889,
      9.1111111111,
      4.5555555556,
      4.6666666667,
      4.5555555556,
      4.6666666667,
      0.,
      0.,
      8.8888888889,
      9.1111111111,
      8.8888888889,
      9.1111111111,
      18.2222222222,
      18.6666666667,
      9.3333333333,
      9.5555555556,
      19.1111111111,
      19.5555555556,
      9.7777777778,
      10.,
      9.7777777778,
      10.,
      0.,
      0.,
      4.7777777778,
      4.8888888889,
      4.7777777778,
      4.8888888889,
      9.7777777778,
      10.,
      5.,
      5.1111111111,
      10.2222222222,
      10.4444444444,
      5.2222222222,
      5.3333333333,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      10.2222222222,
      10.4444444444,
      10.2222222222,
      10.4444444444,
      20.8888888889,
      21.3333333333,
      10.6666666667,
      10.8888888889,
      21.7777777778,
      22.2222222222,
      11.1111111111,
      11.3333333333,
      11.1111111111,
      11.3333333333,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      11.5555555556,
      11.7777777778,
      5.8888888889,
      6.,
      5.8888888889,
      6.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.4444444444,
      5.5555555556,
      11.1111111111,
      11.3333333333,
      5.6666666667,
      5.7777777778,
      11.5555555556,
      11.7777777778,
      5.8888888889,
      6.,
      5.8888888889,
      6.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, SAME3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      3.1666666667,
      3.4444444444,
      3.7222222222,
      4.,
      2.1666666667,
      2.3333333333,
      2.5,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      2.,
      2.2222222222,
      2.4444444444,
      2.6666666667,
      4.8888888889,
      5.3333333333,
      5.7777777778,
      6.2222222222,
      2.8888888889,
      3.1111111111,
      3.3333333333,
      3.5555555556,
      6.6666666667,
      7.1111111111,
      7.5555555556,
      8.,
      3.7777777778,
      4.,
      4.2222222222,
      4.4444444444,
      10.7777777778,
      11.3333333333,
      11.8888888889,
      12.4444444444,
      7.,
      7.3333333333,
      7.6666666667,
      8.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      7.6111111111,
      7.8888888889,
      8.1666666667,
      8.4444444444,
      4.8333333333,
      5.,
      5.1666666667,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      5.5555555556,
      5.7777777778,
      6.,
      6.2222222222,
      12.,
      12.4444444444,
      12.8888888889,
      13.3333333333,
      6.4444444444,
      6.6666666667,
      6.8888888889,
      7.1111111111,
      13.7777777778,
      14.2222222222,
      14.6666666667,
      15.1111111111,
      7.3333333333,
      7.5555555556,
      7.7777777778,
      8.,
      19.6666666667,
      20.2222222222,
      20.7777777778,
      21.3333333333,
      12.3333333333,
      12.6666666667,
      13.,
      13.3333333333,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      7.7777777778,
      8.,
      8.2222222222,
      8.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      12.0555555556,
      12.3333333333,
      12.6111111111,
      12.8888888889,
      7.5,
      7.6666666667,
      7.8333333333,
      8.,
      11.8333333333,
      12.1111111111,
      12.3888888889,
      12.6666666667,
      11.8333333333,
      12.1111111111,
      12.3888888889,
      12.6666666667,
      24.7777777778,
      25.3333333333,
      25.8888888889,
      26.4444444444,
      12.9444444444,
      13.2222222222,
      13.5,
      13.7777777778,
      27.,
      27.5555555556,
      28.1111111111,
      28.6666666667,
      14.0555555556,
      14.3333333333,
      14.6111111111,
      14.8888888889,
      36.8055555556,
      37.5,
      38.1944444444,
      38.8888888889,
      22.75,
      23.1666666667,
      23.5833333333,
      24.,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      8.1666666667,
      8.3333333333,
      8.5,
      8.6666666667,
      17.,
      17.3333333333,
      17.6666666667,
      18.,
      8.8333333333,
      9.,
      9.1666666667,
      9.3333333333,
      18.3333333333,
      18.6666666667,
      19.,
      19.3333333333,
      9.5,
      9.6666666667,
      9.8333333333,
      10.,
      24.75,
      25.1666666667,
      25.5833333333,
      26.,
      15.25,
      15.5,
      15.75,
      16.,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      20.9444444444,
      21.2222222222,
      21.5,
      21.7777777778,
      12.8333333333,
      13.,
      13.1666666667,
      13.3333333333,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      15.7777777778,
      16.,
      16.2222222222,
      16.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      20.9444444444,
      21.2222222222,
      21.5,
      21.7777777778,
      12.8333333333,
      13.,
      13.1666666667,
      13.3333333333,
      16.2222222222,
      16.4444444444,
      16.6666666667,
      16.8888888889,
      16.2222222222,
      16.4444444444,
      16.6666666667,
      16.8888888889,
      33.3333333333,
      33.7777777778,
      34.2222222222,
      34.6666666667,
      17.1111111111,
      17.3333333333,
      17.5555555556,
      17.7777777778,
      35.1111111111,
      35.5555555556,
      36.,
      36.4444444444,
      18.,
      18.2222222222,
      18.4444444444,
      18.6666666667,
      46.3333333333,
      46.8888888889,
      47.4444444444,
      48.,
      28.3333333333,
      28.6666666667,
      29.,
      29.3333333333,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      18.4444444444,
      18.6666666667,
      18.8888888889,
      19.1111111111,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      9.8888888889,
      10.,
      10.1111111111,
      10.2222222222,
      25.3888888889,
      25.6666666667,
      25.9444444444,
      26.2222222222,
      15.5,
      15.6666666667,
      15.8333333333,
      16.,
      19.7777777778,
      20.,
      20.2222222222,
      20.4444444444,
      19.7777777778,
      20.,
      20.2222222222,
      20.4444444444,
      40.4444444444,
      40.8888888889,
      41.3333333333,
      41.7777777778,
      20.6666666667,
      20.8888888889,
      21.1111111111,
      21.3333333333,
      42.2222222222,
      42.6666666667,
      43.1111111111,
      43.5555555556,
      21.5555555556,
      21.7777777778,
      22.,
      22.2222222222,
      55.2222222222,
      55.7777777778,
      56.3333333333,
      56.8888888889,
      33.6666666667,
      34.,
      34.3333333333,
      34.6666666667,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      29.8333333333,
      30.1111111111,
      30.3888888889,
      30.6666666667,
      18.1666666667,
      18.3333333333,
      18.5,
      18.6666666667,
      29.6111111111,
      29.8888888889,
      30.1666666667,
      30.4444444444,
      29.6111111111,
      29.8888888889,
      30.1666666667,
      30.4444444444,
      60.3333333333,
      60.8888888889,
      61.4444444444,
      62.,
      30.7222222222,
      31.,
      31.2777777778,
      31.5555555556,
      62.5555555556,
      63.1111111111,
      63.6666666667,
      64.2222222222,
      31.8333333333,
      32.1111111111,
      32.3888888889,
      32.6666666667,
      81.25,
      81.9444444444,
      82.6388888889,
      83.3333333333,
      49.4166666667,
      49.8333333333,
      50.25,
      50.6666666667,
      18.8333333333,
      19.,
      19.1666666667,
      19.3333333333,
      18.8333333333,
      19.,
      19.1666666667,
      19.3333333333,
      38.3333333333,
      38.6666666667,
      39.,
      39.3333333333,
      19.5,
      19.6666666667,
      19.8333333333,
      20.,
      39.6666666667,
      40.,
      40.3333333333,
      40.6666666667,
      20.1666666667,
      20.3333333333,
      20.5,
      20.6666666667,
      51.4166666667,
      51.8333333333,
      52.25,
      52.6666666667,
      31.25,
      31.5,
      31.75,
      32.,
      14.3333333333,
      14.4444444444,
      14.5555555556,
      14.6666666667,
      14.3333333333,
      14.4444444444,
      14.5555555556,
      14.6666666667,
      29.1111111111,
      29.3333333333,
      29.5555555556,
      29.7777777778,
      14.7777777778,
      14.8888888889,
      15.,
      15.1111111111,
      30.,
      30.2222222222,
      30.4444444444,
      30.6666666667,
      15.2222222222,
      15.3333333333,
      15.4444444444,
      15.5555555556,
      38.7222222222,
      39.,
      39.2777777778,
      39.5555555556,
      23.5,
      23.6666666667,
      23.8333333333,
      24.,
      14.3333333333,
      14.4444444444,
      14.5555555556,
      14.6666666667,
      14.3333333333,
      14.4444444444,
      14.5555555556,
      14.6666666667,
      29.1111111111,
      29.3333333333,
      29.5555555556,
      29.7777777778,
      14.7777777778,
      14.8888888889,
      15.,
      15.1111111111,
      30.,
      30.2222222222,
      30.4444444444,
      30.6666666667,
      15.2222222222,
      15.3333333333,
      15.4444444444,
      15.5555555556,
      38.7222222222,
      39.,
      39.2777777778,
      39.5555555556,
      23.5,
      23.6666666667,
      23.8333333333,
      24.,
      30.4444444444,
      30.6666666667,
      30.8888888889,
      31.1111111111,
      30.4444444444,
      30.6666666667,
      30.8888888889,
      31.1111111111,
      61.7777777778,
      62.2222222222,
      62.6666666667,
      63.1111111111,
      31.3333333333,
      31.5555555556,
      31.7777777778,
      32.,
      63.5555555556,
      64.,
      64.4444444444,
      64.8888888889,
      32.2222222222,
      32.4444444444,
      32.6666666667,
      32.8888888889,
      81.8888888889,
      82.4444444444,
      83.,
      83.5555555556,
      49.6666666667,
      50.,
      50.3333333333,
      50.6666666667,
      16.1111111111,
      16.2222222222,
      16.3333333333,
      16.4444444444,
      16.1111111111,
      16.2222222222,
      16.3333333333,
      16.4444444444,
      32.6666666667,
      32.8888888889,
      33.1111111111,
      33.3333333333,
      16.5555555556,
      16.6666666667,
      16.7777777778,
      16.8888888889,
      33.5555555556,
      33.7777777778,
      34.,
      34.2222222222,
      17.,
      17.1111111111,
      17.2222222222,
      17.3333333333,
      43.1666666667,
      43.4444444444,
      43.7222222222,
      44.,
      26.1666666667,
      26.3333333333,
      26.5,
      26.6666666667,
      34.,
      34.2222222222,
      34.4444444444,
      34.6666666667,
      34.,
      34.2222222222,
      34.4444444444,
      34.6666666667,
      68.8888888889,
      69.3333333333,
      69.7777777778,
      70.2222222222,
      34.8888888889,
      35.1111111111,
      35.3333333333,
      35.5555555556,
      70.6666666667,
      71.1111111111,
      71.5555555556,
      72.,
      35.7777777778,
      36.,
      36.2222222222,
      36.4444444444,
      90.7777777778,
      91.3333333333,
      91.8888888889,
      92.4444444444,
      55.,
      55.3333333333,
      55.6666666667,
      56.,
      17.8888888889,
      18.,
      18.1111111111,
      18.2222222222,
      17.8888888889,
      18.,
      18.1111111111,
      18.2222222222,
      36.2222222222,
      36.4444444444,
      36.6666666667,
      36.8888888889,
      18.3333333333,
      18.4444444444,
      18.5555555556,
      18.6666666667,
      37.1111111111,
      37.3333333333,
      37.5555555556,
      37.7777777778,
      18.7777777778,
      18.8888888889,
      19.,
      19.1111111111,
      47.6111111111,
      47.8888888889,
      48.1666666667,
      48.4444444444,
      28.8333333333,
      29.,
      29.1666666667,
      29.3333333333,
      47.3888888889,
      47.6666666667,
      47.9444444444,
      48.2222222222,
      47.3888888889,
      47.6666666667,
      47.9444444444,
      48.2222222222,
      95.8888888889,
      96.4444444444,
      97.,
      97.5555555556,
      48.5,
      48.7777777778,
      49.0555555556,
      49.3333333333,
      98.1111111111,
      98.6666666667,
      99.2222222222,
      99.7777777778,
      49.6111111111,
      49.8888888889,
      50.1666666667,
      50.4444444444,
      125.6944444444,
      126.3888888889,
      127.0833333333,
      127.7777777778,
      76.0833333333,
      76.5,
      76.9166666667,
      77.3333333333,
      29.5,
      29.6666666667,
      29.8333333333,
      30.,
      29.5,
      29.6666666667,
      29.8333333333,
      30.,
      59.6666666667,
      60.,
      60.3333333333,
      60.6666666667,
      30.1666666667,
      30.3333333333,
      30.5,
      30.6666666667,
      61.,
      61.3333333333,
      61.6666666667,
      62.,
      30.8333333333,
      31.,
      31.1666666667,
      31.3333333333,
      78.0833333333,
      78.5,
      78.9166666667,
      79.3333333333,
      47.25,
      47.5,
      47.75,
      48.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow3Stride2Grad, VALID3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.1111111111,
      0.2222222222,
      0.3333333333,
      0.4444444444,
      0.6666666667,
      0.8888888889,
      1.1111111111,
      1.3333333333,
      0.5555555556,
      0.6666666667,
      0.7777777778,
      0.8888888889,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      1.,
      1.1111111111,
      1.2222222222,
      1.3333333333,
      0.,
      0.,
      0.,
      0.,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      1.5555555556,
      1.7777777778,
      2.,
      2.2222222222,
      4.,
      4.4444444444,
      4.8888888889,
      5.3333333333,
      2.4444444444,
      2.6666666667,
      2.8888888889,
      3.1111111111,
      5.7777777778,
      6.2222222222,
      6.6666666667,
      7.1111111111,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      0.,
      0.,
      0.,
      0.,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      1.4444444444,
      1.5555555556,
      1.6666666667,
      1.7777777778,
      3.3333333333,
      3.5555555556,
      3.7777777778,
      4.,
      1.8888888889,
      2.,
      2.1111111111,
      2.2222222222,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      2.3333333333,
      2.4444444444,
      2.5555555556,
      2.6666666667,
      0.,
      0.,
      0.,
      0.,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      4.2222222222,
      4.4444444444,
      4.6666666667,
      4.8888888889,
      9.3333333333,
      9.7777777778,
      10.2222222222,
      10.6666666667,
      5.1111111111,
      5.3333333333,
      5.5555555556,
      5.7777777778,
      11.1111111111,
      11.5555555556,
      12.,
      12.4444444444,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      2.7777777778,
      2.8888888889,
      3.,
      3.1111111111,
      6.,
      6.2222222222,
      6.4444444444,
      6.6666666667,
      3.2222222222,
      3.3333333333,
      3.4444444444,
      3.5555555556,
      6.8888888889,
      7.1111111111,
      7.3333333333,
      7.5555555556,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      3.6666666667,
      3.7777777778,
      3.8888888889,
      4.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      4.1111111111,
      4.2222222222,
      4.3333333333,
      4.4444444444,
      8.6666666667,
      8.8888888889,
      9.1111111111,
      9.3333333333,
      4.5555555556,
      4.6666666667,
      4.7777777778,
      4.8888888889,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      5.,
      5.1111111111,
      5.2222222222,
      5.3333333333,
      0.,
      0.,
      0.,
      0.,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      9.5555555556,
      9.7777777778,
      10.,
      10.2222222222,
      20.,
      20.4444444444,
      20.8888888889,
      21.3333333333,
      10.4444444444,
      10.6666666667,
      10.8888888889,
      11.1111111111,
      21.7777777778,
      22.2222222222,
      22.6666666667,
      23.1111111111,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      0.,
      0.,
      0.,
      0.,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      5.4444444444,
      5.5555555556,
      5.6666666667,
      5.7777777778,
      11.3333333333,
      11.5555555556,
      11.7777777778,
      12.,
      5.8888888889,
      6.,
      6.1111111111,
      6.2222222222,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      6.3333333333,
      6.4444444444,
      6.5555555556,
      6.6666666667,
      0.,
      0.,
      0.,
      0.,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      12.2222222222,
      12.4444444444,
      12.6666666667,
      12.8888888889,
      25.3333333333,
      25.7777777778,
      26.2222222222,
      26.6666666667,
      13.1111111111,
      13.3333333333,
      13.5555555556,
      13.7777777778,
      27.1111111111,
      27.5555555556,
      28.,
      28.4444444444,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      6.7777777778,
      6.8888888889,
      7.,
      7.1111111111,
      14.,
      14.2222222222,
      14.4444444444,
      14.6666666667,
      7.2222222222,
      7.3333333333,
      7.4444444444,
      7.5555555556,
      14.8888888889,
      15.1111111111,
      15.3333333333,
      15.5555555556,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      7.6666666667,
      7.7777777778,
      7.8888888889,
      8.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      16.6666666667,
      16.8888888889,
      17.1111111111,
      17.3333333333,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      0.,
      0.,
      0.,
      0.,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      8.1111111111,
      8.2222222222,
      8.3333333333,
      8.4444444444,
      16.6666666667,
      16.8888888889,
      17.1111111111,
      17.3333333333,
      8.5555555556,
      8.6666666667,
      8.7777777778,
      8.8888888889,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      9.,
      9.1111111111,
      9.2222222222,
      9.3333333333,
      0.,
      0.,
      0.,
      0.,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      17.5555555556,
      17.7777777778,
      18.,
      18.2222222222,
      36.,
      36.4444444444,
      36.8888888889,
      37.3333333333,
      18.4444444444,
      18.6666666667,
      18.8888888889,
      19.1111111111,
      37.7777777778,
      38.2222222222,
      38.6666666667,
      39.1111111111,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      0.,
      0.,
      0.,
      0.,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      9.4444444444,
      9.5555555556,
      9.6666666667,
      9.7777777778,
      19.3333333333,
      19.5555555556,
      19.7777777778,
      20.,
      9.8888888889,
      10.,
      10.1111111111,
      10.2222222222,
      20.2222222222,
      20.4444444444,
      20.6666666667,
      20.8888888889,
      10.3333333333,
      10.4444444444,
      10.5555555556,
      10.6666666667,
      10.3333333333,
      10.4444444444,
      10.5555555556,
      10.6666666667,
      0.,
      0.,
      0.,
      0.,
      20.2222222222,
      20.4444444444,
      20.6666666667,
      20.8888888889,
      20.2222222222,
      20.4444444444,
      20.6666666667,
      20.8888888889,
      41.3333333333,
      41.7777777778,
      42.2222222222,
      42.6666666667,
      21.1111111111,
      21.3333333333,
      21.5555555556,
      21.7777777778,
      43.1111111111,
      43.5555555556,
      44.,
      44.4444444444,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      0.,
      0.,
      0.,
      0.,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      0.,
      0.,
      0.,
      0.,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      10.7777777778,
      10.8888888889,
      11.,
      11.1111111111,
      22.,
      22.2222222222,
      22.4444444444,
      22.6666666667,
      11.2222222222,
      11.3333333333,
      11.4444444444,
      11.5555555556,
      22.8888888889,
      23.1111111111,
      23.3333333333,
      23.5555555556,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      11.6666666667,
      11.7777777778,
      11.8888888889,
      12.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
      0.,
  };
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<3, 2>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
