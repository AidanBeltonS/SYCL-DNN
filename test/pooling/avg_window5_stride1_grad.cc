/*
 * Copyright 2018 Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pooling_tests.py.
// Results calculated using Tensorflow v1.8.0.

#include <gtest/gtest.h>

#include "sycldnn/pooling/launch.h"
#include "sycldnn/pooling/operators.h"
#include "sycldnn/pooling/params.h"

#include "test/pooling/pooling_fixture.h"
#include "test/types/kernel_data_types.h"

#include <CL/sycl.hpp>

#include <vector>

using namespace sycldnn;
template <typename DataType>
using AvgWindow5Stride1Grad =
    PoolingFixture<DataType, pooling::Average, pooling::Backpropagate>;
TYPED_TEST_CASE(AvgWindow5Stride1Grad, types::GTestKernelDataTypes);
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,  5.5844444444,  7.5386111111,  8.8441666667,  7.4775,
      6.2275,        7.2844444444,  9.5711111111,  12.6752777778, 14.3141666667,
      11.9475,       9.8575,        12.3427777778, 16.0294444444, 20.9461111111,
      23.0016666667, 19.01,         15.57,         20.1761111111, 25.8627777778,
      33.2794444444, 35.335,        28.8433333333, 23.4033333333, 18.6427777778,
      23.8294444444, 30.5586111111, 32.1975,       26.2058333333, 21.2158333333,
      16.4761111111, 21.0227777778, 26.9019444444, 28.2075,       22.9158333333,
      18.5258333333};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.16, 0.4,  0.4,  0.4,  0.4,  0.24, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.16, 0.4,  0.4,  0.4,  0.4,  0.24, 0.12, 0.28, 0.28, 0.28, 0.28, 0.16};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,  8.3555555556,  10.3986111111, 11.1688888889, 14.1111111111,
      15.0772222222, 16.7222222222, 17.6883333333, 14.1847222222, 14.955,
      11.8413888889, 12.455,        13.7986111111, 14.5688888889, 18.1752777778,
      19.1422222222, 24.1377777778, 25.3505555556, 27.4155555556, 28.6283333333,
      22.9280555556, 23.895,        18.9447222222, 19.715,        23.7194444444,
      24.6855555556, 30.8461111111, 32.0588888889, 40.3711111111, 41.8922222222,
      44.4822222222, 46.0033333333, 36.8072222222, 38.02,         30.1738888889,
      31.14,         39.3861111111, 40.3522222222, 50.5127777778, 51.7255555556,
      65.0377777778, 66.5588888889, 69.1488888889, 70.67,         56.4738888889,
      57.6866666667, 45.8405555556, 46.8066666667, 36.5152777778, 37.2855555556,
      46.6919444444, 47.6588888889, 59.9044444444, 61.1172222222, 63.1822222222,
      64.395,        51.4447222222, 52.4116666667, 41.6613888889, 42.4316666667,
      32.3386111111, 32.9522222222, 41.2752777778, 42.0455555556, 52.8377777778,
      53.8038888889, 55.4488888889, 56.415,        45.0613888889, 45.8316666667,
      36.4380555556, 37.0516666667};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.12, 0.16,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.2,  0.24, 0.48, 0.56, 0.48, 0.56, 0.48, 0.56, 0.48, 0.56, 0.28, 0.32};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      46.4727777778,  47.4388888889,  48.405,         49.3711111111,
      60.4794444444,  61.6922222222,  62.905,         64.1177777778,
      79.2211111111,  80.7422222222,  82.2633333333,  83.7844444444,
      87.4433333333,  88.9644444444,  90.4855555556,  92.0066666667,
      72.4016666667,  73.6144444444,  74.8272222222,  76.04,
      59.3816666667,  60.3477777778,  61.3138888889,  62.28,
      77.8061111111,  78.7722222222,  79.7383333333,  80.7044444444,
      99.8127777778,  101.0255555556, 102.2383333333, 103.4511111111,
      128.5544444444, 130.0755555556, 131.5966666667, 133.1177777778,
      136.7766666667, 138.2977777778, 139.8188888889, 141.34,
      111.735,        112.9477777778, 114.1605555556, 115.3733333333,
      90.715,         91.6811111111,  92.6472222222,  93.6133333333,
      72.2602777778,  73.0305555556,  73.8008333333,  74.5711111111,
      92.4169444444,  93.3838888889,  94.3508333333,  95.3177777778,
      118.5961111111, 119.8088888889, 121.0216666667, 122.2344444444,
      125.1516666667, 126.3644444444, 127.5772222222, 128.79,
      101.9225,       102.8894444444, 103.8563888889, 104.8233333333,
      82.5525,        83.3227777778,  84.0930555556,  84.8633333333,
      64.0636111111,  64.6772222222,  65.2908333333,  65.9044444444,
      81.7802777778,  82.5505555556,  83.3208333333,  84.0911111111,
      104.7094444444, 105.6755555556, 106.6416666667, 107.6077777778,
      109.9316666667, 110.8977777778, 111.8638888889, 112.83,
      89.3525,        90.1227777778,  90.8930555556,  91.6633333333,
      72.2625,        72.8761111111,  73.4897222222,  74.1033333333};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48,
      0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48, 0.2,  0.24, 0.28, 0.32,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.36, 0.4,  0.44, 0.48, 0.88, 0.96, 1.04, 1.12, 0.88, 0.96, 1.04, 1.12,
      0.88, 0.96, 1.04, 1.12, 0.88, 0.96, 1.04, 1.12, 0.52, 0.56, 0.6,  0.64};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,  6.2236111111,  7.9169444444,  8.4516666667,  10.2669444444,
      8.8869444444,  7.3502777778,  8.2636111111,  10.8002777778, 13.5336111111,
      13.9516666667, 16.4836111111, 14.1436111111, 11.6069444444, 14.1052777778,
      18.2419444444, 22.6252777778, 22.7516666667, 26.3252777778, 22.4352777778,
      18.2986111111, 23.2441666667, 29.7141666667, 36.4308333333, 35.585,
      40.1308333333, 33.9075,       27.4375,       21.515,        27.435,
      33.5516666667, 32.56,         36.5016666667, 30.7783333333, 24.8583333333,
      19.035,        24.235,        29.5916666667, 28.6,          31.9416666667,
      26.8983333333, 21.6983333333};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.24, 0.24, 0.2,  0.12, 0.2,  0.48, 0.84, 0.84,
      0.84, 0.64, 0.36, 0.2,  0.48, 0.84, 0.84, 0.84, 0.64, 0.36, 0.2,
      0.48, 0.84, 0.84, 0.84, 0.64, 0.36, 0.2,  0.48, 0.84, 0.84, 0.84,
      0.64, 0.36, 0.16, 0.36, 0.6,  0.6,  0.6,  0.44, 0.24};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,  9.3738888889,  11.6769444444, 12.4472222222, 14.9069444444,
      15.8338888889, 16.0416666667, 16.9033333333, 19.6069444444, 20.5338888889,
      17.0036111111, 17.7738888889, 14.0869444444, 14.7005555556, 15.7569444444,
      16.5272222222, 20.6336111111, 21.6005555556, 25.9036111111, 27.0672222222,
      26.8216666667, 27.9033333333, 31.8036111111, 32.9672222222, 27.3202777778,
      28.2872222222, 22.4436111111, 23.2138888889, 27.2444444444, 28.2105555556,
      35.2711111111, 36.4838888889, 43.7911111111, 45.2505555556, 44.1466666667,
      45.5033333333, 51.1911111111, 52.6505555556, 43.6577777778, 44.8705555556,
      35.6311111111, 36.5972222222, 45.5222222222, 46.4883333333, 58.2155555556,
      59.4283333333, 71.4022222222, 72.8616666667, 69.8133333333, 71.17,
      78.8022222222, 80.2616666667, 66.6022222222, 67.815,        53.9088888889,
      54.875,        42.2597222222, 43.03,         53.9030555556, 54.87,
      65.9397222222, 67.1033333333, 64.0383333333, 65.12,         71.8397222222,
      73.0033333333, 60.5897222222, 61.5566666667, 48.9463888889, 49.7166666667,
      37.4563888889, 38.07,         47.6997222222, 48.47,         58.2563888889,
      59.1833333333, 56.3383333333, 57.2,          62.9563888889, 63.8833333333,
      53.0263888889, 53.7966666667, 42.7830555556, 43.3966666667};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.36, 0.48, 0.36, 0.48, 0.32, 0.4,
      0.2,  0.24, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68,
      1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68,
      1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68,
      1.44, 1.68, 1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96,
      1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.28, 0.32,
      0.64, 0.72, 1.08, 1.2,  1.08, 1.2,  1.08, 1.2,  0.8,  0.88, 0.44, 0.48};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      53.5227777778,  54.4888888889,  55.455,         56.4211111111,
      69.3294444444,  70.5422222222,  71.755,         72.9677777778,
      86.1227777778,  87.5822222222,  89.0416666667,  90.5011111111,
      86.9366666667,  88.2933333333,  89.65,          91.0066666667,
      100.9227777778, 102.3822222222, 103.8416666667, 105.3011111111,
      86.1027777778,  87.3155555556,  88.5283333333,  89.7411111111,
      70.2961111111,  71.2622222222,  72.2283333333,  73.1944444444,
      90.0783333333,  91.0444444444,  92.0105555556,  92.9766666667,
      115.2183333333, 116.4311111111, 117.6438888889, 118.8566666667,
      141.345,        142.8044444444, 144.2638888889, 145.7233333333,
      138.27,         139.6266666667, 140.9833333333, 142.34,
      156.145,        157.6044444444, 159.0638888889, 160.5233333333,
      131.9916666667, 133.2044444444, 134.4172222222, 135.63,
      106.8516666667, 107.8177777778, 108.7838888889, 109.75,
      83.7491666667,  84.5194444444,  85.2897222222,  86.06,
      106.8391666667, 107.8061111111, 108.7730555556, 109.74,
      130.7158333333, 131.8794444444, 133.0430555556, 134.2066666667,
      126.995,        128.0766666667, 129.1583333333, 130.24,
      142.5158333333, 143.6794444444, 144.8430555556, 146.0066666667,
      120.2125,       121.1794444444, 122.1463888889, 123.1133333333,
      97.1225,        97.8927777778,  98.6630555556,  99.4333333333,
      74.2991666667,  74.9127777778,  75.5263888889,  76.14,
      94.6291666667,  95.3994444444,  96.1697222222,  96.94,
      115.5858333333, 116.5127777778, 117.4397222222, 118.3666666667,
      111.815,        112.6766666667, 113.5383333333, 114.4,
      124.9858333333, 125.9127777778, 126.8397222222, 127.7666666667,
      105.2825,       106.0527777778, 106.8230555556, 107.5933333333,
      84.9525,        85.5661111111,  86.1797222222,  86.7933333333};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.6,  0.72, 0.84, 0.96,
      0.6,  0.72, 0.84, 0.96, 0.6,  0.72, 0.84, 0.96, 0.56, 0.64, 0.72, 0.8,
      0.36, 0.4,  0.44, 0.48, 0.56, 0.64, 0.72, 0.8,  1.44, 1.6,  1.76, 1.92,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.08, 2.24, 2.4,  2.56, 1.2,  1.28, 1.36, 1.44, 0.56, 0.64, 0.72, 0.8,
      1.44, 1.6,  1.76, 1.92, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.08, 2.24, 2.4,  2.56, 1.2,  1.28, 1.36, 1.44,
      0.56, 0.64, 0.72, 0.8,  1.44, 1.6,  1.76, 1.92, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 2.08, 2.24, 2.4,  2.56,
      1.2,  1.28, 1.36, 1.44, 0.56, 0.64, 0.72, 0.8,  1.44, 1.6,  1.76, 1.92,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.08, 2.24, 2.4,  2.56, 1.2,  1.28, 1.36, 1.44, 0.52, 0.56, 0.6,  0.64,
      1.2,  1.28, 1.36, 1.44, 2.04, 2.16, 2.28, 2.4,  2.04, 2.16, 2.28, 2.4,
      2.04, 2.16, 2.28, 2.4,  1.52, 1.6,  1.68, 1.76, 0.84, 0.88, 0.92, 0.96};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,  6.8627777778,  8.6861111111,  8.6716666667,  9.6508333333,
      11.9630555556, 10.2963888889, 8.4730555556,  9.2427777778,  12.0294444444,
      15.0127777778, 14.5316666667, 15.7608333333, 19.1263888889, 16.3397222222,
      13.3563888889, 15.8677777778, 20.4544444444, 25.2877777778, 23.9566666667,
      25.4983333333, 30.4472222222, 25.8605555556, 21.0272222222, 26.3122222222,
      33.5655555556, 41.0655555556, 37.9566666667, 39.4983333333, 46.225,
      38.9716666667, 31.4716666667, 24.3872222222, 31.0405555556, 37.8905555556,
      34.8316666667, 36.0608333333, 42.0041666667, 35.3508333333, 28.5008333333,
      21.5938888889, 27.4472222222, 33.4572222222, 30.6516666667, 31.6308333333,
      36.7341666667, 30.8808333333, 24.8708333333};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.4,  0.4,  0.36, 0.28, 0.16, 0.24, 0.56, 0.96, 1.44,
      1.44, 1.2,  0.88, 0.48, 0.24, 0.56, 0.96, 1.44, 1.44, 1.2,  0.88, 0.48,
      0.24, 0.56, 0.96, 1.44, 1.44, 1.2,  0.88, 0.48, 0.24, 0.56, 0.96, 1.44,
      1.44, 1.2,  0.88, 0.48, 0.2,  0.44, 0.72, 1.04, 1.04, 0.84, 0.6,  0.32};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,  10.3922222222, 12.9552777778, 13.7255555556, 16.4452777778,
      17.3722222222, 16.5208333333, 17.3433333333, 18.4791666667, 19.3016666667,
      22.9991666667, 23.9261111111, 19.8225,       20.5927777778, 16.3325,
      16.9461111111, 17.7152777778, 18.4855555556, 23.0919444444, 24.0588888889,
      28.8619444444, 30.0255555556, 28.0308333333, 29.0633333333, 30.4891666667,
      31.5216666667, 37.0891666667, 38.2527777778, 31.7125,       32.6794444444,
      25.9425,       26.7127777778, 30.7694444444, 31.7355555556, 39.6961111111,
      40.9088888889, 49.1161111111, 50.5755555556, 46.6183333333, 47.9133333333,
      49.7016666667, 50.9966666667, 59.435,        60.8944444444, 50.5083333333,
      51.7211111111, 41.0883333333, 42.0544444444, 51.6583333333, 52.6244444444,
      65.9183333333, 67.1311111111, 80.6716666667, 82.1311111111, 74.6183333333,
      75.9133333333, 77.7016666667, 78.9966666667, 90.9905555556, 92.45,
      76.7305555556, 77.9433333333, 61.9772222222, 62.9433333333, 48.0041666667,
      48.7744444444, 61.1141666667, 62.0811111111, 74.6175,       75.7811111111,
      68.6308333333, 69.6633333333, 71.0891666667, 72.1216666667, 82.8447222222,
      84.0083333333, 69.7347222222, 70.7016666667, 56.2313888889, 57.0016666667,
      42.5741666667, 43.1877777778, 54.1241666667, 54.8944444444, 65.9875,
      66.9144444444, 60.4808333333, 61.3033333333, 62.4391666667, 63.2616666667,
      72.5413888889, 73.4683333333, 60.9913888889, 61.7616666667, 49.1280555556,
      49.7416666667};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.64, 0.8,  0.64, 0.8,  0.6,  0.72,
      0.48, 0.56, 0.28, 0.32, 0.4,  0.48, 0.96, 1.12, 1.68, 1.92, 2.56, 2.88,
      2.56, 2.88, 2.16, 2.4,  1.6,  1.76, 0.88, 0.96, 0.4,  0.48, 0.96, 1.12,
      1.68, 1.92, 2.56, 2.88, 2.56, 2.88, 2.16, 2.4,  1.6,  1.76, 0.88, 0.96,
      0.4,  0.48, 0.96, 1.12, 1.68, 1.92, 2.56, 2.88, 2.56, 2.88, 2.16, 2.4,
      1.6,  1.76, 0.88, 0.96, 0.4,  0.48, 0.96, 1.12, 1.68, 1.92, 2.56, 2.88,
      2.56, 2.88, 2.16, 2.4,  1.6,  1.76, 0.88, 0.96, 0.36, 0.4,  0.8,  0.88,
      1.32, 1.44, 1.92, 2.08, 1.92, 2.08, 1.56, 1.68, 1.12, 1.2,  0.6,  0.64};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      60.5727777778,  61.5388888889,  62.505,         63.4711111111,
      78.1794444444,  79.3922222222,  80.605,         81.8177777778,
      96.7727777778,  98.2322222222,  99.6916666667,  101.1511111111,
      91.9416666667,  93.2366666667,  94.5316666667,  95.8266666667,
      98.1083333333,  99.4033333333,  100.6983333333, 101.9933333333,
      117.4105555556, 118.87,         120.3294444444, 121.7888888889,
      99.8038888889,  101.0166666667, 102.2294444444, 103.4422222222,
      81.2105555556,  82.1766666667,  83.1427777778,  84.1088888889,
      102.3505555556, 103.3166666667, 104.2827777778, 105.2488888889,
      130.6238888889, 131.8366666667, 133.0494444444, 134.2622222222,
      159.8838888889, 161.3433333333, 162.8027777778, 164.2622222222,
      147.9416666667, 149.2366666667, 150.5316666667, 151.8266666667,
      154.1083333333, 155.4033333333, 156.6983333333, 157.9933333333,
      180.5216666667, 181.9811111111, 183.4405555556, 184.9,
      152.2483333333, 153.4611111111, 154.6738888889, 155.8866666667,
      122.9883333333, 123.9544444444, 124.9205555556, 125.8866666667,
      95.2380555556,  96.0083333333,  96.7786111111,  97.5488888889,
      121.2613888889, 122.2283333333, 123.1952777778, 124.1622222222,
      148.0713888889, 149.235,        150.3986111111, 151.5622222222,
      136.2291666667, 137.2616666667, 138.2941666667, 139.3266666667,
      141.1458333333, 142.1783333333, 143.2108333333, 144.2433333333,
      164.5258333333, 165.6894444444, 166.8530555556, 168.0166666667,
      138.5025,       139.4694444444, 140.4363888889, 141.4033333333,
      111.6925,       112.4627777778, 113.2330555556, 114.0033333333,
      84.5347222222,  85.1483333333,  85.7619444444,  86.3755555556,
      107.4780555556, 108.2483333333, 109.0186111111, 109.7888888889,
      131.0480555556, 131.975,        132.9019444444, 133.8288888889,
      120.1391666667, 120.9616666667, 121.7841666667, 122.6066666667,
      124.0558333333, 124.8783333333, 125.7008333333, 126.5233333333,
      144.1558333333, 145.0827777778, 146.0097222222, 146.9366666667,
      121.2125,       121.9827777778, 122.7530555556, 123.5233333333,
      97.6425,        98.2561111111,  98.8697222222,  99.4833333333};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.6,  0.72, 0.84, 0.96,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  1.08, 1.2,  1.32, 1.44,
      0.88, 0.96, 1.04, 1.12, 0.52, 0.56, 0.6,  0.64, 0.72, 0.8,  0.88, 0.96,
      1.76, 1.92, 2.08, 2.24, 3.12, 3.36, 3.6,  3.84, 4.8,  5.12, 5.44, 5.76,
      4.8,  5.12, 5.44, 5.76, 4.08, 4.32, 4.56, 4.8,  3.04, 3.2,  3.36, 3.52,
      1.68, 1.76, 1.84, 1.92, 0.72, 0.8,  0.88, 0.96, 1.76, 1.92, 2.08, 2.24,
      3.12, 3.36, 3.6,  3.84, 4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76,
      4.08, 4.32, 4.56, 4.8,  3.04, 3.2,  3.36, 3.52, 1.68, 1.76, 1.84, 1.92,
      0.72, 0.8,  0.88, 0.96, 1.76, 1.92, 2.08, 2.24, 3.12, 3.36, 3.6,  3.84,
      4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76, 4.08, 4.32, 4.56, 4.8,
      3.04, 3.2,  3.36, 3.52, 1.68, 1.76, 1.84, 1.92, 0.72, 0.8,  0.88, 0.96,
      1.76, 1.92, 2.08, 2.24, 3.12, 3.36, 3.6,  3.84, 4.8,  5.12, 5.44, 5.76,
      4.8,  5.12, 5.44, 5.76, 4.08, 4.32, 4.56, 4.8,  3.04, 3.2,  3.36, 3.52,
      1.68, 1.76, 1.84, 1.92, 0.68, 0.72, 0.76, 0.8,  1.52, 1.6,  1.68, 1.76,
      2.52, 2.64, 2.76, 2.88, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.,   3.12, 3.24, 3.36, 2.16, 2.24, 2.32, 2.4,  1.16, 1.2,  1.24, 1.28};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,  5.5844444444,  7.5386111111,  8.8441666667,  7.4775,
      6.2275,        7.2844444444,  9.5711111111,  12.6752777778, 14.3141666667,
      11.9475,       9.8575,        11.3311111111, 14.7377777778, 19.2919444444,
      21.2641666667, 17.5975,       14.4275,       17.0866666667, 21.9266666667,
      28.2516666667, 30.085,        24.585,        19.965,        25.4311111111,
      32.4377777778, 41.4919444444, 43.4641666667, 35.2975,       28.5275,
      23.2644444444, 29.6311111111, 37.8352777778, 39.4741666667, 32.0075,
      25.8375,       20.1577777778, 25.6444444444, 32.6986111111, 34.0041666667,
      27.5375,       22.2075,
  };
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,
      0.24, 0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.36, 0.84, 0.84, 0.84,
      0.84, 0.48, 0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.32, 0.72, 0.72,
      0.72, 0.72, 0.4,  0.2,  0.44, 0.44, 0.44, 0.44, 0.24};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,  8.3555555556,  10.3986111111, 11.1688888889, 14.1111111111,
      15.0772222222, 16.7222222222, 17.6883333333, 14.1847222222, 14.955,
      11.8413888889, 12.455,        13.7986111111, 14.5688888889, 18.1752777778,
      19.1422222222, 24.1377777778, 25.3505555556, 27.4155555556, 28.6283333333,
      22.9280555556, 23.895,        18.9447222222, 19.715,        21.7352777778,
      22.6622222222, 28.3119444444, 29.4755555556, 37.1244444444, 38.5838888889,
      41.0688888889, 42.5283333333, 34.0313888889, 35.195,        27.9280555556,
      28.855,        33.3116666667, 34.1733333333, 42.7716666667, 43.8533333333,
      55.1466666667, 56.5033333333, 58.8133333333, 60.17,         48.0883333333,
      49.17,         39.0683333333, 39.93,         49.9352777778, 50.8622222222,
      63.7119444444, 64.8755555556, 81.5244444444, 82.9838888889, 85.4688888889,
      86.9283333333, 69.4313888889, 70.595,        56.1280555556, 57.055,
      45.7586111111, 46.5288888889, 58.2952777778, 59.2622222222, 74.4577777778,
      75.6705555556, 77.7355555556, 78.9483333333, 63.0480555556, 64.015,
      50.9047222222, 51.675,        39.7019444444, 40.3155555556, 50.5186111111,
      51.2888888889, 64.4311111111, 65.3972222222, 67.0422222222, 68.0083333333,
      54.3047222222, 55.075,        43.8013888889, 44.415,
  };
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.12, 0.16,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.56, 0.64, 1.28, 1.44, 1.28, 1.44, 1.28, 1.44, 1.28, 1.44, 0.72, 0.8,
      0.36, 0.4,  0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.44, 0.48};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      42.5436111111,  43.4705555556,  44.3975,        45.3244444444,
      55.4602777778,  56.6238888889,  57.7875,        58.9511111111,
      72.7894444444,  74.2488888889,  75.7083333333,  77.1677777778,
      80.6783333333,  82.1377777778,  83.5972222222,  85.0566666667,
      66.8991666667,  68.0627777778,  69.2263888889,  70.39,
      54.9291666667,  55.8561111111,  56.7830555556,  57.71,
      65.7616666667,  66.6233333333,  67.485,         68.3466666667,
      84.4616666667,  85.5433333333,  86.625,         87.7066666667,
      108.9366666667, 110.2933333333, 111.65,         113.0066666667,
      116.27,         117.6266666667, 118.9833333333, 120.34,
      95.095,         96.1766666667,  97.2583333333,  98.34,
      77.275,         78.1366666667,  78.9983333333,  79.86,
      98.9436111111,  99.8705555556,  100.7975,       101.7244444444,
      126.2602777778, 127.4238888889, 128.5875,       129.7511111111,
      161.5894444444, 163.0488888889, 164.5083333333, 165.9677777778,
      169.4783333333, 170.9377777778, 172.3972222222, 173.8566666667,
      137.6991666667, 138.8627777778, 140.0263888889, 141.19,
      111.3291666667, 112.2561111111, 113.1830555556, 114.11,
      90.7469444444,  91.5172222222,  92.2875,        93.0577777778,
      115.6236111111, 116.5905555556, 117.5575,       118.5244444444,
      147.7027777778, 148.9155555556, 150.1283333333, 151.3411111111,
      154.2583333333, 155.4711111111, 156.6838888889, 157.8966666667,
      125.1291666667, 126.0961111111, 127.0630555556, 128.03,
      101.0391666667, 101.8094444444, 102.5797222222, 103.35,
      78.7902777778,  79.4038888889,  80.0175,        80.6311111111,
      100.2669444444, 101.0372222222, 101.8075,       102.5777777778,
      127.8961111111, 128.8622222222, 129.8283333333, 130.7944444444,
      133.1183333333, 134.0844444444, 135.0505555556, 136.0166666667,
      107.8391666667, 108.6094444444, 109.3797222222, 110.15,
      86.9891666667,  87.6027777778,  88.2163888889,  88.83,
  };
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48,
      0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48, 0.2,  0.24, 0.28, 0.32,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      1.08, 1.2,  1.32, 1.44, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 1.56, 1.68, 1.8,  1.92,
      1.08, 1.2,  1.32, 1.44, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 1.56, 1.68, 1.8,  1.92,
      1.08, 1.2,  1.32, 1.44, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 1.56, 1.68, 1.8,  1.92,
      1.04, 1.12, 1.2,  1.28, 2.4,  2.56, 2.72, 2.88, 2.4,  2.56, 2.72, 2.88,
      2.4,  2.56, 2.72, 2.88, 2.4,  2.56, 2.72, 2.88, 1.36, 1.44, 1.52, 1.6,
      0.68, 0.72, 0.76, 0.8,  1.52, 1.6,  1.68, 1.76, 1.52, 1.6,  1.68, 1.76,
      1.52, 1.6,  1.68, 1.76, 1.52, 1.6,  1.68, 1.76, 0.84, 0.88, 0.92, 0.96};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,  6.2236111111,  7.9169444444,  8.4516666667,  10.2669444444,
      8.8869444444,  7.3502777778,  8.2636111111,  10.8002777778, 13.5336111111,
      13.9516666667, 16.4836111111, 14.1436111111, 11.6069444444, 12.9369444444,
      16.7536111111, 20.8069444444, 20.9916666667, 24.3569444444, 20.7769444444,
      16.9602777778, 19.6716666667, 25.1716666667, 30.8916666667, 30.25,
      34.1916666667, 28.9116666667, 23.4116666667, 29.3869444444, 37.4036111111,
      45.6569444444, 44.0916666667, 49.2069444444, 41.4269444444, 33.4102777778,
      26.9069444444, 34.2036111111, 41.6969444444, 40.1316666667, 44.6469444444,
      37.5469444444, 30.2502777778, 23.3302777778, 29.6269444444, 36.0802777778,
      34.6316666667, 38.4302777778, 32.2902777778, 25.9936111111};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.24, 0.24, 0.2,  0.12, 0.2,  0.48, 0.84,
      0.84, 0.84, 0.64, 0.36, 0.48, 1.08, 1.8,  1.8,  1.8,  1.32,
      0.72, 0.48, 1.08, 1.8,  1.8,  1.8,  1.32, 0.72, 0.48, 1.08,
      1.8,  1.8,  1.8,  1.32, 0.72, 0.44, 0.96, 1.56, 1.56, 1.56,
      1.12, 0.6,  0.28, 0.6,  0.96, 0.96, 0.96, 0.68, 0.36};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,  9.3738888889,  11.6769444444, 12.4472222222, 14.9069444444,
      15.8338888889, 16.0416666667, 16.9033333333, 19.6069444444, 20.5338888889,
      17.0036111111, 17.7738888889, 14.0869444444, 14.7005555556, 15.7569444444,
      16.5272222222, 20.6336111111, 21.6005555556, 25.9036111111, 27.0672222222,
      26.8216666667, 27.9033333333, 31.8036111111, 32.9672222222, 27.3202777778,
      28.2872222222, 22.4436111111, 23.2138888889, 24.9469444444, 25.8738888889,
      32.3436111111, 33.5072222222, 40.2136111111, 41.6138888889, 40.6816666667,
      41.9833333333, 47.3136111111, 48.7138888889, 40.3902777778, 41.5538888889,
      32.9936111111, 33.9205555556, 38.4816666667, 39.3433333333, 49.2616666667,
      50.3433333333, 60.4816666667, 61.7833333333, 59.29,         60.5,
      67.0816666667, 68.3833333333, 56.7416666667, 57.8233333333, 45.9616666667,
      46.8233333333, 57.8469444444, 58.7738888889, 73.6436111111, 74.8072222222,
      89.9136111111, 91.3138888889, 86.8816666667, 88.1833333333, 97.0136111111,
      98.4138888889, 81.6902777778, 82.8538888889, 65.8936111111, 66.8205555556,
      53.0436111111, 53.8138888889, 67.4402777778, 68.4072222222, 82.2302777778,
      83.3938888889, 79.1816666667, 80.2633333333, 88.1302777778, 89.2938888889,
      74.1269444444, 75.0938888889, 59.7302777778, 60.5005555556, 46.0469444444,
      46.6605555556, 58.4836111111, 59.2538888889, 71.2336111111, 72.1605555556,
      68.4016666667, 69.2633333333, 75.9336111111, 76.8605555556, 63.8102777778,
      64.5805555556, 51.3736111111, 51.9872222222};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.36, 0.48, 0.36, 0.48, 0.32,
      0.4,  0.2,  0.24, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68,
      1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.84, 0.96, 1.92, 2.16, 3.24,
      3.6,  3.24, 3.6,  3.24, 3.6,  2.4,  2.64, 1.32, 1.44, 0.84, 0.96,
      1.92, 2.16, 3.24, 3.6,  3.24, 3.6,  3.24, 3.6,  2.4,  2.64, 1.32,
      1.44, 0.84, 0.96, 1.92, 2.16, 3.24, 3.6,  3.24, 3.6,  3.24, 3.6,
      2.4,  2.64, 1.32, 1.44, 0.8,  0.88, 1.76, 1.92, 2.88, 3.12, 2.88,
      3.12, 2.88, 3.12, 2.08, 2.24, 1.12, 1.2,  0.52, 0.56, 1.12, 1.2,
      1.8,  1.92, 1.8,  1.92, 1.8,  1.92, 1.28, 1.36, 0.68, 0.72};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      48.9669444444,  49.8938888889,  50.8208333333,  51.7477777778,
      63.5236111111,  64.6872222222,  65.8508333333,  67.0144444444,
      79.0269444444,  80.4272222222,  81.8275,        83.2277777778,
      80.0616666667,  81.3633333333,  82.665,         83.9666666667,
      93.2269444444,  94.6272222222,  96.0275,        97.4277777778,
      79.6169444444,  80.7805555556,  81.9441666667,  83.1077777778,
      65.0602777778,  65.9872222222,  66.9141666667,  67.8411111111,
      76.1016666667,  76.9633333333,  77.825,         78.6866666667,
      97.4416666667,  98.5233333333,  99.605,         100.6866666667,
      119.6616666667, 120.9633333333, 122.265,        123.5666666667,
      117.37,         118.58,         119.79,         121.,
      132.8616666667, 134.1633333333, 135.465,        136.7666666667,
      112.4016666667, 113.4833333333, 114.565,        115.6466666667,
      91.0616666667,  91.9233333333,  92.785,         93.6466666667,
      114.7669444444, 115.6938888889, 116.6208333333, 117.5477777778,
      146.1236111111, 147.2872222222, 148.4508333333, 149.6144444444,
      178.4269444444, 179.8272222222, 181.2275,       182.6277777778,
      172.4616666667, 173.7633333333, 175.065,        176.3666666667,
      192.6269444444, 194.0272222222, 195.4275,       196.8277777778,
      162.2169444444, 163.3805555556, 164.5441666667, 165.7077777778,
      130.8602777778, 131.7872222222, 132.7141666667, 133.6411111111,
      105.3169444444, 106.0872222222, 106.8575,       107.6277777778,
      133.9136111111, 134.8805555556, 135.8475,       136.8144444444,
      163.2969444444, 164.4605555556, 165.6241666667, 166.7877777778,
      157.2816666667, 158.3633333333, 159.445,        160.5266666667,
      175.0969444444, 176.2605555556, 177.4241666667, 178.5877777778,
      147.2869444444, 148.2538888889, 149.2208333333, 150.1877777778,
      118.6902777778, 119.4605555556, 120.2308333333, 121.0011111111,
      91.4802777778,  92.0938888889,  92.7075,        93.3211111111,
      116.1969444444, 116.9672222222, 117.7375,       118.5077777778,
      141.5402777778, 142.4672222222, 143.3941666667, 144.3211111111,
      135.9416666667, 136.8033333333, 137.665,        138.5266666667,
      150.9402777778, 151.8672222222, 152.7941666667, 153.7211111111,
      126.8502777778, 127.6205555556, 128.3908333333, 129.1611111111,
      102.1336111111, 102.7472222222, 103.3608333333, 103.9744444444};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.6,  0.72, 0.84, 0.96,
      0.6,  0.72, 0.84, 0.96, 0.6,  0.72, 0.84, 0.96, 0.56, 0.64, 0.72, 0.8,
      0.36, 0.4,  0.44, 0.48, 0.56, 0.64, 0.72, 0.8,  1.44, 1.6,  1.76, 1.92,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.08, 2.24, 2.4,  2.56, 1.2,  1.28, 1.36, 1.44, 1.56, 1.68, 1.8,  1.92,
      3.6,  3.84, 4.08, 4.32, 6.12, 6.48, 6.84, 7.2,  6.12, 6.48, 6.84, 7.2,
      6.12, 6.48, 6.84, 7.2,  4.56, 4.8,  5.04, 5.28, 2.52, 2.64, 2.76, 2.88,
      1.56, 1.68, 1.8,  1.92, 3.6,  3.84, 4.08, 4.32, 6.12, 6.48, 6.84, 7.2,
      6.12, 6.48, 6.84, 7.2,  6.12, 6.48, 6.84, 7.2,  4.56, 4.8,  5.04, 5.28,
      2.52, 2.64, 2.76, 2.88, 1.56, 1.68, 1.8,  1.92, 3.6,  3.84, 4.08, 4.32,
      6.12, 6.48, 6.84, 7.2,  6.12, 6.48, 6.84, 7.2,  6.12, 6.48, 6.84, 7.2,
      4.56, 4.8,  5.04, 5.28, 2.52, 2.64, 2.76, 2.88, 1.52, 1.6,  1.68, 1.76,
      3.36, 3.52, 3.68, 3.84, 5.52, 5.76, 6.,   6.24, 5.52, 5.76, 6.,   6.24,
      5.52, 5.76, 6.,   6.24, 4.,   4.16, 4.32, 4.48, 2.16, 2.24, 2.32, 2.4,
      1.,   1.04, 1.08, 1.12, 2.16, 2.24, 2.32, 2.4,  3.48, 3.6,  3.72, 3.84,
      3.48, 3.6,  3.72, 3.84, 3.48, 3.6,  3.72, 3.84, 2.48, 2.56, 2.64, 2.72,
      1.32, 1.36, 1.4,  1.44};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,  6.8627777778,  8.6861111111,  8.6716666667,  9.6508333333,
      11.9630555556, 10.2963888889, 8.4730555556,  9.2427777778,  12.0294444444,
      15.0127777778, 14.5316666667, 15.7608333333, 19.1263888889, 16.3397222222,
      13.3563888889, 14.5427777778, 18.7694444444, 23.2327777778, 22.0716666667,
      23.5508333333, 28.1830555556, 23.9563888889, 19.4930555556, 22.2566666667,
      28.4166666667, 34.7966666667, 32.23,         33.605,        39.3983333333,
      33.2383333333, 26.8583333333, 33.3427777778, 42.3694444444, 51.6327777778,
      47.2716666667, 48.7508333333, 56.5830555556, 47.5563888889, 38.2930555556,
      30.5494444444, 38.7761111111, 47.1994444444, 43.0916666667, 44.3208333333,
      51.3130555556, 43.0863888889, 34.6630555556, 26.5027777778, 33.6094444444,
      40.8727777778, 37.2316666667, 38.2108333333, 44.1497222222, 37.0430555556,
      29.7797222222};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.4,  0.4,  0.36, 0.28, 0.16, 0.24, 0.56, 0.96, 1.44,
      1.44, 1.2,  0.88, 0.48, 0.6,  1.32, 2.16, 3.12, 3.12, 2.52, 1.8,  0.96,
      0.6,  1.32, 2.16, 3.12, 3.12, 2.52, 1.8,  0.96, 0.6,  1.32, 2.16, 3.12,
      3.12, 2.52, 1.8,  0.96, 0.56, 1.2,  1.92, 2.72, 2.72, 2.16, 1.52, 0.8,
      0.36, 0.76, 1.2,  1.68, 1.68, 1.32, 0.92, 0.48};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,   10.3922222222,  12.9552777778,  13.7255555556,
      16.4452777778,  17.3722222222,  16.5208333333,  17.3433333333,
      18.4791666667,  19.3016666667,  22.9991666667,  23.9261111111,
      19.8225,        20.5927777778,  16.3325,        16.9461111111,
      17.7152777778,  18.4855555556,  23.0919444444,  24.0588888889,
      28.8619444444,  30.0255555556,  28.0308333333,  29.0633333333,
      30.4891666667,  31.5216666667,  37.0891666667,  38.2527777778,
      31.7125,        32.6794444444,  25.9425,        26.7127777778,
      28.1586111111,  29.0855555556,  36.3752777778,  37.5388888889,
      45.0652777778,  46.4655555556,  42.9008333333,  44.1433333333,
      45.8591666667,  47.1016666667,  54.9658333333,  56.3661111111,
      46.7491666667,  47.9127777778,  38.0591666667,  38.9861111111,
      43.6516666667,  44.5133333333,  55.7516666667,  56.8333333333,
      68.2916666667,  69.5933333333,  63.305,         64.46,
      66.055,         67.21,          77.495,         78.7966666667,
      65.395,         66.4766666667,  52.855,         53.7166666667,
      65.7586111111,  66.6855555556,  83.5752777778,  84.7388888889,
      101.8652777778, 103.2655555556, 93.3008333333,  94.5433333333,
      96.2591666667,  97.5016666667,  111.7658333333, 113.1661111111,
      93.9491666667,  95.1127777778,  75.6591666667,  76.5861111111,
      60.3286111111,  61.0988888889,  76.5852777778,  77.5522222222,
      93.2352777778,  94.3988888889,  85.1508333333,  86.1833333333,
      87.6091666667,  88.6416666667,  101.4625,       102.6261111111,
      85.2058333333,  86.1727777778,  68.5558333333,  69.3261111111,
      52.3919444444,  53.0055555556,  66.4486111111,  67.2188888889,
      80.8186111111,  81.7455555556,  73.6408333333,  74.4633333333,
      75.5991666667,  76.4216666667,  87.3725,        88.2994444444,
      73.3158333333,  74.0861111111,  58.9458333333,  59.5594444444};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.64, 0.8,  0.64, 0.8,  0.6,  0.72,
      0.48, 0.56, 0.28, 0.32, 0.4,  0.48, 0.96, 1.12, 1.68, 1.92, 2.56, 2.88,
      2.56, 2.88, 2.16, 2.4,  1.6,  1.76, 0.88, 0.96, 1.08, 1.2,  2.4,  2.64,
      3.96, 4.32, 5.76, 6.24, 5.76, 6.24, 4.68, 5.04, 3.36, 3.6,  1.8,  1.92,
      1.08, 1.2,  2.4,  2.64, 3.96, 4.32, 5.76, 6.24, 5.76, 6.24, 4.68, 5.04,
      3.36, 3.6,  1.8,  1.92, 1.08, 1.2,  2.4,  2.64, 3.96, 4.32, 5.76, 6.24,
      5.76, 6.24, 4.68, 5.04, 3.36, 3.6,  1.8,  1.92, 1.04, 1.12, 2.24, 2.4,
      3.6,  3.84, 5.12, 5.44, 5.12, 5.44, 4.08, 4.32, 2.88, 3.04, 1.52, 1.6,
      0.68, 0.72, 1.44, 1.52, 2.28, 2.4,  3.2,  3.36, 3.2,  3.36, 2.52, 2.64,
      1.76, 1.84, 0.92, 0.96};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      55.3902777778,  56.3172222222,  57.2441666667,  58.1711111111,
      71.5869444444,  72.7505555556,  73.9141666667,  75.0777777778,
      88.7302777778,  90.1305555556,  91.5308333333,  92.9311111111,
      84.5591666667,  85.8016666667,  87.0441666667,  88.2866666667,
      90.4758333333,  91.7183333333,  92.9608333333,  94.2033333333,
      108.5313888889, 109.9316666667, 111.3319444444, 112.7322222222,
      92.3347222222,  93.4983333333,  94.6619444444,  95.8255555556,
      75.1913888889,  76.1183333333,  77.0452777778,  77.9722222222,
      86.4416666667,  87.3033333333,  88.165,         89.0266666667,
      110.4216666667, 111.5033333333, 112.585,        113.6666666667,
      135.2816666667, 136.5833333333, 137.885,        139.1866666667,
      125.455,        126.61,         127.765,        128.92,
      130.955,        132.11,         133.265,        134.42,
      153.6883333333, 154.99,         156.2916666667, 157.5933333333,
      129.7083333333, 130.79,         131.8716666667, 132.9533333333,
      104.8483333333, 105.71,         106.5716666667, 107.4333333333,
      130.5902777778, 131.5172222222, 132.4441666667, 133.3711111111,
      165.9869444444, 167.1505555556, 168.3141666667, 169.4777777778,
      202.3302777778, 203.7305555556, 205.1308333333, 206.5311111111,
      185.3591666667, 186.6016666667, 187.8441666667, 189.0866666667,
      191.2758333333, 192.5183333333, 193.7608333333, 195.0033333333,
      222.1313888889, 223.5316666667, 224.9319444444, 226.3322222222,
      186.7347222222, 187.8983333333, 189.0619444444, 190.2255555556,
      150.3913888889, 151.3183333333, 152.2452777778, 153.1722222222,
      119.8869444444, 120.6572222222, 121.4275,       122.1977777778,
      152.2036111111, 153.1705555556, 154.1375,       155.1044444444,
      185.3069444444, 186.4705555556, 187.6341666667, 188.7977777778,
      169.2691666667, 170.3016666667, 171.3341666667, 172.3666666667,
      174.1858333333, 175.2183333333, 176.2508333333, 177.2833333333,
      201.7613888889, 202.925,        204.0886111111, 205.2522222222,
      169.4447222222, 170.4116666667, 171.3786111111, 172.3455555556,
      136.3413888889, 137.1116666667, 137.8819444444, 138.6522222222,
      104.1702777778, 104.7838888889, 105.3975,       106.0111111111,
      132.1269444444, 132.8972222222, 133.6675,       134.4377777778,
      160.7102777778, 161.6372222222, 162.5641666667, 163.4911111111,
      146.4591666667, 147.2816666667, 148.1041666667, 148.9266666667,
      150.3758333333, 151.1983333333, 152.0208333333, 152.8433333333,
      173.8180555556, 174.745,        175.6719444444, 176.5988888889,
      145.8613888889, 146.6316666667, 147.4019444444, 148.1722222222,
      117.2780555556, 117.8916666667, 118.5052777778, 119.1188888889};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.08,  1.2,   1.32,  1.44,  0.88,  0.96,  1.04,  1.12,  0.52,  0.56,
      0.6,   0.64,  0.72,  0.8,   0.88,  0.96,  1.76,  1.92,  2.08,  2.24,
      3.12,  3.36,  3.6,   3.84,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  4.08,  4.32,  4.56,  4.8,   3.04,  3.2,   3.36,  3.52,
      1.68,  1.76,  1.84,  1.92,  2.04,  2.16,  2.28,  2.4,   4.56,  4.8,
      5.04,  5.28,  7.56,  7.92,  8.28,  8.64,  11.04, 11.52, 12.,   12.48,
      11.04, 11.52, 12.,   12.48, 9.,    9.36,  9.72,  10.08, 6.48,  6.72,
      6.96,  7.2,   3.48,  3.6,   3.72,  3.84,  2.04,  2.16,  2.28,  2.4,
      4.56,  4.8,   5.04,  5.28,  7.56,  7.92,  8.28,  8.64,  11.04, 11.52,
      12.,   12.48, 11.04, 11.52, 12.,   12.48, 9.,    9.36,  9.72,  10.08,
      6.48,  6.72,  6.96,  7.2,   3.48,  3.6,   3.72,  3.84,  2.04,  2.16,
      2.28,  2.4,   4.56,  4.8,   5.04,  5.28,  7.56,  7.92,  8.28,  8.64,
      11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48, 9.,    9.36,
      9.72,  10.08, 6.48,  6.72,  6.96,  7.2,   3.48,  3.6,   3.72,  3.84,
      2.,    2.08,  2.16,  2.24,  4.32,  4.48,  4.64,  4.8,   6.96,  7.2,
      7.44,  7.68,  9.92,  10.24, 10.56, 10.88, 9.92,  10.24, 10.56, 10.88,
      7.92,  8.16,  8.4,   8.64,  5.6,   5.76,  5.92,  6.08,  2.96,  3.04,
      3.12,  3.2,   1.32,  1.36,  1.4,   1.44,  2.8,   2.88,  2.96,  3.04,
      4.44,  4.56,  4.68,  4.8,   6.24,  6.4,   6.56,  6.72,  6.24,  6.4,
      6.56,  6.72,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,  5.5844444444,  7.5386111111,  8.8441666667,  7.4775,
      6.2275,        7.2844444444,  9.5711111111,  12.6752777778, 14.3141666667,
      11.9475,       9.8575,        11.3311111111, 14.7377777778, 19.2919444444,
      21.2641666667, 17.5975,       14.4275,       15.84,         20.34,
      26.2275,       27.9775,       22.8775,       18.5875,       21.715,
      27.715,        35.4775,       37.2275,       30.2525,       24.4625,
      30.9927777778, 39.4194444444, 50.2486111111, 52.2208333333, 42.2791666667,
      34.0891666667, 27.8861111111, 35.4327777778, 45.1119444444, 46.7508333333,
      37.8091666667, 30.4591666667, 23.8394444444, 30.2661111111, 38.4952777778,
      39.8008333333, 32.1591666667, 25.8891666667};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.64, 1.44, 1.44, 1.44, 1.44, 0.8,
      0.64, 1.44, 1.44, 1.44, 1.44, 0.8,  0.6,  1.32, 1.32, 1.32, 1.32, 0.72,
      0.48, 1.04, 1.04, 1.04, 1.04, 0.56, 0.28, 0.6,  0.6,  0.6,  0.6,  0.32};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,  8.3555555556,   10.3986111111,  11.1688888889,
      14.1111111111, 15.0772222222,  16.7222222222,  17.6883333333,
      14.1847222222, 14.955,         11.8413888889,  12.455,
      13.7986111111, 14.5688888889,  18.1752777778,  19.1422222222,
      24.1377777778, 25.3505555556,  27.4155555556,  28.6283333333,
      22.9280555556, 23.895,         18.9447222222,  19.715,
      21.7352777778, 22.6622222222,  28.3119444444,  29.4755555556,
      37.1244444444, 38.5838888889,  41.0688888889,  42.5283333333,
      34.0313888889, 35.195,         27.9280555556,  28.855,
      30.8575,       31.68,          39.6475,        40.68,
      51.16,         52.455,         54.66,          55.955,
      44.7225,       45.755,         36.3525,        37.175,
      42.6075,       43.43,          54.3975,        55.43,
      69.66,         70.955,         73.16,          74.455,
      59.4725,       60.505,         48.1025,        48.925,
      61.0586111111, 61.9855555556,  77.6752777778,  78.8388888889,
      99.0377777778, 100.4972222222, 102.9822222222, 104.4416666667,
      83.3947222222, 84.5583333333,  67.2513888889,  68.1783333333,
      55.0019444444, 55.7722222222,  69.8986111111,  70.8655555556,
      89.0111111111, 90.2238888889,  92.2888888889,  93.5016666667,
      74.6513888889, 75.6183333333,  60.1480555556,  60.9183333333,
      47.0652777778, 47.6788888889,  59.7619444444,  60.5322222222,
      76.0244444444, 76.9905555556,  78.6355555556,  79.6016666667,
      63.5480555556, 64.3183333333,  51.1647222222,  51.7783333333};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.12, 0.16,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      1.12, 1.28, 2.56, 2.88, 2.56, 2.88, 2.56, 2.88, 2.56, 2.88, 1.44, 1.6,
      1.12, 1.28, 2.56, 2.88, 2.56, 2.88, 2.56, 2.88, 2.56, 2.88, 1.44, 1.6,
      1.08, 1.2,  2.4,  2.64, 2.4,  2.64, 2.4,  2.64, 2.4,  2.64, 1.32, 1.44,
      0.88, 0.96, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.04, 1.12,
      0.52, 0.56, 1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  0.6,  0.64};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      42.5436111111,  43.4705555556,  44.3975,        45.3244444444,
      55.4602777778,  56.6238888889,  57.7875,        58.9511111111,
      72.7894444444,  74.2488888889,  75.7083333333,  77.1677777778,
      80.6783333333,  82.1377777778,  83.5972222222,  85.0566666667,
      66.8991666667,  68.0627777778,  69.2263888889,  70.39,
      54.9291666667,  55.8561111111,  56.7830555556,  57.71,
      60.8925,        61.715,         62.5375,        63.36,
      78.2625,        79.295,         80.3275,        81.36,
      101.025,        102.32,         103.615,        104.91,
      108.025,        109.32,         110.615,        111.91,
      88.4125,        89.445,         90.4775,        91.51,
      71.8825,        72.705,         73.5275,        74.35,
      84.3925,        85.215,         86.0375,        86.86,
      107.7625,       108.795,        109.8275,       110.86,
      138.025,        139.32,         140.615,        141.91,
      145.025,        146.32,         147.615,        148.91,
      117.9125,       118.945,        119.9775,       121.01,
      95.3825,        96.205,         97.0275,        97.85,
      121.1902777778, 122.1172222222, 123.0441666667, 123.9711111111,
      154.1869444444, 155.3505555556, 156.5141666667, 157.6777777778,
      196.6161111111, 198.0755555556, 199.535,        200.9944444444,
      204.505,        205.9644444444, 207.4238888889, 208.8833333333,
      165.6258333333, 166.7894444444, 167.9530555556, 169.1166666667,
      133.5758333333, 134.5027777778, 135.4297222222, 136.3566666667,
      109.2336111111, 110.0038888889, 110.7741666667, 111.5444444444,
      138.8302777778, 139.7972222222, 140.7641666667, 141.7311111111,
      176.8094444444, 178.0222222222, 179.235,        180.4477777778,
      183.365,        184.5777777778, 185.7905555556, 187.0033333333,
      148.3358333333, 149.3027777778, 150.2697222222, 151.2366666667,
      119.5258333333, 120.2961111111, 121.0663888889, 121.8366666667,
      93.5169444444,  94.1305555556,  94.7441666667,  95.3577777778,
      118.7536111111, 119.5238888889, 120.2941666667, 121.0644444444,
      151.0827777778, 152.0488888889, 153.015,        153.9811111111,
      156.305,        157.2711111111, 158.2372222222, 159.2033333333,
      126.3258333333, 127.0961111111, 127.8663888889, 128.6366666667,
      101.7158333333, 102.3294444444, 102.9430555556, 103.5566666667};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48,
      0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48, 0.2,  0.24, 0.28, 0.32,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      1.08, 1.2,  1.32, 1.44, 2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36,
      2.64, 2.88, 3.12, 3.36, 2.64, 2.88, 3.12, 3.36, 1.56, 1.68, 1.8,  1.92,
      2.08, 2.24, 2.4,  2.56, 4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76,
      4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76, 2.72, 2.88, 3.04, 3.2,
      2.08, 2.24, 2.4,  2.56, 4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76,
      4.8,  5.12, 5.44, 5.76, 4.8,  5.12, 5.44, 5.76, 2.72, 2.88, 3.04, 3.2,
      2.04, 2.16, 2.28, 2.4,  4.56, 4.8,  5.04, 5.28, 4.56, 4.8,  5.04, 5.28,
      4.56, 4.8,  5.04, 5.28, 4.56, 4.8,  5.04, 5.28, 2.52, 2.64, 2.76, 2.88,
      1.68, 1.76, 1.84, 1.92, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16, 2.,   2.08, 2.16, 2.24,
      1.,   1.04, 1.08, 1.12, 2.16, 2.24, 2.32, 2.4,  2.16, 2.24, 2.32, 2.4,
      2.16, 2.24, 2.32, 2.4,  2.16, 2.24, 2.32, 2.4,  1.16, 1.2,  1.24, 1.28};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,  6.2236111111,  7.9169444444,  8.4516666667,  10.2669444444,
      8.8869444444,  7.3502777778,  8.2636111111,  10.8002777778, 13.5336111111,
      13.9516666667, 16.4836111111, 14.1436111111, 11.6069444444, 12.9369444444,
      16.7536111111, 20.8069444444, 20.9916666667, 24.3569444444, 20.7769444444,
      16.9602777778, 18.2291666667, 23.3391666667, 28.6591666667, 28.105,
      31.8091666667, 26.9091666667, 21.7991666667, 25.0833333333, 31.9433333333,
      39.0133333333, 37.73,         42.1633333333, 35.5133333333, 28.6533333333,
      35.8755555556, 45.5488888889, 55.4588888889, 53.2033333333, 59.0088888889,
      49.5722222222, 39.8988888889, 32.2988888889, 40.9722222222, 49.8422222222,
      47.7033333333, 52.7922222222, 44.3155555556, 35.6422222222, 27.6255555556,
      35.0188888889, 42.5688888889, 40.6633333333, 44.9188888889, 37.6822222222,
      30.2888888889};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.24, 0.24, 0.2,  0.12, 0.2,  0.48, 0.84, 0.84, 0.84,
      0.64, 0.36, 0.48, 1.08, 1.8,  1.8,  1.8,  1.32, 0.72, 0.88, 1.92, 3.12,
      3.12, 3.12, 2.24, 1.2,  0.88, 1.92, 3.12, 3.12, 3.12, 2.24, 1.2,  0.84,
      1.8,  2.88, 2.88, 2.88, 2.04, 1.08, 0.68, 1.44, 2.28, 2.28, 2.28, 1.6,
      0.84, 0.4,  0.84, 1.32, 1.32, 1.32, 0.92, 0.48};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,   9.3738888889,   11.6769444444, 12.4472222222,
      14.9069444444,  15.8338888889,  16.0416666667, 16.9033333333,
      19.6069444444,  20.5338888889,  17.0036111111, 17.7738888889,
      14.0869444444,  14.7005555556,  15.7569444444, 16.5272222222,
      20.6336111111,  21.6005555556,  25.9036111111, 27.0672222222,
      26.8216666667,  27.9033333333,  31.8036111111, 32.9672222222,
      27.3202777778,  28.2872222222,  22.4436111111, 23.2138888889,
      24.9469444444,  25.8738888889,  32.3436111111, 33.5072222222,
      40.2136111111,  41.6138888889,  40.6816666667, 41.9833333333,
      47.3136111111,  48.7138888889,  40.3902777778, 41.5538888889,
      32.9936111111,  33.9205555556,  35.6358333333, 36.4583333333,
      45.6458333333,  46.6783333333,  56.0758333333, 57.3183333333,
      55.055,         56.21,          62.3758333333, 63.6183333333,
      52.7858333333,  53.8183333333,  42.7758333333, 43.5983333333,
      49.3441666667,  50.1666666667,  62.8541666667, 63.8866666667,
      76.7841666667,  78.0266666667,  74.305,        75.46,
      83.0841666667,  84.3266666667,  69.9941666667, 71.0266666667,
      56.4841666667,  57.3066666667,  70.8241666667, 71.7511111111,
      89.9341666667,  91.0977777778,  109.5175,      110.9177777778,
      105.105,        106.4066666667, 116.6175,      118.0177777778,
      97.9808333333,  99.1444444444,  78.8708333333, 79.7977777778,
      63.8275,        64.5977777778,  80.9775,       81.9444444444,
      98.5208333333,  99.6844444444,  94.325,        95.4066666667,
      104.4208333333, 105.5844444444, 87.6641666667, 88.6311111111,
      70.5141666667,  71.2844444444,  54.6375,       55.2511111111,
      69.2675,        70.0377777778,  84.2108333333, 85.1377777778,
      80.465,         81.3266666667,  88.9108333333, 89.8377777778,
      74.5941666667,  75.3644444444,  59.9641666667, 60.5777777778};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.36, 0.48, 0.36, 0.48, 0.32, 0.4,
      0.2,  0.24, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68,
      1.12, 1.28, 0.64, 0.72, 0.84, 0.96, 1.92, 2.16, 3.24, 3.6,  3.24, 3.6,
      3.24, 3.6,  2.4,  2.64, 1.32, 1.44, 1.6,  1.76, 3.52, 3.84, 5.76, 6.24,
      5.76, 6.24, 5.76, 6.24, 4.16, 4.48, 2.24, 2.4,  1.6,  1.76, 3.52, 3.84,
      5.76, 6.24, 5.76, 6.24, 5.76, 6.24, 4.16, 4.48, 2.24, 2.4,  1.56, 1.68,
      3.36, 3.6,  5.4,  5.76, 5.4,  5.76, 5.4,  5.76, 3.84, 4.08, 2.04, 2.16,
      1.28, 1.36, 2.72, 2.88, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 3.04, 3.2,
      1.6,  1.68, 0.76, 0.8,  1.6,  1.68, 2.52, 2.64, 2.52, 2.64, 2.52, 2.64,
      1.76, 1.84, 0.92, 0.96};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      48.9669444444,  49.8938888889,  50.8208333333,  51.7477777778,
      63.5236111111,  64.6872222222,  65.8508333333,  67.0144444444,
      79.0269444444,  80.4272222222,  81.8275,        83.2277777778,
      80.0616666667,  81.3633333333,  82.665,         83.9666666667,
      93.2269444444,  94.6272222222,  96.0275,        97.4277777778,
      79.6169444444,  80.7805555556,  81.9441666667,  83.1077777778,
      65.0602777778,  65.9872222222,  66.9141666667,  67.8411111111,
      70.4491666667,  71.2716666667,  72.0941666667,  72.9166666667,
      90.2591666667,  91.2916666667,  92.3241666667,  93.3566666667,
      110.9091666667, 112.1516666667, 113.3941666667, 114.6366666667,
      108.955,        110.11,         111.265,        112.42,
      123.5091666667, 124.7516666667, 125.9941666667, 127.2366666667,
      104.5391666667, 105.5716666667, 106.6041666667, 107.6366666667,
      84.7291666667,  85.5516666667,  86.3741666667,  87.1966666667,
      97.8658333333,  98.6883333333,  99.5108333333,  100.3333333333,
      124.6758333333, 125.7083333333, 126.7408333333, 127.7733333333,
      152.3258333333, 153.5683333333, 154.8108333333, 156.0533333333,
      147.455,        148.61,         149.765,        150.92,
      164.9258333333, 166.1683333333, 167.4108333333, 168.6533333333,
      138.9558333333, 139.9883333333, 141.0208333333, 142.0533333333,
      112.1458333333, 112.9683333333, 113.7908333333, 114.6133333333,
      140.7213888889, 141.6483333333, 142.5752777778, 143.5022222222,
      178.7047222222, 179.8683333333, 181.0319444444, 182.1955555556,
      217.6347222222, 219.035,        220.4352777778, 221.8355555556,
      208.9083333333, 210.21,         211.5116666667, 212.8133333333,
      231.8347222222, 233.235,        234.6352777778, 236.0355555556,
      194.7980555556, 195.9616666667, 197.1252777778, 198.2888888889,
      156.8147222222, 157.7416666667, 158.6686111111, 159.5955555556,
      126.8847222222, 127.655,        128.4252777778, 129.1955555556,
      160.9880555556, 161.955,        162.9219444444, 163.8888888889,
      195.8780555556, 197.0416666667, 198.2052777778, 199.3688888889,
      187.5683333333, 188.65,         189.7316666667, 190.8133333333,
      207.6780555556, 208.8416666667, 210.0052777778, 211.1688888889,
      174.3613888889, 175.3283333333, 176.2952777778, 177.2622222222,
      140.2580555556, 141.0283333333, 141.7986111111, 142.5688888889,
      108.6613888889, 109.275,        109.8886111111, 110.5022222222,
      137.7647222222, 138.535,        139.3052777778, 140.0755555556,
      167.4947222222, 168.4216666667, 169.3486111111, 170.2755555556,
      160.0683333333, 160.93,         161.7916666667, 162.6533333333,
      176.8947222222, 177.8216666667, 178.7486111111, 179.6755555556,
      148.4180555556, 149.1883333333, 149.9586111111, 150.7288888889,
      119.3147222222, 119.9283333333, 120.5419444444, 121.1555555556};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  0.6,   0.72,  0.84,  0.96,  0.6,   0.72,  0.84,  0.96,
      0.56,  0.64,  0.72,  0.8,   0.36,  0.4,   0.44,  0.48,  0.56,  0.64,
      0.72,  0.8,   1.44,  1.6,   1.76,  1.92,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.08,  2.24,
      2.4,   2.56,  1.2,   1.28,  1.36,  1.44,  1.56,  1.68,  1.8,   1.92,
      3.6,   3.84,  4.08,  4.32,  6.12,  6.48,  6.84,  7.2,   6.12,  6.48,
      6.84,  7.2,   6.12,  6.48,  6.84,  7.2,   4.56,  4.8,   5.04,  5.28,
      2.52,  2.64,  2.76,  2.88,  3.04,  3.2,   3.36,  3.52,  6.72,  7.04,
      7.36,  7.68,  11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48,
      11.04, 11.52, 12.,   12.48, 8.,    8.32,  8.64,  8.96,  4.32,  4.48,
      4.64,  4.8,   3.04,  3.2,   3.36,  3.52,  6.72,  7.04,  7.36,  7.68,
      11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48, 11.04, 11.52,
      12.,   12.48, 8.,    8.32,  8.64,  8.96,  4.32,  4.48,  4.64,  4.8,
      3.,    3.12,  3.24,  3.36,  6.48,  6.72,  6.96,  7.2,   10.44, 10.8,
      11.16, 11.52, 10.44, 10.8,  11.16, 11.52, 10.44, 10.8,  11.16, 11.52,
      7.44,  7.68,  7.92,  8.16,  3.96,  4.08,  4.2,   4.32,  2.48,  2.56,
      2.64,  2.72,  5.28,  5.44,  5.6,   5.76,  8.4,   8.64,  8.88,  9.12,
      8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  5.92,  6.08,
      6.24,  6.4,   3.12,  3.2,   3.28,  3.36,  1.48,  1.52,  1.56,  1.6,
      3.12,  3.2,   3.28,  3.36,  4.92,  5.04,  5.16,  5.28,  4.92,  5.04,
      5.16,  5.28,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,  6.8627777778,  8.6861111111,  8.6716666667,  9.6508333333,
      11.9630555556, 10.2963888889, 8.4730555556,  9.2427777778,  12.0294444444,
      15.0127777778, 14.5316666667, 15.7608333333, 19.1263888889, 16.3397222222,
      13.3563888889, 14.5427777778, 18.7694444444, 23.2327777778, 22.0716666667,
      23.5508333333, 28.1830555556, 23.9563888889, 19.4930555556, 20.6183333333,
      26.3383333333, 32.2683333333, 29.925,        31.2375,       36.6608333333,
      30.9408333333, 25.0108333333, 28.4516666667, 36.1716666667, 44.1016666667,
      40.425,        41.7375,       48.4941666667, 40.7741666667, 32.8441666667,
      40.7583333333, 51.6783333333, 62.835,        57.2116666667, 58.6908333333,
      67.7852777778, 56.8652777778, 45.7086111111, 36.7116666667, 46.5116666667,
      56.5083333333, 51.3516666667, 52.5808333333, 60.6219444444, 50.8219444444,
      40.8252777778, 31.4116666667, 39.7716666667, 48.2883333333, 43.8116666667,
      44.7908333333, 51.5652777778, 43.2052777778, 34.6886111111};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.4,  0.4,  0.36, 0.28, 0.16, 0.24, 0.56, 0.96,
      1.44, 1.44, 1.2,  0.88, 0.48, 0.6,  1.32, 2.16, 3.12, 3.12, 2.52,
      1.8,  0.96, 1.12, 2.4,  3.84, 5.44, 5.44, 4.32, 3.04, 1.6,  1.12,
      2.4,  3.84, 5.44, 5.44, 4.32, 3.04, 1.6,  1.08, 2.28, 3.6,  5.04,
      5.04, 3.96, 2.76, 1.44, 0.88, 1.84, 2.88, 4.,   4.,   3.12, 2.16,
      1.12, 0.52, 1.08, 1.68, 2.32, 2.32, 1.8,  1.24, 0.64};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,   10.3922222222,  12.9552777778,  13.7255555556,
      16.4452777778,  17.3722222222,  16.5208333333,  17.3433333333,
      18.4791666667,  19.3016666667,  22.9991666667,  23.9261111111,
      19.8225,        20.5927777778,  16.3325,        16.9461111111,
      17.7152777778,  18.4855555556,  23.0919444444,  24.0588888889,
      28.8619444444,  30.0255555556,  28.0308333333,  29.0633333333,
      30.4891666667,  31.5216666667,  37.0891666667,  38.2527777778,
      31.7125,        32.6794444444,  25.9425,        26.7127777778,
      28.1586111111,  29.0855555556,  36.3752777778,  37.5388888889,
      45.0652777778,  46.4655555556,  42.9008333333,  44.1433333333,
      45.8591666667,  47.1016666667,  54.9658333333,  56.3661111111,
      46.7491666667,  47.9127777778,  38.0591666667,  38.9861111111,
      40.4141666667,  41.2366666667,  51.6441666667,  52.6766666667,
      63.2941666667,  64.5366666667,  58.7475,        59.85,
      61.3725,        62.475,         72.0791666667,  73.3216666667,
      60.8491666667,  61.8816666667,  49.1991666667,  50.0216666667,
      56.0808333333,  56.9033333333,  71.3108333333,  72.3433333333,
      86.9608333333,  88.2033333333,  79.7475,        80.85,
      82.3725,        83.475,         95.7458333333,  96.9883333333,
      80.5158333333,  81.5483333333,  64.8658333333,  65.6883333333,
      80.5897222222,  81.5166666667,  102.1930555556, 103.3566666667,
      124.2697222222, 125.67,         113.1808333333, 114.4233333333,
      116.1391666667, 117.3816666667, 134.1702777778, 135.5705555556,
      112.5669444444, 113.7305555556, 90.4902777778,  91.4172222222,
      72.6530555556,  73.4233333333,  92.0563888889,  93.0233333333,
      111.8530555556, 113.0166666667, 101.6708333333, 102.7033333333,
      104.1291666667, 105.1616666667, 120.0802777778, 121.2438888889,
      100.6769444444, 101.6438888889, 80.8802777778,  81.6505555556,
      62.2097222222,  62.8233333333,  78.7730555556,  79.5433333333,
      95.6497222222,  96.5766666667,  86.8008333333,  87.6233333333,
      88.7591666667,  89.5816666667,  102.2036111111, 103.1305555556,
      85.6402777778,  86.4105555556,  68.7636111111,  69.3772222222};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24, 0.36,  0.48,  0.64,  0.8,   0.64, 0.8,  0.6,
      0.72,  0.48,  0.56,  0.28, 0.32,  0.4,   0.48,  0.96,  1.12, 1.68, 1.92,
      2.56,  2.88,  2.56,  2.88, 2.16,  2.4,   1.6,   1.76,  0.88, 0.96, 1.08,
      1.2,   2.4,   2.64,  3.96, 4.32,  5.76,  6.24,  5.76,  6.24, 4.68, 5.04,
      3.36,  3.6,   1.8,   1.92, 2.08,  2.24,  4.48,  4.8,   7.2,  7.68, 10.24,
      10.88, 10.24, 10.88, 8.16, 8.64,  5.76,  6.08,  3.04,  3.2,  2.08, 2.24,
      4.48,  4.8,   7.2,   7.68, 10.24, 10.88, 10.24, 10.88, 8.16, 8.64, 5.76,
      6.08,  3.04,  3.2,   2.04, 2.16,  4.32,  4.56,  6.84,  7.2,  9.6,  10.08,
      9.6,   10.08, 7.56,  7.92, 5.28,  5.52,  2.76,  2.88,  1.68, 1.76, 3.52,
      3.68,  5.52,  5.76,  7.68, 8.,    7.68,  8.,    6.,    6.24, 4.16, 4.32,
      2.16,  2.24,  1.,    1.04, 2.08,  2.16,  3.24,  3.36,  4.48, 4.64, 4.48,
      4.64,  3.48,  3.6,   2.4,  2.48,  1.24,  1.28};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      55.3902777778,  56.3172222222,  57.2441666667,  58.1711111111,
      71.5869444444,  72.7505555556,  73.9141666667,  75.0777777778,
      88.7302777778,  90.1305555556,  91.5308333333,  92.9311111111,
      84.5591666667,  85.8016666667,  87.0441666667,  88.2866666667,
      90.4758333333,  91.7183333333,  92.9608333333,  94.2033333333,
      108.5313888889, 109.9316666667, 111.3319444444, 112.7322222222,
      92.3347222222,  93.4983333333,  94.6619444444,  95.8255555556,
      75.1913888889,  76.1183333333,  77.0452777778,  77.9722222222,
      80.0058333333,  80.8283333333,  81.6508333333,  82.4733333333,
      102.2558333333, 103.2883333333, 104.3208333333, 105.3533333333,
      125.3458333333, 126.5883333333, 127.8308333333, 129.0733333333,
      116.3925,       117.495,        118.5975,       119.7,
      121.6425,       122.745,        123.8475,       124.95,
      142.9158333333, 144.1583333333, 145.4008333333, 146.6433333333,
      120.6658333333, 121.6983333333, 122.7308333333, 123.7633333333,
      97.5758333333,  98.3983333333,  99.2208333333,  100.0433333333,
      111.3391666667, 112.1616666667, 112.9841666667, 113.8066666667,
      141.5891666667, 142.6216666667, 143.6541666667, 144.6866666667,
      172.6791666667, 173.9216666667, 175.1641666667, 176.4066666667,
      158.3925,       159.495,        160.5975,       161.7,
      163.6425,       164.745,        165.8475,       166.95,
      190.2491666667, 191.4916666667, 192.7341666667, 193.9766666667,
      159.9991666667, 161.0316666667, 162.0641666667, 163.0966666667,
      128.9091666667, 129.7316666667, 130.5541666667, 131.3766666667,
      160.2525,       161.1794444444, 162.1063888889, 163.0333333333,
      203.2225,       204.3861111111, 205.5497222222, 206.7133333333,
      247.1391666667, 248.5394444444, 249.9397222222, 251.34,
      225.1191666667, 226.3616666667, 227.6041666667, 228.8466666667,
      231.0358333333, 232.2783333333, 233.5208333333, 234.7633333333,
      266.9402777778, 268.3405555556, 269.7408333333, 271.1411111111,
      223.9702777778, 225.1338888889, 226.2975,       227.4611111111,
      180.0536111111, 180.9805555556, 181.9075,       182.8344444444,
      144.5358333333, 145.3061111111, 146.0763888889, 146.8466666667,
      183.1458333333, 184.1127777778, 185.0797222222, 186.0466666667,
      222.5425,       223.7061111111, 224.8697222222, 226.0333333333,
      202.3091666667, 203.3416666667, 204.3741666667, 205.4066666667,
      207.2258333333, 208.2583333333, 209.2908333333, 210.3233333333,
      238.9969444444, 240.1605555556, 241.3241666667, 242.4877777778,
      200.3869444444, 201.3538888889, 202.3208333333, 203.2877777778,
      160.9902777778, 161.7605555556, 162.5308333333, 163.3011111111,
      123.8058333333, 124.4194444444, 125.0330555556, 125.6466666667,
      156.7758333333, 157.5461111111, 158.3163888889, 159.0866666667,
      190.3725,       191.2994444444, 192.2263888889, 193.1533333333,
      172.7791666667, 173.6016666667, 174.4241666667, 175.2466666667,
      176.6958333333, 177.5183333333, 178.3408333333, 179.1633333333,
      203.4802777778, 204.4072222222, 205.3341666667, 206.2611111111,
      170.5102777778, 171.2805555556, 172.0508333333, 172.8211111111,
      136.9136111111, 137.5272222222, 138.1408333333, 138.7544444444};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID1x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.08,  1.2,   1.32,  1.44,  0.88,  0.96,  1.04,  1.12,  0.52,  0.56,
      0.6,   0.64,  0.72,  0.8,   0.88,  0.96,  1.76,  1.92,  2.08,  2.24,
      3.12,  3.36,  3.6,   3.84,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  4.08,  4.32,  4.56,  4.8,   3.04,  3.2,   3.36,  3.52,
      1.68,  1.76,  1.84,  1.92,  2.04,  2.16,  2.28,  2.4,   4.56,  4.8,
      5.04,  5.28,  7.56,  7.92,  8.28,  8.64,  11.04, 11.52, 12.,   12.48,
      11.04, 11.52, 12.,   12.48, 9.,    9.36,  9.72,  10.08, 6.48,  6.72,
      6.96,  7.2,   3.48,  3.6,   3.72,  3.84,  4.,    4.16,  4.32,  4.48,
      8.64,  8.96,  9.28,  9.6,   13.92, 14.4,  14.88, 15.36, 19.84, 20.48,
      21.12, 21.76, 19.84, 20.48, 21.12, 21.76, 15.84, 16.32, 16.8,  17.28,
      11.2,  11.52, 11.84, 12.16, 5.92,  6.08,  6.24,  6.4,   4.,    4.16,
      4.32,  4.48,  8.64,  8.96,  9.28,  9.6,   13.92, 14.4,  14.88, 15.36,
      19.84, 20.48, 21.12, 21.76, 19.84, 20.48, 21.12, 21.76, 15.84, 16.32,
      16.8,  17.28, 11.2,  11.52, 11.84, 12.16, 5.92,  6.08,  6.24,  6.4,
      3.96,  4.08,  4.2,   4.32,  8.4,   8.64,  8.88,  9.12,  13.32, 13.68,
      14.04, 14.4,  18.72, 19.2,  19.68, 20.16, 18.72, 19.2,  19.68, 20.16,
      14.76, 15.12, 15.48, 15.84, 10.32, 10.56, 10.8,  11.04, 5.4,   5.52,
      5.64,  5.76,  3.28,  3.36,  3.44,  3.52,  6.88,  7.04,  7.2,   7.36,
      10.8,  11.04, 11.28, 11.52, 15.04, 15.36, 15.68, 16.,   15.04, 15.36,
      15.68, 16.,   11.76, 12.,   12.24, 12.48, 8.16,  8.32,  8.48,  8.64,
      4.24,  4.32,  4.4,   4.48,  1.96,  2.,    2.04,  2.08,  4.08,  4.16,
      4.24,  4.32,  6.36,  6.48,  6.6,   6.72,  8.8,   8.96,  9.12,  9.28,
      8.8,   8.96,  9.12,  9.28,  6.84,  6.96,  7.08,  7.2,   4.72,  4.8,
      4.88,  4.96,  2.44,  2.48,  2.52,  2.56};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,   5.5844444444,   7.5386111111,   8.8441666667,
      7.4775,         6.2275,         7.2844444444,   9.5711111111,
      12.6752777778,  14.3141666667,  11.9475,        9.8575,
      12.3427777778,  16.0294444444,  20.9461111111,  23.0016666667,
      19.01,          15.57,          20.1761111111,  25.8627777778,
      33.2794444444,  35.335,         28.8433333333,  23.4033333333,
      18.6427777778,  23.8294444444,  30.5586111111,  32.1975,
      26.2058333333,  21.2158333333,  16.4761111111,  21.0227777778,
      26.9019444444,  28.2075,        22.9158333333,  18.5258333333,
      26.2677777778,  33.3144444444,  42.3186111111,  43.6241666667,
      35.2075,        28.3175,        35.0144444444,  44.3811111111,
      56.3352777778,  57.9741666667,  46.7575,        37.5875,
      47.1227777778,  59.6894444444,  75.7061111111,  77.7616666667,
      62.67,          50.35,          54.9561111111,  69.5227777778,
      88.0394444444,  90.095,         72.5033333333,  58.1833333333,
      46.3727777778,  58.6394444444,  74.2186111111,  75.8575,
      61.0158333333,  48.9458333333,  38.5661111111,  48.7527777778,
      61.6819444444,  62.9875,        50.6458333333,  40.6158333333,
      48.3577777778,  61.0444444444,  77.0986111111,  78.4041666667,
      62.9375,        50.4075,        62.7444444444,  79.1911111111,
      99.9952777778,  101.6341666667, 81.5675,        65.3175,
      81.9027777778,  103.3494444444, 130.4661111111, 132.5216666667,
      106.33,         85.13,          89.7361111111,  113.1827777778,
      142.7994444444, 144.855,        116.1633333333, 92.9633333333,
      74.1027777778,  93.4494444444,  117.8786111111, 119.5175,
      95.8258333333,  76.6758333333,  60.6561111111,  76.4827777778,
      96.4619444444,  97.7675,        78.3758333333,  62.7058333333};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.16, 0.4,  0.4,  0.4,  0.4,  0.24, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.16, 0.4,  0.4,  0.4,  0.4,  0.24, 0.12, 0.28, 0.28, 0.28, 0.28, 0.16,
      0.2,  0.44, 0.44, 0.44, 0.44, 0.24, 0.48, 1.04, 1.04, 1.04, 1.04, 0.56,
      0.48, 1.04, 1.04, 1.04, 1.04, 0.56, 0.48, 1.04, 1.04, 1.04, 1.04, 0.56,
      0.48, 1.04, 1.04, 1.04, 1.04, 0.56, 0.28, 0.6,  0.6,  0.6,  0.6,  0.32,
      0.36, 0.76, 0.76, 0.76, 0.76, 0.4,  0.8,  1.68, 1.68, 1.68, 1.68, 0.88,
      0.8,  1.68, 1.68, 1.68, 1.68, 0.88, 0.8,  1.68, 1.68, 1.68, 1.68, 0.88,
      0.8,  1.68, 1.68, 1.68, 1.68, 0.88, 0.44, 0.92, 0.92, 0.92, 0.92, 0.48};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,   8.3555555556,   10.3986111111,  11.1688888889,
      14.1111111111,  15.0772222222,  16.7222222222,  17.6883333333,
      14.1847222222,  14.955,         11.8413888889,  12.455,
      13.7986111111,  14.5688888889,  18.1752777778,  19.1422222222,
      24.1377777778,  25.3505555556,  27.4155555556,  28.6283333333,
      22.9280555556,  23.895,         18.9447222222,  19.715,
      23.7194444444,  24.6855555556,  30.8461111111,  32.0588888889,
      40.3711111111,  41.8922222222,  44.4822222222,  46.0033333333,
      36.8072222222,  38.02,          30.1738888889,  31.14,
      39.3861111111,  40.3522222222,  50.5127777778,  51.7255555556,
      65.0377777778,  66.5588888889,  69.1488888889,  70.67,
      56.4738888889,  57.6866666667,  45.8405555556,  46.8066666667,
      36.5152777778,  37.2855555556,  46.6919444444,  47.6588888889,
      59.9044444444,  61.1172222222,  63.1822222222,  64.395,
      51.4447222222,  52.4116666667,  41.6613888889,  42.4316666667,
      32.3386111111,  32.9522222222,  41.2752777778,  42.0455555556,
      52.8377777778,  53.8038888889,  55.4488888889,  56.415,
      45.0613888889,  45.8316666667,  36.4380555556,  37.0516666667,
      51.9219444444,  52.5355555556,  65.8586111111,  66.6288888889,
      83.6711111111,  84.6372222222,  86.2822222222,  87.2483333333,
      69.6447222222,  70.415,         56.0213888889,  56.635,
      69.2586111111,  70.0288888889,  87.7952777778,  88.7622222222,
      111.4577777778, 112.6705555556, 114.7355555556, 115.9483333333,
      92.5480555556,  93.515,         74.4047222222,  75.175,
      93.2794444444,  94.2455555556,  118.1661111111, 119.3788888889,
      149.8911111111, 151.4122222222, 154.0022222222, 155.5233333333,
      124.1272222222, 125.34,         99.7338888889,  100.7,
      108.9461111111, 109.9122222222, 137.8327777778, 139.0455555556,
      174.5577777778, 176.0788888889, 178.6688888889, 180.19,
      143.7938888889, 145.0066666667, 115.4005555556, 116.3666666667,
      91.9752777778,  92.7455555556,  116.3119444444, 117.2788888889,
      147.2244444444, 148.4372222222, 150.5022222222, 151.715,
      121.0647222222, 122.0316666667, 97.1213888889,  97.8916666667,
      76.5186111111,  77.1322222222,  96.7352777778,  97.5055555556,
      122.3977777778, 123.3638888889, 125.0088888889, 125.975,
      100.5213888889, 101.2916666667, 80.6180555556,  81.2316666667,
      96.1019444444,  96.7155555556,  121.3186111111, 122.0888888889,
      153.2311111111, 154.1972222222, 155.8422222222, 156.8083333333,
      125.1047222222, 125.875,        100.2013888889, 100.815,
      124.7186111111, 125.4888888889, 157.4152777778, 158.3822222222,
      198.7777777778, 199.9905555556, 202.0555555556, 203.2683333333,
      162.1680555556, 163.135,        129.8647222222, 130.635,
      162.8394444444, 163.8055555556, 205.4861111111, 206.6988888889,
      259.4111111111, 260.9322222222, 263.5222222222, 265.0433333333,
      211.4472222222, 212.66,         169.2938888889, 170.26,
      178.5061111111, 179.4722222222, 225.1527777778, 226.3655555556,
      284.0777777778, 285.5988888889, 288.1888888889, 289.71,
      231.1138888889, 232.3266666667, 184.9605555556, 185.9266666667,
      147.4352777778, 148.2055555556, 185.9319444444, 186.8988888889,
      234.5444444444, 235.7572222222, 237.8222222222, 239.035,
      190.6847222222, 191.6516666667, 152.5813888889, 153.3516666667,
      120.6986111111, 121.3122222222, 152.1952777778, 152.9655555556,
      191.9577777778, 192.9238888889, 194.5688888889, 195.535,
      155.9813888889, 156.7516666667, 124.7980555556, 125.4116666667};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.12, 0.16,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.2,  0.24, 0.48, 0.56, 0.48, 0.56, 0.48, 0.56, 0.48, 0.56, 0.28, 0.32,
      0.36, 0.4,  0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.44, 0.48,
      0.88, 0.96, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.04, 1.12,
      0.88, 0.96, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.04, 1.12,
      0.88, 0.96, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.04, 1.12,
      0.88, 0.96, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.92, 2.08, 1.04, 1.12,
      0.52, 0.56, 1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  0.6,  0.64,
      0.68, 0.72, 1.44, 1.52, 1.44, 1.52, 1.44, 1.52, 1.44, 1.52, 0.76, 0.8,
      1.52, 1.6,  3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 1.68, 1.76,
      1.52, 1.6,  3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 1.68, 1.76,
      1.52, 1.6,  3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 1.68, 1.76,
      1.52, 1.6,  3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 1.68, 1.76,
      0.84, 0.88, 1.76, 1.84, 1.76, 1.84, 1.76, 1.84, 1.76, 1.84, 0.92, 0.96};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      46.4727777778,  47.4388888889,  48.405,         49.3711111111,
      60.4794444444,  61.6922222222,  62.905,         64.1177777778,
      79.2211111111,  80.7422222222,  82.2633333333,  83.7844444444,
      87.4433333333,  88.9644444444,  90.4855555556,  92.0066666667,
      72.4016666667,  73.6144444444,  74.8272222222,  76.04,
      59.3816666667,  60.3477777778,  61.3138888889,  62.28,
      77.8061111111,  78.7722222222,  79.7383333333,  80.7044444444,
      99.8127777778,  101.0255555556, 102.2383333333, 103.4511111111,
      128.5544444444, 130.0755555556, 131.5966666667, 133.1177777778,
      136.7766666667, 138.2977777778, 139.8188888889, 141.34,
      111.735,        112.9477777778, 114.1605555556, 115.3733333333,
      90.715,         91.6811111111,  92.6472222222,  93.6133333333,
      72.2602777778,  73.0305555556,  73.8008333333,  74.5711111111,
      92.4169444444,  93.3838888889,  94.3508333333,  95.3177777778,
      118.5961111111, 119.8088888889, 121.0216666667, 122.2344444444,
      125.1516666667, 126.3644444444, 127.5772222222, 128.79,
      101.9225,       102.8894444444, 103.8563888889, 104.8233333333,
      82.5525,        83.3227777778,  84.0930555556,  84.8633333333,
      64.0636111111,  64.6772222222,  65.2908333333,  65.9044444444,
      81.7802777778,  82.5505555556,  83.3208333333,  84.0911111111,
      104.7094444444, 105.6755555556, 106.6416666667, 107.6077777778,
      109.9316666667, 110.8977777778, 111.8638888889, 112.83,
      89.3525,        90.1227777778,  90.8930555556,  91.6633333333,
      72.2625,        72.8761111111,  73.4897222222,  74.1033333333,
      103.2302777778, 103.8438888889, 104.4575,       105.0711111111,
      130.9469444444, 131.7172222222, 132.4875,       133.2577777778,
      166.3761111111, 167.3422222222, 168.3083333333, 169.2744444444,
      171.5983333333, 172.5644444444, 173.5305555556, 174.4966666667,
      138.5191666667, 139.2894444444, 140.0597222222, 140.83,
      111.4291666667, 112.0427777778, 112.6563888889, 113.27,
      137.7469444444, 138.5172222222, 139.2875,       140.0577777778,
      174.6236111111, 175.5905555556, 176.5575,       177.5244444444,
      221.7027777778, 222.9155555556, 224.1283333333, 225.3411111111,
      228.2583333333, 229.4711111111, 230.6838888889, 231.8966666667,
      184.1291666667, 185.0961111111, 186.0630555556, 187.03,
      148.0391666667, 148.8094444444, 149.5797222222, 150.35,
      185.5927777778, 186.5588888889, 187.525,        188.4911111111,
      235.1194444444, 236.3322222222, 237.545,        238.7577777778,
      298.2611111111, 299.7822222222, 301.3033333333, 302.8244444444,
      306.4833333333, 308.0044444444, 309.5255555556, 311.0466666667,
      247.0416666667, 248.2544444444, 249.4672222222, 250.68,
      198.5016666667, 199.4677777778, 200.4338888889, 201.4,
      216.9261111111, 217.8922222222, 218.8583333333, 219.8244444444,
      274.4527777778, 275.6655555556, 276.8783333333, 278.0911111111,
      347.5944444444, 349.1155555556, 350.6366666667, 352.1577777778,
      355.8166666667, 357.3377777778, 358.8588888889, 360.38,
      286.375,        287.5877777778, 288.8005555556, 290.0133333333,
      229.835,        230.8011111111, 231.7672222222, 232.7333333333,
      183.1802777778, 183.9505555556, 184.7208333333, 185.4911111111,
      231.6569444444, 232.6238888889, 233.5908333333, 234.5577777778,
      293.2361111111, 294.4488888889, 295.6616666667, 296.8744444444,
      299.7916666667, 301.0044444444, 302.2172222222, 303.43,
      241.1625,       242.1294444444, 243.0963888889, 244.0633333333,
      193.4725,       194.2427777778, 195.0130555556, 195.7833333333,
      152.4236111111, 153.0372222222, 153.6508333333, 154.2644444444,
      192.7002777778, 193.4705555556, 194.2408333333, 195.0111111111,
      243.8294444444, 244.7955555556, 245.7616666667, 246.7277777778,
      249.0516666667, 250.0177777778, 250.9838888889, 251.95,
      200.2725,       201.0427777778, 201.8130555556, 202.5833333333,
      160.6225,       161.2361111111, 161.8497222222, 162.4633333333,
      191.5902777778, 192.2038888889, 192.8175,       193.4311111111,
      241.8669444444, 242.6372222222, 243.4075,       244.1777777778,
      305.4961111111, 306.4622222222, 307.4283333333, 308.3944444444,
      310.7183333333, 311.6844444444, 312.6505555556, 313.6166666667,
      249.4391666667, 250.2094444444, 250.9797222222, 251.75,
      199.7891666667, 200.4027777778, 201.0163888889, 201.63,
      248.6669444444, 249.4372222222, 250.2075,       250.9777777778,
      313.8636111111, 314.8305555556, 315.7975,       316.7644444444,
      396.3427777778, 397.5555555556, 398.7683333333, 399.9811111111,
      402.8983333333, 404.1111111111, 405.3238888889, 406.5366666667,
      323.3691666667, 324.3361111111, 325.3030555556, 326.27,
      258.9591666667, 259.7294444444, 260.4997222222, 261.27,
      324.7127777778, 325.6788888889, 326.645,        327.6111111111,
      409.7594444444, 410.9722222222, 412.185,        413.3977777778,
      517.3011111111, 518.8222222222, 520.3433333333, 521.8644444444,
      525.5233333333, 527.0444444444, 528.5655555556, 530.0866666667,
      421.6816666667, 422.8944444444, 424.1072222222, 425.32,
      337.6216666667, 338.5877777778, 339.5538888889, 340.52,
      356.0461111111, 357.0122222222, 357.9783333333, 358.9444444444,
      449.0927777778, 450.3055555556, 451.5183333333, 452.7311111111,
      566.6344444444, 568.1555555556, 569.6766666667, 571.1977777778,
      574.8566666667, 576.3777777778, 577.8988888889, 579.42,
      461.015,        462.2277777778, 463.4405555556, 464.6533333333,
      368.955,        369.9211111111, 370.8872222222, 371.8533333333,
      294.1002777778, 294.8705555556, 295.6408333333, 296.4111111111,
      370.8969444444, 371.8638888889, 372.8308333333, 373.7977777778,
      467.8761111111, 469.0888888889, 470.3016666667, 471.5144444444,
      474.4316666667, 475.6444444444, 476.8572222222, 478.07,
      380.4025,       381.3694444444, 382.3363888889, 383.3033333333,
      304.3925,       305.1627777778, 305.9330555556, 306.7033333333,
      240.7836111111, 241.3972222222, 242.0108333333, 242.6244444444,
      303.6202777778, 304.3905555556, 305.1608333333, 305.9311111111,
      382.9494444444, 383.9155555556, 384.8816666667, 385.8477777778,
      388.1716666667, 389.1377777778, 390.1038888889, 391.07,
      311.1925,       311.9627777778, 312.7330555556, 313.5033333333,
      248.9825,       249.5961111111, 250.2097222222, 250.8233333333};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.12, 0.16, 0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48,
      0.24, 0.32, 0.4,  0.48, 0.24, 0.32, 0.4,  0.48, 0.2,  0.24, 0.28, 0.32,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.4,  0.48, 0.56, 0.64, 1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,
      1.12, 1.28, 1.44, 1.6,  1.12, 1.28, 1.44, 1.6,  0.72, 0.8,  0.88, 0.96,
      0.36, 0.4,  0.44, 0.48, 0.88, 0.96, 1.04, 1.12, 0.88, 0.96, 1.04, 1.12,
      0.88, 0.96, 1.04, 1.12, 0.88, 0.96, 1.04, 1.12, 0.52, 0.56, 0.6,  0.64,
      0.68, 0.72, 0.76, 0.8,  1.52, 1.6,  1.68, 1.76, 1.52, 1.6,  1.68, 1.76,
      1.52, 1.6,  1.68, 1.76, 1.52, 1.6,  1.68, 1.76, 0.84, 0.88, 0.92, 0.96,
      1.68, 1.76, 1.84, 1.92, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16, 2.,   2.08, 2.16, 2.24,
      1.68, 1.76, 1.84, 1.92, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16, 2.,   2.08, 2.16, 2.24,
      1.68, 1.76, 1.84, 1.92, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16, 2.,   2.08, 2.16, 2.24,
      1.68, 1.76, 1.84, 1.92, 3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16,
      3.68, 3.84, 4.,   4.16, 3.68, 3.84, 4.,   4.16, 2.,   2.08, 2.16, 2.24,
      1.,   1.04, 1.08, 1.12, 2.16, 2.24, 2.32, 2.4,  2.16, 2.24, 2.32, 2.4,
      2.16, 2.24, 2.32, 2.4,  2.16, 2.24, 2.32, 2.4,  1.16, 1.2,  1.24, 1.28,
      1.32, 1.36, 1.4,  1.44, 2.8,  2.88, 2.96, 3.04, 2.8,  2.88, 2.96, 3.04,
      2.8,  2.88, 2.96, 3.04, 2.8,  2.88, 2.96, 3.04, 1.48, 1.52, 1.56, 1.6,
      2.96, 3.04, 3.12, 3.2,  6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72,
      6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72, 3.28, 3.36, 3.44, 3.52,
      2.96, 3.04, 3.12, 3.2,  6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72,
      6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72, 3.28, 3.36, 3.44, 3.52,
      2.96, 3.04, 3.12, 3.2,  6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72,
      6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72, 3.28, 3.36, 3.44, 3.52,
      2.96, 3.04, 3.12, 3.2,  6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72,
      6.24, 6.4,  6.56, 6.72, 6.24, 6.4,  6.56, 6.72, 3.28, 3.36, 3.44, 3.52,
      1.64, 1.68, 1.72, 1.76, 3.44, 3.52, 3.6,  3.68, 3.44, 3.52, 3.6,  3.68,
      3.44, 3.52, 3.6,  3.68, 3.44, 3.52, 3.6,  3.68, 1.8,  1.84, 1.88, 1.92};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,   6.2236111111,   7.9169444444,   8.4516666667,
      10.2669444444,  8.8869444444,   7.3502777778,   8.2636111111,
      10.8002777778,  13.5336111111,  13.9516666667,  16.4836111111,
      14.1436111111,  11.6069444444,  14.1052777778,  18.2419444444,
      22.6252777778,  22.7516666667,  26.3252777778,  22.4352777778,
      18.2986111111,  23.2441666667,  29.7141666667,  36.4308333333,
      35.585,         40.1308333333,  33.9075,        27.4375,
      21.515,         27.435,         33.5516666667,  32.56,
      36.5016666667,  30.7783333333,  24.8583333333,  19.035,
      24.235,         29.5916666667,  28.6,           31.9416666667,
      26.8983333333,  21.6983333333,  30.4586111111,  38.5752777778,
      46.8486111111,  44.6416666667,  49.1986111111,  41.2386111111,
      33.1219444444,  40.6152777778,  51.4119444444,  62.4052777778,
      59.3816666667,  65.3552777778,  54.7552777778,  43.9586111111,
      54.6819444444,  69.1786111111,  83.9219444444,  79.7316666667,
      87.6219444444,  73.3719444444,  58.8752777778,  63.8208333333,
      80.6508333333,  97.7275,        92.565,         101.4275,
      84.8441666667,  68.0141666667,  53.8666666667,  68.0466666667,
      82.4233333333,  77.99,          85.3733333333,  71.39,
      57.21,          44.8066666667,  56.5866666667,  68.5233333333,
      64.79,          70.8733333333,  59.25,          47.47,
      56.2302777778,  70.9269444444,  85.7802777778,  80.8316666667,
      88.1302777778,  73.5902777778,  58.8936111111,  72.9669444444,
      92.0236111111,  111.2769444444, 104.8116666667, 114.2269444444,
      95.3669444444,  76.3102777778,  95.2586111111,  120.1152777778,
      145.2186111111, 136.7116666667, 148.9186111111, 124.3086111111,
      99.4519444444,  104.3975,       131.5875,       159.0241666667,
      149.545,        162.7241666667, 135.7808333333, 108.5908333333,
      86.2183333333,  108.6583333333, 131.295,        123.42,
      134.245,        112.0016666667, 89.5616666667,  70.5783333333,
      88.9383333333,  107.455,        100.98,         109.805,
      91.6016666667,  73.2416666667};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.24, 0.24, 0.2,  0.12, 0.2,  0.48, 0.84, 0.84, 0.84,
      0.64, 0.36, 0.2,  0.48, 0.84, 0.84, 0.84, 0.64, 0.36, 0.2,  0.48, 0.84,
      0.84, 0.84, 0.64, 0.36, 0.2,  0.48, 0.84, 0.84, 0.84, 0.64, 0.36, 0.16,
      0.36, 0.6,  0.6,  0.6,  0.44, 0.24, 0.28, 0.6,  0.96, 0.96, 0.96, 0.68,
      0.36, 0.68, 1.44, 2.28, 2.28, 2.28, 1.6,  0.84, 0.68, 1.44, 2.28, 2.28,
      2.28, 1.6,  0.84, 0.68, 1.44, 2.28, 2.28, 2.28, 1.6,  0.84, 0.68, 1.44,
      2.28, 2.28, 2.28, 1.6,  0.84, 0.4,  0.84, 1.32, 1.32, 1.32, 0.92, 0.48,
      0.52, 1.08, 1.68, 1.68, 1.68, 1.16, 0.6,  1.16, 2.4,  3.72, 3.72, 3.72,
      2.56, 1.32, 1.16, 2.4,  3.72, 3.72, 3.72, 2.56, 1.32, 1.16, 2.4,  3.72,
      3.72, 3.72, 2.56, 1.32, 1.16, 2.4,  3.72, 3.72, 3.72, 2.56, 1.32, 0.64,
      1.32, 2.04, 2.04, 2.04, 1.4,  0.72};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,   9.3738888889,   11.6769444444,  12.4472222222,
      14.9069444444,  15.8338888889,  16.0416666667,  16.9033333333,
      19.6069444444,  20.5338888889,  17.0036111111,  17.7738888889,
      14.0869444444,  14.7005555556,  15.7569444444,  16.5272222222,
      20.6336111111,  21.6005555556,  25.9036111111,  27.0672222222,
      26.8216666667,  27.9033333333,  31.8036111111,  32.9672222222,
      27.3202777778,  28.2872222222,  22.4436111111,  23.2138888889,
      27.2444444444,  28.2105555556,  35.2711111111,  36.4838888889,
      43.7911111111,  45.2505555556,  44.1466666667,  45.5033333333,
      51.1911111111,  52.6505555556,  43.6577777778,  44.8705555556,
      35.6311111111,  36.5972222222,  45.5222222222,  46.4883333333,
      58.2155555556,  59.4283333333,  71.4022222222,  72.8616666667,
      69.8133333333,  71.17,          78.8022222222,  80.2616666667,
      66.6022222222,  67.815,         53.9088888889,  54.875,
      42.2597222222,  43.03,          53.9030555556,  54.87,
      65.9397222222,  67.1033333333,  64.0383333333,  65.12,
      71.8397222222,  73.0033333333,  60.5897222222,  61.5566666667,
      48.9463888889,  49.7166666667,  37.4563888889,  38.07,
      47.6997222222,  48.47,          58.2563888889,  59.1833333333,
      56.3383333333,  57.2,           62.9563888889,  63.8833333333,
      53.0263888889,  53.7966666667,  42.7830555556,  43.3966666667,
      60.3036111111,  60.9172222222,  76.3802777778,  77.1505555556,
      92.7702777778,  93.6972222222,  88.4216666667,  89.2833333333,
      97.4702777778,  98.3972222222,  81.7069444444,  82.4772222222,
      65.6302777778,  66.2438888889,  80.4602777778,  81.2305555556,
      101.8569444444, 102.8238888889, 123.6469444444, 124.8105555556,
      117.6816666667, 118.7633333333, 129.5469444444, 130.7105555556,
      108.5436111111, 109.5105555556, 87.1469444444,  87.9172222222,
      108.3977777778, 109.3638888889, 137.1444444444, 138.3572222222,
      166.3844444444, 167.8438888889, 158.1066666667, 159.4633333333,
      173.7844444444, 175.2438888889, 145.5311111111, 146.7438888889,
      116.7844444444, 117.7505555556, 126.6755555556, 127.6416666667,
      160.0888888889, 161.3016666667, 193.9955555556, 195.455,
      183.7733333333, 185.13,         201.3955555556, 202.855,
      168.4755555556, 169.6883333333, 135.0622222222, 136.0283333333,
      106.9630555556, 107.7333333333, 135.1263888889, 136.0933333333,
      163.6830555556, 164.8466666667, 154.8983333333, 155.98,
      169.5830555556, 170.7466666667, 141.8130555556, 142.78,
      113.6497222222, 114.42,         88.9997222222,  89.6133333333,
      112.4030555556, 113.1733333333, 136.1197222222, 137.0466666667,
      128.7183333333, 129.58,         140.8197222222, 141.7466666667,
      117.7297222222, 118.5,          94.3263888889,  94.94,
      111.8469444444, 112.4605555556, 141.0836111111, 141.8538888889,
      170.6336111111, 171.5605555556, 160.8016666667, 161.6633333333,
      175.3336111111, 176.2605555556, 146.4102777778, 147.1805555556,
      117.1736111111, 117.7872222222, 145.1636111111, 145.9338888889,
      183.0802777778, 184.0472222222, 221.3902777778, 222.5538888889,
      208.5416666667, 209.6233333333, 227.2902777778, 228.4538888889,
      189.7669444444, 190.7338888889, 151.8502777778, 152.6205555556,
      189.5511111111, 190.5172222222, 239.0177777778, 240.2305555556,
      288.9777777778, 290.4372222222, 272.0666666667, 273.4233333333,
      296.3777777778, 297.8372222222, 247.4044444444, 248.6172222222,
      197.9377777778, 198.9038888889, 207.8288888889, 208.795,
      261.9622222222, 263.175,        316.5888888889, 318.0483333333,
      297.7333333333, 299.09,         323.9888888889, 325.4483333333,
      270.3488888889, 271.5616666667, 216.2155555556, 217.1816666667,
      171.6663888889, 172.4366666667, 216.3497222222, 217.3166666667,
      261.4263888889, 262.59,         245.7583333333, 246.84,
      267.3263888889, 268.49,         223.0363888889, 224.0033333333,
      178.3530555556, 179.1233333333, 140.5430555556, 141.1566666667,
      177.1063888889, 177.8766666667, 213.9830555556, 214.91,
      201.0983333333, 201.96,         218.6830555556, 219.61,
      182.4330555556, 183.2033333333, 145.8697222222, 146.4833333333};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.36, 0.48, 0.36, 0.48, 0.36, 0.48, 0.32, 0.4,
      0.2,  0.24, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68,
      1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68, 1.44, 1.68,
      1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96, 1.44, 1.68,
      1.44, 1.68, 1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.32, 0.4,  0.8,  0.96,
      1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.12, 1.28, 0.64, 0.72, 0.28, 0.32,
      0.64, 0.72, 1.08, 1.2,  1.08, 1.2,  1.08, 1.2,  0.8,  0.88, 0.44, 0.48,
      0.52, 0.56, 1.12, 1.2,  1.8,  1.92, 1.8,  1.92, 1.8,  1.92, 1.28, 1.36,
      0.68, 0.72, 1.28, 1.36, 2.72, 2.88, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56,
      3.04, 3.2,  1.6,  1.68, 1.28, 1.36, 2.72, 2.88, 4.32, 4.56, 4.32, 4.56,
      4.32, 4.56, 3.04, 3.2,  1.6,  1.68, 1.28, 1.36, 2.72, 2.88, 4.32, 4.56,
      4.32, 4.56, 4.32, 4.56, 3.04, 3.2,  1.6,  1.68, 1.28, 1.36, 2.72, 2.88,
      4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 3.04, 3.2,  1.6,  1.68, 0.76, 0.8,
      1.6,  1.68, 2.52, 2.64, 2.52, 2.64, 2.52, 2.64, 1.76, 1.84, 0.92, 0.96,
      1.,   1.04, 2.08, 2.16, 3.24, 3.36, 3.24, 3.36, 3.24, 3.36, 2.24, 2.32,
      1.16, 1.2,  2.24, 2.32, 4.64, 4.8,  7.2,  7.44, 7.2,  7.44, 7.2,  7.44,
      4.96, 5.12, 2.56, 2.64, 2.24, 2.32, 4.64, 4.8,  7.2,  7.44, 7.2,  7.44,
      7.2,  7.44, 4.96, 5.12, 2.56, 2.64, 2.24, 2.32, 4.64, 4.8,  7.2,  7.44,
      7.2,  7.44, 7.2,  7.44, 4.96, 5.12, 2.56, 2.64, 2.24, 2.32, 4.64, 4.8,
      7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 4.96, 5.12, 2.56, 2.64, 1.24, 1.28,
      2.56, 2.64, 3.96, 4.08, 3.96, 4.08, 3.96, 4.08, 2.72, 2.8,  1.4,  1.44};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      53.5227777778,  54.4888888889,  55.455,         56.4211111111,
      69.3294444444,  70.5422222222,  71.755,         72.9677777778,
      86.1227777778,  87.5822222222,  89.0416666667,  90.5011111111,
      86.9366666667,  88.2933333333,  89.65,          91.0066666667,
      100.9227777778, 102.3822222222, 103.8416666667, 105.3011111111,
      86.1027777778,  87.3155555556,  88.5283333333,  89.7411111111,
      70.2961111111,  71.2622222222,  72.2283333333,  73.1944444444,
      90.0783333333,  91.0444444444,  92.0105555556,  92.9766666667,
      115.2183333333, 116.4311111111, 117.6438888889, 118.8566666667,
      141.345,        142.8044444444, 144.2638888889, 145.7233333333,
      138.27,         139.6266666667, 140.9833333333, 142.34,
      156.145,        157.6044444444, 159.0638888889, 160.5233333333,
      131.9916666667, 133.2044444444, 134.4172222222, 135.63,
      106.8516666667, 107.8177777778, 108.7838888889, 109.75,
      83.7491666667,  84.5194444444,  85.2897222222,  86.06,
      106.8391666667, 107.8061111111, 108.7730555556, 109.74,
      130.7158333333, 131.8794444444, 133.0430555556, 134.2066666667,
      126.995,        128.0766666667, 129.1583333333, 130.24,
      142.5158333333, 143.6794444444, 144.8430555556, 146.0066666667,
      120.2125,       121.1794444444, 122.1463888889, 123.1133333333,
      97.1225,        97.8927777778,  98.6630555556,  99.4333333333,
      74.2991666667,  74.9127777778,  75.5263888889,  76.14,
      94.6291666667,  95.3994444444,  96.1697222222,  96.94,
      115.5858333333, 116.5127777778, 117.4397222222, 118.3666666667,
      111.815,        112.6766666667, 113.5383333333, 114.4,
      124.9858333333, 125.9127777778, 126.8397222222, 127.7666666667,
      105.2825,       106.0527777778, 106.8230555556, 107.5933333333,
      84.9525,        85.5661111111,  86.1797222222,  86.7933333333,
      119.9936111111, 120.6072222222, 121.2208333333, 121.8344444444,
      151.9902777778, 152.7605555556, 153.5308333333, 154.3011111111,
      184.6136111111, 185.5405555556, 186.4675,       187.3944444444,
      175.9816666667, 176.8433333333, 177.705,        178.5666666667,
      194.0136111111, 194.9405555556, 195.8675,       196.7944444444,
      162.6436111111, 163.4138888889, 164.1841666667, 164.9544444444,
      130.6469444444, 131.2605555556, 131.8741666667, 132.4877777778,
      160.1502777778, 160.9205555556, 161.6908333333, 162.4611111111,
      202.7469444444, 203.7138888889, 204.6808333333, 205.6477777778,
      246.1302777778, 247.2938888889, 248.4575,       249.6211111111,
      234.2816666667, 235.3633333333, 236.445,        237.5266666667,
      257.9302777778, 259.0938888889, 260.2575,       261.4211111111,
      216.1202777778, 217.0872222222, 218.0541666667, 219.0211111111,
      173.5236111111, 174.2938888889, 175.0641666667, 175.8344444444,
      215.8294444444, 216.7955555556, 217.7616666667, 218.7277777778,
      273.0761111111, 274.2888888889, 275.5016666667, 276.7144444444,
      331.3094444444, 332.7688888889, 334.2283333333, 335.6877777778,
      314.8566666667, 316.2133333333, 317.57,         318.9266666667,
      346.1094444444, 347.5688888889, 349.0283333333, 350.4877777778,
      289.8494444444, 291.0622222222, 292.275,        293.4877777778,
      232.6027777778, 233.5688888889, 234.535,        235.5011111111,
      252.385,        253.3511111111, 254.3172222222, 255.2833333333,
      318.965,        320.1777777778, 321.3905555556, 322.6033333333,
      386.5316666667, 387.9911111111, 389.4505555556, 390.91,
      366.19,         367.5466666667, 368.9033333333, 370.26,
      401.3316666667, 402.7911111111, 404.2505555556, 405.71,
      335.7383333333, 336.9511111111, 338.1638888889, 339.3766666667,
      269.1583333333, 270.1244444444, 271.0905555556, 272.0566666667,
      213.1558333333, 213.9261111111, 214.6963888889, 215.4666666667,
      269.2858333333, 270.2527777778, 271.2197222222, 272.1866666667,
      326.2025,       327.3661111111, 328.5297222222, 329.6933333333,
      308.715,        309.7966666667, 310.8783333333, 311.96,
      338.0025,       339.1661111111, 340.3297222222, 341.4933333333,
      282.6591666667, 283.6261111111, 284.5930555556, 285.56,
      226.5291666667, 227.2994444444, 228.0697222222, 228.84,
      177.3858333333, 177.9994444444, 178.6130555556, 179.2266666667,
      224.0358333333, 224.8061111111, 225.5763888889, 226.3466666667,
      271.3125,       272.2394444444, 273.1663888889, 274.0933333333,
      256.575,        257.4366666667, 258.2983333333, 259.16,
      280.7125,       281.6394444444, 282.5663888889, 283.4933333333,
      234.6891666667, 235.4594444444, 236.2297222222, 237.,
      188.0391666667, 188.6527777778, 189.2663888889, 189.88,
      223.0802777778, 223.6938888889, 224.3075,       224.9211111111,
      281.3969444444, 282.1672222222, 282.9375,       283.7077777778,
      340.3402777778, 341.2672222222, 342.1941666667, 343.1211111111,
      320.7416666667, 321.6033333333, 322.465,        323.3266666667,
      349.7402777778, 350.6672222222, 351.5941666667, 352.5211111111,
      292.0502777778, 292.8205555556, 293.5908333333, 294.3611111111,
      233.7336111111, 234.3472222222, 234.9608333333, 235.5744444444,
      289.5569444444, 290.3272222222, 291.0975,       291.8677777778,
      365.1936111111, 366.1605555556, 367.1275,       368.0944444444,
      441.6169444444, 442.7805555556, 443.9441666667, 445.1077777778,
      416.0016666667, 417.0833333333, 418.165,        419.2466666667,
      453.4169444444, 454.5805555556, 455.7441666667, 456.9077777778,
      378.5669444444, 379.5338888889, 380.5008333333, 381.4677777778,
      302.9302777778, 303.7005555556, 304.4708333333, 305.2411111111,
      378.1361111111, 379.1022222222, 380.0683333333, 381.0344444444,
      476.8227777778, 478.0355555556, 479.2483333333, 480.4611111111,
      576.4961111111, 577.9555555556, 579.415,        580.8744444444,
      542.7766666667, 544.1333333333, 545.49,         546.8466666667,
      591.2961111111, 592.7555555556, 594.215,        595.6744444444,
      493.5961111111, 494.8088888889, 496.0216666667, 497.2344444444,
      394.9094444444, 395.8755555556, 396.8416666667, 397.8077777778,
      414.6916666667, 415.6577777778, 416.6238888889, 417.59,
      522.7116666667, 523.9244444444, 525.1372222222, 526.35,
      631.7183333333, 633.1777777778, 634.6372222222, 636.0966666667,
      594.11,         595.4666666667, 596.8233333333, 598.18,
      646.5183333333, 647.9777777778, 649.4372222222, 650.8966666667,
      539.485,        540.6977777778, 541.9105555556, 543.1233333333,
      431.465,        432.4311111111, 433.3972222222, 434.3633333333,
      342.5625,       343.3327777778, 344.1030555556, 344.8733333333,
      431.7325,       432.6994444444, 433.6663888889, 434.6333333333,
      521.6891666667, 522.8527777778, 524.0163888889, 525.18,
      490.435,        491.5166666667, 492.5983333333, 493.68,
      533.4891666667, 534.6527777778, 535.8163888889, 536.98,
      445.1058333333, 446.0727777778, 447.0397222222, 448.0066666667,
      355.9358333333, 356.7061111111, 357.4763888889, 358.2466666667,
      280.4725,       281.0861111111, 281.6997222222, 282.3133333333,
      353.4425,       354.2127777778, 354.9830555556, 355.7533333333,
      427.0391666667, 427.9661111111, 428.8930555556, 429.82,
      401.335,        402.1966666667, 403.0583333333, 403.92,
      436.4391666667, 437.3661111111, 438.2930555556, 439.22,
      364.0958333333, 364.8661111111, 365.6363888889, 366.4066666667,
      291.1258333333, 291.7394444444, 292.3530555556, 292.9666666667};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  0.6,   0.72,  0.84,  0.96,  0.6,   0.72,  0.84,  0.96,
      0.56,  0.64,  0.72,  0.8,   0.36,  0.4,   0.44,  0.48,  0.56,  0.64,
      0.72,  0.8,   1.44,  1.6,   1.76,  1.92,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.08,  2.24,
      2.4,   2.56,  1.2,   1.28,  1.36,  1.44,  0.56,  0.64,  0.72,  0.8,
      1.44,  1.6,   1.76,  1.92,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,
      3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.08,  2.24,  2.4,   2.56,
      1.2,   1.28,  1.36,  1.44,  0.56,  0.64,  0.72,  0.8,   1.44,  1.6,
      1.76,  1.92,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.08,  2.24,  2.4,   2.56,  1.2,   1.28,
      1.36,  1.44,  0.56,  0.64,  0.72,  0.8,   1.44,  1.6,   1.76,  1.92,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,
      3.12,  3.36,  2.08,  2.24,  2.4,   2.56,  1.2,   1.28,  1.36,  1.44,
      0.52,  0.56,  0.6,   0.64,  1.2,   1.28,  1.36,  1.44,  2.04,  2.16,
      2.28,  2.4,   2.04,  2.16,  2.28,  2.4,   2.04,  2.16,  2.28,  2.4,
      1.52,  1.6,   1.68,  1.76,  0.84,  0.88,  0.92,  0.96,  1.,    1.04,
      1.08,  1.12,  2.16,  2.24,  2.32,  2.4,   3.48,  3.6,   3.72,  3.84,
      3.48,  3.6,   3.72,  3.84,  3.48,  3.6,   3.72,  3.84,  2.48,  2.56,
      2.64,  2.72,  1.32,  1.36,  1.4,   1.44,  2.48,  2.56,  2.64,  2.72,
      5.28,  5.44,  5.6,   5.76,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,
      8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  5.92,  6.08,  6.24,  6.4,
      3.12,  3.2,   3.28,  3.36,  2.48,  2.56,  2.64,  2.72,  5.28,  5.44,
      5.6,   5.76,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,
      8.4,   8.64,  8.88,  9.12,  5.92,  6.08,  6.24,  6.4,   3.12,  3.2,
      3.28,  3.36,  2.48,  2.56,  2.64,  2.72,  5.28,  5.44,  5.6,   5.76,
      8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,
      8.88,  9.12,  5.92,  6.08,  6.24,  6.4,   3.12,  3.2,   3.28,  3.36,
      2.48,  2.56,  2.64,  2.72,  5.28,  5.44,  5.6,   5.76,  8.4,   8.64,
      8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,
      5.92,  6.08,  6.24,  6.4,   3.12,  3.2,   3.28,  3.36,  1.48,  1.52,
      1.56,  1.6,   3.12,  3.2,   3.28,  3.36,  4.92,  5.04,  5.16,  5.28,
      4.92,  5.04,  5.16,  5.28,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,
      3.6,   3.68,  1.8,   1.84,  1.88,  1.92,  1.96,  2.,    2.04,  2.08,
      4.08,  4.16,  4.24,  4.32,  6.36,  6.48,  6.6,   6.72,  6.36,  6.48,
      6.6,   6.72,  6.36,  6.48,  6.6,   6.72,  4.4,   4.48,  4.56,  4.64,
      2.28,  2.32,  2.36,  2.4,   4.4,   4.48,  4.56,  4.64,  9.12,  9.28,
      9.44,  9.6,   14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88,
      14.16, 14.4,  14.64, 14.88, 9.76,  9.92,  10.08, 10.24, 5.04,  5.12,
      5.2,   5.28,  4.4,   4.48,  4.56,  4.64,  9.12,  9.28,  9.44,  9.6,
      14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 14.16, 14.4,
      14.64, 14.88, 9.76,  9.92,  10.08, 10.24, 5.04,  5.12,  5.2,   5.28,
      4.4,   4.48,  4.56,  4.64,  9.12,  9.28,  9.44,  9.6,   14.16, 14.4,
      14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88,
      9.76,  9.92,  10.08, 10.24, 5.04,  5.12,  5.2,   5.28,  4.4,   4.48,
      4.56,  4.64,  9.12,  9.28,  9.44,  9.6,   14.16, 14.4,  14.64, 14.88,
      14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 9.76,  9.92,
      10.08, 10.24, 5.04,  5.12,  5.2,   5.28,  2.44,  2.48,  2.52,  2.56,
      5.04,  5.12,  5.2,   5.28,  7.8,   7.92,  8.04,  8.16,  7.8,   7.92,
      8.04,  8.16,  7.8,   7.92,  8.04,  8.16,  5.36,  5.44,  5.52,  5.6,
      2.76,  2.8,   2.84,  2.88};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,   6.8627777778,   8.6861111111,   8.6716666667,
      9.6508333333,   11.9630555556,  10.2963888889,  8.4730555556,
      9.2427777778,   12.0294444444,  15.0127777778,  14.5316666667,
      15.7608333333,  19.1263888889,  16.3397222222,  13.3563888889,
      15.8677777778,  20.4544444444,  25.2877777778,  23.9566666667,
      25.4983333333,  30.4472222222,  25.8605555556,  21.0272222222,
      26.3122222222,  33.5655555556,  41.0655555556,  37.9566666667,
      39.4983333333,  46.225,         38.9716666667,  31.4716666667,
      24.3872222222,  31.0405555556,  37.8905555556,  34.8316666667,
      36.0608333333,  42.0041666667,  35.3508333333,  28.5008333333,
      21.5938888889,  27.4472222222,  33.4572222222,  30.6516666667,
      31.6308333333,  36.7341666667,  30.8808333333,  24.8708333333,
      34.6494444444,  43.8361111111,  53.1794444444,  48.1516666667,
      49.1308333333,  56.4563888889,  47.2697222222,  37.9263888889,
      46.2161111111,  58.4427777778,  70.8661111111,  64.0916666667,
      65.3208333333,  74.9797222222,  62.7530555556,  50.3297222222,
      62.2411111111,  78.6677777778,  95.3411111111,  86.1166666667,
      87.6583333333,  100.5005555556, 84.0738888889,  67.4005555556,
      72.6855555556,  91.7788888889,  111.1188888889, 100.1166666667,
      101.6583333333, 116.2783333333, 97.185,         77.845,
      61.3605555556,  77.4538888889,  93.7438888889,  84.3916666667,
      85.6208333333,  97.8575,        81.7641666667,  65.4741666667,
      51.0472222222,  64.4205555556,  77.9505555556,  70.1316666667,
      71.1108333333,  81.2275,        67.8541666667,  54.3241666667,
      64.1027777778,  80.8094444444,  97.6727777778,  87.6316666667,
      88.6108333333,  100.9497222222, 84.2430555556,  67.3797222222,
      83.1894444444,  104.8561111111, 126.7194444444, 113.6516666667,
      114.8808333333, 130.8330555556, 109.1663888889, 87.3030555556,
      108.6144444444, 136.8811111111, 165.3944444444, 148.2766666667,
      149.8183333333, 170.5538888889, 142.2872222222, 113.7738888889,
      119.0588888889, 149.9922222222, 181.1722222222, 162.2766666667,
      163.8183333333, 186.3316666667, 155.3983333333, 124.2183333333,
      98.3338888889,  123.8672222222, 149.5972222222, 133.9516666667,
      135.1808333333, 153.7108333333, 128.1775,       102.4475,
      80.5005555556,  101.3938888889, 122.4438888889, 109.6116666667,
      110.5908333333, 125.7208333333, 104.8275,       83.7775,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.4,  0.4,  0.36, 0.28, 0.16, 0.24, 0.56, 0.96, 1.44,
      1.44, 1.2,  0.88, 0.48, 0.24, 0.56, 0.96, 1.44, 1.44, 1.2,  0.88, 0.48,
      0.24, 0.56, 0.96, 1.44, 1.44, 1.2,  0.88, 0.48, 0.24, 0.56, 0.96, 1.44,
      1.44, 1.2,  0.88, 0.48, 0.2,  0.44, 0.72, 1.04, 1.04, 0.84, 0.6,  0.32,
      0.36, 0.76, 1.2,  1.68, 1.68, 1.32, 0.92, 0.48, 0.88, 1.84, 2.88, 4.,
      4.,   3.12, 2.16, 1.12, 0.88, 1.84, 2.88, 4.,   4.,   3.12, 2.16, 1.12,
      0.88, 1.84, 2.88, 4.,   4.,   3.12, 2.16, 1.12, 0.88, 1.84, 2.88, 4.,
      4.,   3.12, 2.16, 1.12, 0.52, 1.08, 1.68, 2.32, 2.32, 1.8,  1.24, 0.64,
      0.68, 1.4,  2.16, 2.96, 2.96, 2.28, 1.56, 0.8,  1.52, 3.12, 4.8,  6.56,
      6.56, 5.04, 3.44, 1.76, 1.52, 3.12, 4.8,  6.56, 6.56, 5.04, 3.44, 1.76,
      1.52, 3.12, 4.8,  6.56, 6.56, 5.04, 3.44, 1.76, 1.52, 3.12, 4.8,  6.56,
      6.56, 5.04, 3.44, 1.76, 0.84, 1.72, 2.64, 3.6,  3.6,  2.76, 1.88, 0.96};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,   10.3922222222,  12.9552777778,  13.7255555556,
      16.4452777778,  17.3722222222,  16.5208333333,  17.3433333333,
      18.4791666667,  19.3016666667,  22.9991666667,  23.9261111111,
      19.8225,        20.5927777778,  16.3325,        16.9461111111,
      17.7152777778,  18.4855555556,  23.0919444444,  24.0588888889,
      28.8619444444,  30.0255555556,  28.0308333333,  29.0633333333,
      30.4891666667,  31.5216666667,  37.0891666667,  38.2527777778,
      31.7125,        32.6794444444,  25.9425,        26.7127777778,
      30.7694444444,  31.7355555556,  39.6961111111,  40.9088888889,
      49.1161111111,  50.5755555556,  46.6183333333,  47.9133333333,
      49.7016666667,  50.9966666667,  59.435,         60.8944444444,
      50.5083333333,  51.7211111111,  41.0883333333,  42.0544444444,
      51.6583333333,  52.6244444444,  65.9183333333,  67.1311111111,
      80.6716666667,  82.1311111111,  74.6183333333,  75.9133333333,
      77.7016666667,  78.9966666667,  90.9905555556,  92.45,
      76.7305555556,  77.9433333333,  61.9772222222,  62.9433333333,
      48.0041666667,  48.7744444444,  61.1141666667,  62.0811111111,
      74.6175,        75.7811111111,  68.6308333333,  69.6633333333,
      71.0891666667,  72.1216666667,  82.8447222222,  84.0083333333,
      69.7347222222,  70.7016666667,  56.2313888889,  57.0016666667,
      42.5741666667,  43.1877777778,  54.1241666667,  54.8944444444,
      65.9875,        66.9144444444,  60.4808333333,  61.3033333333,
      62.4391666667,  63.2616666667,  72.5413888889,  73.4683333333,
      60.9913888889,  61.7616666667,  49.1280555556,  49.7416666667,
      68.6852777778,  69.2988888889,  86.9019444444,  87.6722222222,
      105.4319444444, 106.3588888889, 95.4808333333,  96.3033333333,
      97.4391666667,  98.2616666667,  111.9858333333, 112.9127777778,
      93.7691666667,  94.5394444444,  75.2391666667,  75.8527777778,
      91.6619444444,  92.4322222222,  115.9186111111, 116.8855555556,
      140.5686111111, 141.7322222222, 127.1508333333, 128.1833333333,
      129.6091666667, 130.6416666667, 148.7958333333, 149.9594444444,
      124.5391666667, 125.5061111111, 99.8891666667,  100.6594444444,
      123.5161111111, 124.4822222222, 156.1227777778, 157.3355555556,
      189.2227777778, 190.6822222222, 170.9383333333, 172.2333333333,
      174.0216666667, 175.3166666667, 199.5416666667, 201.0011111111,
      166.935,        168.1477777778, 133.835,        134.8011111111,
      144.405,        145.3711111111, 182.345,        183.5577777778,
      220.7783333333, 222.2377777778, 198.9383333333, 200.2333333333,
      202.0216666667, 203.3166666667, 231.0972222222, 232.5566666667,
      193.1572222222, 194.37,         154.7238888889, 155.69,
      121.9508333333, 122.7211111111, 153.9408333333, 154.9077777778,
      186.3241666667, 187.4877777778, 167.7508333333, 168.7833333333,
      170.2091666667, 171.2416666667, 194.5513888889, 195.715,
      162.5613888889, 163.5283333333, 130.1780555556, 130.9483333333,
      101.4808333333, 102.0944444444, 128.0708333333, 128.8411111111,
      154.9741666667, 155.9011111111, 139.4408333333, 140.2633333333,
      141.3991666667, 142.2216666667, 161.5280555556, 162.455,
      134.9380555556, 135.7083333333, 108.0347222222, 108.6483333333,
      127.5919444444, 128.2055555556, 160.8486111111, 161.6188888889,
      194.4186111111, 195.3455555556, 174.4408333333, 175.2633333333,
      176.3991666667, 177.2216666667, 200.9725,       201.8994444444,
      167.7158333333, 168.4861111111, 134.1458333333, 134.7594444444,
      165.6086111111, 166.3788888889, 208.7452777778, 209.7122222222,
      252.2752777778, 253.4388888889, 226.2708333333, 227.3033333333,
      228.7291666667, 229.7616666667, 260.5025,       261.6661111111,
      217.3658333333, 218.3327777778, 173.8358333333, 174.6061111111,
      216.2627777778, 217.2288888889, 272.5494444444, 273.7622222222,
      329.3294444444, 330.7888888889, 295.2583333333, 296.5533333333,
      298.3416666667, 299.6366666667, 339.6483333333, 341.1077777778,
      283.3616666667, 284.5744444444, 226.5816666667, 227.5477777778,
      237.1516666667, 238.1177777778, 298.7716666667, 299.9844444444,
      360.885,        362.3444444444, 323.2583333333, 324.5533333333,
      326.3416666667, 327.6366666667, 371.2038888889, 372.6633333333,
      309.5838888889, 310.7966666667, 247.4705555556, 248.4366666667,
      195.8975,       196.6677777778, 246.7675,       247.7344444444,
      298.0308333333, 299.1944444444, 266.8708333333, 267.9033333333,
      269.3291666667, 270.3616666667, 306.2580555556, 307.4216666667,
      255.3880555556, 256.355,        204.1247222222, 204.895,
      160.3875,       161.0011111111, 202.0175,       202.7877777778,
      243.9608333333, 244.8877777778, 218.4008333333, 219.2233333333,
      220.3591666667, 221.1816666667, 250.5147222222, 251.4416666667,
      208.8847222222, 209.655,        166.9413888889, 167.555,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08,  0.16, 0.24,  0.36, 0.48,  0.64, 0.8,   0.64, 0.8,
      0.6,  0.72,  0.48, 0.56,  0.28, 0.32,  0.4,  0.48,  0.96, 1.12,
      1.68, 1.92,  2.56, 2.88,  2.56, 2.88,  2.16, 2.4,   1.6,  1.76,
      0.88, 0.96,  0.4,  0.48,  0.96, 1.12,  1.68, 1.92,  2.56, 2.88,
      2.56, 2.88,  2.16, 2.4,   1.6,  1.76,  0.88, 0.96,  0.4,  0.48,
      0.96, 1.12,  1.68, 1.92,  2.56, 2.88,  2.56, 2.88,  2.16, 2.4,
      1.6,  1.76,  0.88, 0.96,  0.4,  0.48,  0.96, 1.12,  1.68, 1.92,
      2.56, 2.88,  2.56, 2.88,  2.16, 2.4,   1.6,  1.76,  0.88, 0.96,
      0.36, 0.4,   0.8,  0.88,  1.32, 1.44,  1.92, 2.08,  1.92, 2.08,
      1.56, 1.68,  1.12, 1.2,   0.6,  0.64,  0.68, 0.72,  1.44, 1.52,
      2.28, 2.4,   3.2,  3.36,  3.2,  3.36,  2.52, 2.64,  1.76, 1.84,
      0.92, 0.96,  1.68, 1.76,  3.52, 3.68,  5.52, 5.76,  7.68, 8.,
      7.68, 8.,    6.,   6.24,  4.16, 4.32,  2.16, 2.24,  1.68, 1.76,
      3.52, 3.68,  5.52, 5.76,  7.68, 8.,    7.68, 8.,    6.,   6.24,
      4.16, 4.32,  2.16, 2.24,  1.68, 1.76,  3.52, 3.68,  5.52, 5.76,
      7.68, 8.,    7.68, 8.,    6.,   6.24,  4.16, 4.32,  2.16, 2.24,
      1.68, 1.76,  3.52, 3.68,  5.52, 5.76,  7.68, 8.,    7.68, 8.,
      6.,   6.24,  4.16, 4.32,  2.16, 2.24,  1.,   1.04,  2.08, 2.16,
      3.24, 3.36,  4.48, 4.64,  4.48, 4.64,  3.48, 3.6,   2.4,  2.48,
      1.24, 1.28,  1.32, 1.36,  2.72, 2.8,   4.2,  4.32,  5.76, 5.92,
      5.76, 5.92,  4.44, 4.56,  3.04, 3.12,  1.56, 1.6,   2.96, 3.04,
      6.08, 6.24,  9.36, 9.6,   12.8, 13.12, 12.8, 13.12, 9.84, 10.08,
      6.72, 6.88,  3.44, 3.52,  2.96, 3.04,  6.08, 6.24,  9.36, 9.6,
      12.8, 13.12, 12.8, 13.12, 9.84, 10.08, 6.72, 6.88,  3.44, 3.52,
      2.96, 3.04,  6.08, 6.24,  9.36, 9.6,   12.8, 13.12, 12.8, 13.12,
      9.84, 10.08, 6.72, 6.88,  3.44, 3.52,  2.96, 3.04,  6.08, 6.24,
      9.36, 9.6,   12.8, 13.12, 12.8, 13.12, 9.84, 10.08, 6.72, 6.88,
      3.44, 3.52,  1.64, 1.68,  3.36, 3.44,  5.16, 5.28,  7.04, 7.2,
      7.04, 7.2,   5.4,  5.52,  3.68, 3.76,  1.88, 1.92};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      60.5727777778,  61.5388888889,  62.505,         63.4711111111,
      78.1794444444,  79.3922222222,  80.605,         81.8177777778,
      96.7727777778,  98.2322222222,  99.6916666667,  101.1511111111,
      91.9416666667,  93.2366666667,  94.5316666667,  95.8266666667,
      98.1083333333,  99.4033333333,  100.6983333333, 101.9933333333,
      117.4105555556, 118.87,         120.3294444444, 121.7888888889,
      99.8038888889,  101.0166666667, 102.2294444444, 103.4422222222,
      81.2105555556,  82.1766666667,  83.1427777778,  84.1088888889,
      102.3505555556, 103.3166666667, 104.2827777778, 105.2488888889,
      130.6238888889, 131.8366666667, 133.0494444444, 134.2622222222,
      159.8838888889, 161.3433333333, 162.8027777778, 164.2622222222,
      147.9416666667, 149.2366666667, 150.5316666667, 151.8266666667,
      154.1083333333, 155.4033333333, 156.6983333333, 157.9933333333,
      180.5216666667, 181.9811111111, 183.4405555556, 184.9,
      152.2483333333, 153.4611111111, 154.6738888889, 155.8866666667,
      122.9883333333, 123.9544444444, 124.9205555556, 125.8866666667,
      95.2380555556,  96.0083333333,  96.7786111111,  97.5488888889,
      121.2613888889, 122.2283333333, 123.1952777778, 124.1622222222,
      148.0713888889, 149.235,        150.3986111111, 151.5622222222,
      136.2291666667, 137.2616666667, 138.2941666667, 139.3266666667,
      141.1458333333, 142.1783333333, 143.2108333333, 144.2433333333,
      164.5258333333, 165.6894444444, 166.8530555556, 168.0166666667,
      138.5025,       139.4694444444, 140.4363888889, 141.4033333333,
      111.6925,       112.4627777778, 113.2330555556, 114.0033333333,
      84.5347222222,  85.1483333333,  85.7619444444,  86.3755555556,
      107.4780555556, 108.2483333333, 109.0186111111, 109.7888888889,
      131.0480555556, 131.975,        132.9019444444, 133.8288888889,
      120.1391666667, 120.9616666667, 121.7841666667, 122.6066666667,
      124.0558333333, 124.8783333333, 125.7008333333, 126.5233333333,
      144.1558333333, 145.0827777778, 146.0097222222, 146.9366666667,
      121.2125,       121.9827777778, 122.7530555556, 123.5233333333,
      97.6425,        98.2561111111,  98.8697222222,  99.4833333333,
      136.7569444444, 137.3705555556, 137.9841666667, 138.5977777778,
      173.0336111111, 173.8038888889, 174.5741666667, 175.3444444444,
      209.9369444444, 210.8638888889, 211.7908333333, 212.7177777778,
      190.1391666667, 190.9616666667, 191.7841666667, 192.6066666667,
      194.0558333333, 194.8783333333, 195.7008333333, 196.5233333333,
      223.0447222222, 223.9716666667, 224.8986111111, 225.8255555556,
      186.7680555556, 187.5383333333, 188.3086111111, 189.0788888889,
      149.8647222222, 150.4783333333, 151.0919444444, 151.7055555556,
      182.5536111111, 183.3238888889, 184.0941666667, 184.8644444444,
      230.8702777778, 231.8372222222, 232.8041666667, 233.7711111111,
      279.9736111111, 281.1372222222, 282.3008333333, 283.4644444444,
      253.2691666667, 254.3016666667, 255.3341666667, 256.3666666667,
      258.1858333333, 259.2183333333, 260.2508333333, 261.2833333333,
      296.4280555556, 297.5916666667, 298.7552777778, 299.9188888889,
      248.1113888889, 249.0783333333, 250.0452777778, 251.0122222222,
      199.0080555556, 199.7783333333, 200.5486111111, 201.3188888889,
      246.0661111111, 247.0322222222, 247.9983333333, 248.9644444444,
      311.0327777778, 312.2455555556, 313.4583333333, 314.6711111111,
      376.9861111111, 378.4455555556, 379.905,        381.3644444444,
      340.5816666667, 341.8766666667, 343.1716666667, 344.4666666667,
      346.7483333333, 348.0433333333, 349.3383333333, 350.6333333333,
      397.6238888889, 399.0833333333, 400.5427777778, 402.0022222222,
      332.6572222222, 333.87,         335.0827777778, 336.2955555556,
      266.7038888889, 267.67,         268.6361111111, 269.6022222222,
      287.8438888889, 288.81,         289.7761111111, 290.7422222222,
      363.4772222222, 364.69,         365.9027777778, 367.1155555556,
      440.0972222222, 441.5566666667, 443.0161111111, 444.4755555556,
      396.5816666667, 397.8766666667, 399.1716666667, 400.4666666667,
      402.7483333333, 404.0433333333, 405.3383333333, 406.6333333333,
      460.735,        462.1944444444, 463.6538888889, 465.1133333333,
      385.1016666667, 386.3144444444, 387.5272222222, 388.74,
      308.4816666667, 309.4477777778, 310.4138888889, 311.38,
      243.1313888889, 243.9016666667, 244.6719444444, 245.4422222222,
      306.9147222222, 307.8816666667, 308.8486111111, 309.8155555556,
      371.4847222222, 372.6483333333, 373.8119444444, 374.9755555556,
      334.4691666667, 335.5016666667, 336.5341666667, 337.5666666667,
      339.3858333333, 340.4183333333, 341.4508333333, 342.4833333333,
      387.9391666667, 389.1027777778, 390.2663888889, 391.43,
      324.1558333333, 325.1227777778, 326.0897222222, 327.0566666667,
      259.5858333333, 260.3561111111, 261.1263888889, 261.8966666667,
      202.3480555556, 202.9616666667, 203.5752777778, 204.1888888889,
      255.3713888889, 256.1416666667, 256.9119444444, 257.6822222222,
      309.0213888889, 309.9483333333, 310.8752777778, 311.8022222222,
      278.0591666667, 278.8816666667, 279.7041666667, 280.5266666667,
      281.9758333333, 282.7983333333, 283.6208333333, 284.4433333333,
      322.1291666667, 323.0561111111, 323.9830555556, 324.91,
      269.1058333333, 269.8761111111, 270.6463888889, 271.4166666667,
      215.4558333333, 216.0694444444, 216.6830555556, 217.2966666667,
      254.5702777778, 255.1838888889, 255.7975,       256.4111111111,
      320.9269444444, 321.6972222222, 322.4675,       323.2377777778,
      387.9102777778, 388.8372222222, 389.7641666667, 390.6911111111,
      348.0591666667, 348.8816666667, 349.7041666667, 350.5266666667,
      351.9758333333, 352.7983333333, 353.6208333333, 354.4433333333,
      401.0180555556, 401.945,        402.8719444444, 403.7988888889,
      334.6613888889, 335.4316666667, 336.2019444444, 336.9722222222,
      267.6780555556, 268.2916666667, 268.9052777778, 269.5188888889,
      330.4469444444, 331.2172222222, 331.9875,       332.7577777778,
      416.5236111111, 417.4905555556, 418.4575,       419.4244444444,
      503.3869444444, 504.5505555556, 505.7141666667, 506.8777777778,
      451.5091666667, 452.5416666667, 453.5741666667, 454.6066666667,
      456.4258333333, 457.4583333333, 458.4908333333, 459.5233333333,
      519.8413888889, 521.005,        522.1686111111, 523.3322222222,
      433.7647222222, 434.7316666667, 435.6986111111, 436.6655555556,
      346.9013888889, 347.6716666667, 348.4419444444, 349.2122222222,
      431.5594444444, 432.5255555556, 433.4916666667, 434.4577777778,
      543.8861111111, 545.0988888889, 546.3116666667, 547.5244444444,
      657.1994444444, 658.6588888889, 660.1183333333, 661.5777777778,
      589.2216666667, 590.5166666667, 591.8116666667, 593.1066666667,
      595.3883333333, 596.6833333333, 597.9783333333, 599.2733333333,
      677.8372222222, 679.2966666667, 680.7561111111, 682.2155555556,
      565.5105555556, 566.7233333333, 567.9361111111, 569.1488888889,
      452.1972222222, 453.1633333333, 454.1294444444, 455.0955555556,
      473.3372222222, 474.3033333333, 475.2694444444, 476.2355555556,
      596.3305555556, 597.5433333333, 598.7561111111, 599.9688888889,
      720.3105555556, 721.77,         723.2294444444, 724.6888888889,
      645.2216666667, 646.5166666667, 647.8116666667, 649.1066666667,
      651.3883333333, 652.6833333333, 653.9783333333, 655.2733333333,
      740.9483333333, 742.4077777778, 743.8672222222, 745.3266666667,
      617.955,        619.1677777778, 620.3805555556, 621.5933333333,
      493.975,        494.9411111111, 495.9072222222, 496.8733333333,
      391.0247222222, 391.795,        392.5652777778, 393.3355555556,
      492.5680555556, 493.535,        494.5019444444, 495.4688888889,
      594.8980555556, 596.0616666667, 597.2252777778, 598.3888888889,
      532.7091666667, 533.7416666667, 534.7741666667, 535.8066666667,
      537.6258333333, 538.6583333333, 539.6908333333, 540.7233333333,
      611.3525,       612.5161111111, 613.6797222222, 614.8433333333,
      509.8091666667, 510.7761111111, 511.7430555556, 512.71,
      407.4791666667, 408.2494444444, 409.0197222222, 409.79,
      320.1613888889, 320.775,        321.3886111111, 322.0022222222,
      403.2647222222, 404.035,        404.8052777778, 405.5755555556,
      486.9947222222, 487.9216666667, 488.8486111111, 489.7755555556,
      435.9791666667, 436.8016666667, 437.6241666667, 438.4466666667,
      439.8958333333, 440.7183333333, 441.5408333333, 442.3633333333,
      500.1025,       501.0294444444, 501.9563888889, 502.8833333333,
      416.9991666667, 417.7694444444, 418.5397222222, 419.31,
      333.2691666667, 333.8827777778, 334.4963888889, 335.11,
  };
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x6x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.08,  1.2,   1.32,  1.44,  0.88,  0.96,  1.04,  1.12,  0.52,  0.56,
      0.6,   0.64,  0.72,  0.8,   0.88,  0.96,  1.76,  1.92,  2.08,  2.24,
      3.12,  3.36,  3.6,   3.84,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  4.08,  4.32,  4.56,  4.8,   3.04,  3.2,   3.36,  3.52,
      1.68,  1.76,  1.84,  1.92,  0.72,  0.8,   0.88,  0.96,  1.76,  1.92,
      2.08,  2.24,  3.12,  3.36,  3.6,   3.84,  4.8,   5.12,  5.44,  5.76,
      4.8,   5.12,  5.44,  5.76,  4.08,  4.32,  4.56,  4.8,   3.04,  3.2,
      3.36,  3.52,  1.68,  1.76,  1.84,  1.92,  0.72,  0.8,   0.88,  0.96,
      1.76,  1.92,  2.08,  2.24,  3.12,  3.36,  3.6,   3.84,  4.8,   5.12,
      5.44,  5.76,  4.8,   5.12,  5.44,  5.76,  4.08,  4.32,  4.56,  4.8,
      3.04,  3.2,   3.36,  3.52,  1.68,  1.76,  1.84,  1.92,  0.72,  0.8,
      0.88,  0.96,  1.76,  1.92,  2.08,  2.24,  3.12,  3.36,  3.6,   3.84,
      4.8,   5.12,  5.44,  5.76,  4.8,   5.12,  5.44,  5.76,  4.08,  4.32,
      4.56,  4.8,   3.04,  3.2,   3.36,  3.52,  1.68,  1.76,  1.84,  1.92,
      0.68,  0.72,  0.76,  0.8,   1.52,  1.6,   1.68,  1.76,  2.52,  2.64,
      2.76,  2.88,  3.68,  3.84,  4.,    4.16,  3.68,  3.84,  4.,    4.16,
      3.,    3.12,  3.24,  3.36,  2.16,  2.24,  2.32,  2.4,   1.16,  1.2,
      1.24,  1.28,  1.32,  1.36,  1.4,   1.44,  2.8,   2.88,  2.96,  3.04,
      4.44,  4.56,  4.68,  4.8,   6.24,  6.4,   6.56,  6.72,  6.24,  6.4,
      6.56,  6.72,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92,  3.28,  3.36,  3.44,  3.52,  6.88,  7.04,
      7.2,   7.36,  10.8,  11.04, 11.28, 11.52, 15.04, 15.36, 15.68, 16.,
      15.04, 15.36, 15.68, 16.,   11.76, 12.,   12.24, 12.48, 8.16,  8.32,
      8.48,  8.64,  4.24,  4.32,  4.4,   4.48,  3.28,  3.36,  3.44,  3.52,
      6.88,  7.04,  7.2,   7.36,  10.8,  11.04, 11.28, 11.52, 15.04, 15.36,
      15.68, 16.,   15.04, 15.36, 15.68, 16.,   11.76, 12.,   12.24, 12.48,
      8.16,  8.32,  8.48,  8.64,  4.24,  4.32,  4.4,   4.48,  3.28,  3.36,
      3.44,  3.52,  6.88,  7.04,  7.2,   7.36,  10.8,  11.04, 11.28, 11.52,
      15.04, 15.36, 15.68, 16.,   15.04, 15.36, 15.68, 16.,   11.76, 12.,
      12.24, 12.48, 8.16,  8.32,  8.48,  8.64,  4.24,  4.32,  4.4,   4.48,
      3.28,  3.36,  3.44,  3.52,  6.88,  7.04,  7.2,   7.36,  10.8,  11.04,
      11.28, 11.52, 15.04, 15.36, 15.68, 16.,   15.04, 15.36, 15.68, 16.,
      11.76, 12.,   12.24, 12.48, 8.16,  8.32,  8.48,  8.64,  4.24,  4.32,
      4.4,   4.48,  1.96,  2.,    2.04,  2.08,  4.08,  4.16,  4.24,  4.32,
      6.36,  6.48,  6.6,   6.72,  8.8,   8.96,  9.12,  9.28,  8.8,   8.96,
      9.12,  9.28,  6.84,  6.96,  7.08,  7.2,   4.72,  4.8,   4.88,  4.96,
      2.44,  2.48,  2.52,  2.56,  2.6,   2.64,  2.68,  2.72,  5.36,  5.44,
      5.52,  5.6,   8.28,  8.4,   8.52,  8.64,  11.36, 11.52, 11.68, 11.84,
      11.36, 11.52, 11.68, 11.84, 8.76,  8.88,  9.,    9.12,  6.,    6.08,
      6.16,  6.24,  3.08,  3.12,  3.16,  3.2,   5.84,  5.92,  6.,    6.08,
      12.,   12.16, 12.32, 12.48, 18.48, 18.72, 18.96, 19.2,  25.28, 25.6,
      25.92, 26.24, 25.28, 25.6,  25.92, 26.24, 19.44, 19.68, 19.92, 20.16,
      13.28, 13.44, 13.6,  13.76, 6.8,   6.88,  6.96,  7.04,  5.84,  5.92,
      6.,    6.08,  12.,   12.16, 12.32, 12.48, 18.48, 18.72, 18.96, 19.2,
      25.28, 25.6,  25.92, 26.24, 25.28, 25.6,  25.92, 26.24, 19.44, 19.68,
      19.92, 20.16, 13.28, 13.44, 13.6,  13.76, 6.8,   6.88,  6.96,  7.04,
      5.84,  5.92,  6.,    6.08,  12.,   12.16, 12.32, 12.48, 18.48, 18.72,
      18.96, 19.2,  25.28, 25.6,  25.92, 26.24, 25.28, 25.6,  25.92, 26.24,
      19.44, 19.68, 19.92, 20.16, 13.28, 13.44, 13.6,  13.76, 6.8,   6.88,
      6.96,  7.04,  5.84,  5.92,  6.,    6.08,  12.,   12.16, 12.32, 12.48,
      18.48, 18.72, 18.96, 19.2,  25.28, 25.6,  25.92, 26.24, 25.28, 25.6,
      25.92, 26.24, 19.44, 19.68, 19.92, 20.16, 13.28, 13.44, 13.6,  13.76,
      6.8,   6.88,  6.96,  7.04,  3.24,  3.28,  3.32,  3.36,  6.64,  6.72,
      6.8,   6.88,  10.2,  10.32, 10.44, 10.56, 13.92, 14.08, 14.24, 14.4,
      13.92, 14.08, 14.24, 14.4,  10.68, 10.8,  10.92, 11.04, 7.28,  7.36,
      7.44,  7.52,  3.72,  3.76,  3.8,   3.84};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,   5.5844444444,   7.5386111111,   8.8441666667,
      7.4775,         6.2275,         7.2844444444,   9.5711111111,
      12.6752777778,  14.3141666667,  11.9475,        9.8575,
      11.3311111111,  14.7377777778,  19.2919444444,  21.2641666667,
      17.5975,        14.4275,        17.0866666667,  21.9266666667,
      28.2516666667,  30.085,         24.585,         19.965,
      25.4311111111,  32.4377777778,  41.4919444444,  43.4641666667,
      35.2975,        28.5275,        23.2644444444,  29.6311111111,
      37.8352777778,  39.4741666667,  32.0075,        25.8375,
      20.1577777778,  25.6444444444,  32.6986111111,  34.0041666667,
      27.5375,        22.2075,        29.9494444444,  37.9361111111,
      48.1152777778,  49.4208333333,  39.8291666667,  31.9991666667,
      39.6361111111,  50.1827777778,  63.6119444444,  65.2508333333,
      52.5591666667,  42.2091666667,  50.2627777778,  63.6094444444,
      80.5886111111,  82.5608333333,  66.4691666667,  53.3591666667,
      53.2766666667,  67.3566666667,  85.2316666667,  87.065,
      70.015,         56.155,         64.3627777778,  81.3094444444,
      102.7886111111, 104.7608333333, 84.1691666667,  67.4591666667,
      55.6161111111,  70.2427777778,  88.7719444444,  90.4108333333,
      72.6191666667,  58.1891666667,  45.9294444444,  57.9961111111,
      73.2752777778,  74.5808333333,  59.8891666667,  47.9791666667,
      55.7211111111,  70.2877777778,  88.6919444444,  89.9975,
      72.1808333333,  57.7708333333,  71.9877777778,  90.7944444444,
      114.5486111111, 116.1875,       93.1708333333,  74.5608333333,
      89.1944444444,  112.4811111111, 141.8852777778, 143.8575,
      115.3408333333, 92.2908333333,  89.4666666667,  112.7866666667,
      142.2116666667, 144.045,        115.445,        92.345,
      103.2944444444, 130.1811111111, 164.0852777778, 166.0575,
      133.0408333333, 106.3908333333, 87.9677777778,  110.8544444444,
      139.7086111111, 141.3475,       113.2308333333, 90.5408333333,
      71.7011111111,  90.3477777778,  113.8519444444, 115.1575,
      92.2408333333,  73.7508333333};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.36, 0.84, 0.84, 0.84, 0.84, 0.48,
      0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.32, 0.72, 0.72, 0.72, 0.72, 0.4,
      0.2,  0.44, 0.44, 0.44, 0.44, 0.24, 0.28, 0.6,  0.6,  0.6,  0.6,  0.32,
      0.64, 1.36, 1.36, 1.36, 1.36, 0.72, 1.08, 2.28, 2.28, 2.28, 2.28, 1.2,
      1.08, 2.28, 2.28, 2.28, 2.28, 1.2,  1.08, 2.28, 2.28, 2.28, 2.28, 1.2,
      0.8,  1.68, 1.68, 1.68, 1.68, 0.88, 0.44, 0.92, 0.92, 0.92, 0.92, 0.48,
      0.52, 1.08, 1.08, 1.08, 1.08, 0.56, 1.12, 2.32, 2.32, 2.32, 2.32, 1.2,
      1.8,  3.72, 3.72, 3.72, 3.72, 1.92, 1.8,  3.72, 3.72, 3.72, 3.72, 1.92,
      1.8,  3.72, 3.72, 3.72, 3.72, 1.92, 1.28, 2.64, 2.64, 2.64, 2.64, 1.36,
      0.68, 1.4,  1.4,  1.4,  1.4,  0.72};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,   8.3555555556,   10.3986111111,  11.1688888889,
      14.1111111111,  15.0772222222,  16.7222222222,  17.6883333333,
      14.1847222222,  14.955,         11.8413888889,  12.455,
      13.7986111111,  14.5688888889,  18.1752777778,  19.1422222222,
      24.1377777778,  25.3505555556,  27.4155555556,  28.6283333333,
      22.9280555556,  23.895,         18.9447222222,  19.715,
      21.7352777778,  22.6622222222,  28.3119444444,  29.4755555556,
      37.1244444444,  38.5838888889,  41.0688888889,  42.5283333333,
      34.0313888889,  35.195,         27.9280555556,  28.855,
      33.3116666667,  34.1733333333,  42.7716666667,  43.8533333333,
      55.1466666667,  56.5033333333,  58.8133333333,  60.17,
      48.0883333333,  49.17,          39.0683333333,  39.93,
      49.9352777778,  50.8622222222,  63.7119444444,  64.8755555556,
      81.5244444444,  82.9838888889,  85.4688888889,  86.9283333333,
      69.4313888889,  70.595,         56.1280555556,  57.055,
      45.7586111111,  46.5288888889,  58.2952777778,  59.2622222222,
      74.4577777778,  75.6705555556,  77.7355555556,  78.9483333333,
      63.0480555556,  64.015,         50.9047222222,  51.675,
      39.7019444444,  40.3155555556,  50.5186111111,  51.2888888889,
      64.4311111111,  65.3972222222,  67.0422222222,  68.0083333333,
      54.3047222222,  55.075,         43.8013888889,  44.415,
      59.2852777778,  59.8988888889,  75.1019444444,  75.8722222222,
      95.2644444444,  96.2305555556,  97.8755555556,  98.8416666667,
      78.8880555556,  79.6583333333,  63.3847222222,  63.9983333333,
      78.5019444444,  79.2722222222,  99.3986111111,  100.3655555556,
      126.0111111111, 127.2238888889, 129.2888888889, 130.5016666667,
      104.1513888889, 105.1183333333, 83.6480555556,  84.4183333333,
      99.5986111111,  100.5255555556, 126.0552777778, 127.2188888889,
      159.7177777778, 161.1772222222, 163.6622222222, 165.1216666667,
      131.7747222222, 132.9383333333, 105.7913888889, 106.7183333333,
      105.6916666667, 106.5533333333, 133.6316666667, 134.7133333333,
      169.1066666667, 170.4633333333, 172.7733333333, 174.13,
      138.9483333333, 140.03,         111.4483333333, 112.31,
      127.7986111111, 128.7255555556, 161.4552777778, 162.6188888889,
      204.1177777778, 205.5772222222, 208.0622222222, 209.5216666667,
      167.1747222222, 168.3383333333, 133.9913888889, 134.9183333333,
      110.4619444444, 111.2322222222, 139.5186111111, 140.4855555556,
      176.3311111111, 177.5438888889, 179.6088888889, 180.8216666667,
      144.2713888889, 145.2383333333, 115.6080555556, 116.3783333333,
      91.2452777778,  91.8588888889,  115.2219444444, 115.9922222222,
      145.5844444444, 146.5505555556, 148.1955555556, 149.1616666667,
      119.0080555556, 119.7783333333, 95.3447222222,  95.9583333333,
      110.8286111111, 111.4422222222, 139.8052777778, 140.5755555556,
      176.4177777778, 177.3838888889, 179.0288888889, 179.995,
      143.5913888889, 144.3616666667, 114.9280555556, 115.5416666667,
      143.2052777778, 143.9755555556, 180.6219444444, 181.5888888889,
      227.8844444444, 229.0972222222, 231.1622222222, 232.375,
      185.3747222222, 186.3416666667, 148.3513888889, 149.1216666667,
      177.4619444444, 178.3888888889, 223.7986111111, 224.9622222222,
      282.3111111111, 283.7705555556, 286.2555555556, 287.715,
      229.5180555556, 230.6816666667, 183.6547222222, 184.5816666667,
      178.0716666667, 178.9333333333, 224.4916666667, 225.5733333333,
      283.0666666667, 284.4233333333, 286.7333333333, 288.09,
      229.8083333333, 230.89,         183.8283333333, 184.69,
      205.6619444444, 206.5888888889, 259.1986111111, 260.3622222222,
      326.7111111111, 328.1705555556, 330.6555555556, 332.115,
      264.9180555556, 266.0816666667, 211.8547222222, 212.7816666667,
      175.1652777778, 175.9355555556, 220.7419444444, 221.7088888889,
      278.2044444444, 279.4172222222, 281.4822222222, 282.695,
      225.4947222222, 226.4616666667, 180.3113888889, 181.0816666667,
      142.7886111111, 143.4022222222, 179.9252777778, 180.6955555556,
      226.7377777778, 227.7038888889, 229.3488888889, 230.315,
      183.7113888889, 184.4816666667, 146.8880555556, 147.5016666667};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.08, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.16, 0.24, 0.12, 0.16,
      0.24, 0.32, 0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.64, 0.8,  0.4,  0.48,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.6,  0.72, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 1.44, 1.68, 0.84, 0.96,
      0.56, 0.64, 1.28, 1.44, 1.28, 1.44, 1.28, 1.44, 1.28, 1.44, 0.72, 0.8,
      0.36, 0.4,  0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.8,  0.88, 0.44, 0.48,
      0.52, 0.56, 1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  1.12, 1.2,  0.6,  0.64,
      1.2,  1.28, 2.56, 2.72, 2.56, 2.72, 2.56, 2.72, 2.56, 2.72, 1.36, 1.44,
      2.04, 2.16, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 2.28, 2.4,
      2.04, 2.16, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 2.28, 2.4,
      2.04, 2.16, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 4.32, 4.56, 2.28, 2.4,
      1.52, 1.6,  3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 3.2,  3.36, 1.68, 1.76,
      0.84, 0.88, 1.76, 1.84, 1.76, 1.84, 1.76, 1.84, 1.76, 1.84, 0.92, 0.96,
      1.,   1.04, 2.08, 2.16, 2.08, 2.16, 2.08, 2.16, 2.08, 2.16, 1.08, 1.12,
      2.16, 2.24, 4.48, 4.64, 4.48, 4.64, 4.48, 4.64, 4.48, 4.64, 2.32, 2.4,
      3.48, 3.6,  7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 3.72, 3.84,
      3.48, 3.6,  7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 3.72, 3.84,
      3.48, 3.6,  7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 7.2,  7.44, 3.72, 3.84,
      2.48, 2.56, 5.12, 5.28, 5.12, 5.28, 5.12, 5.28, 5.12, 5.28, 2.64, 2.72,
      1.32, 1.36, 2.72, 2.8,  2.72, 2.8,  2.72, 2.8,  2.72, 2.8,  1.4,  1.44};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      42.5436111111,  43.4705555556,  44.3975,        45.3244444444,
      55.4602777778,  56.6238888889,  57.7875,        58.9511111111,
      72.7894444444,  74.2488888889,  75.7083333333,  77.1677777778,
      80.6783333333,  82.1377777778,  83.5972222222,  85.0566666667,
      66.8991666667,  68.0627777778,  69.2263888889,  70.39,
      54.9291666667,  55.8561111111,  56.7830555556,  57.71,
      65.7616666667,  66.6233333333,  67.485,         68.3466666667,
      84.4616666667,  85.5433333333,  86.625,         87.7066666667,
      108.9366666667, 110.2933333333, 111.65,         113.0066666667,
      116.27,         117.6266666667, 118.9833333333, 120.34,
      95.095,         96.1766666667,  97.2583333333,  98.34,
      77.275,         78.1366666667,  78.9983333333,  79.86,
      98.9436111111,  99.8705555556,  100.7975,       101.7244444444,
      126.2602777778, 127.4238888889, 128.5875,       129.7511111111,
      161.5894444444, 163.0488888889, 164.5083333333, 165.9677777778,
      169.4783333333, 170.9377777778, 172.3972222222, 173.8566666667,
      137.6991666667, 138.8627777778, 140.0263888889, 141.19,
      111.3291666667, 112.2561111111, 113.1830555556, 114.11,
      90.7469444444,  91.5172222222,  92.2875,        93.0577777778,
      115.6236111111, 116.5905555556, 117.5575,       118.5244444444,
      147.7027777778, 148.9155555556, 150.1283333333, 151.3411111111,
      154.2583333333, 155.4711111111, 156.6838888889, 157.8966666667,
      125.1291666667, 126.0961111111, 127.0630555556, 128.03,
      101.0391666667, 101.8094444444, 102.5797222222, 103.35,
      78.7902777778,  79.4038888889,  80.0175,        80.6311111111,
      100.2669444444, 101.0372222222, 101.8075,       102.5777777778,
      127.8961111111, 128.8622222222, 129.8283333333, 130.7944444444,
      133.1183333333, 134.0844444444, 135.0505555556, 136.0166666667,
      107.8391666667, 108.6094444444, 109.3797222222, 110.15,
      86.9891666667,  87.6027777778,  88.2163888889,  88.83,
      117.9569444444, 118.5705555556, 119.1841666667, 119.7977777778,
      149.4336111111, 150.2038888889, 150.9741666667, 151.7444444444,
      189.5627777778, 190.5288888889, 191.495,        192.4611111111,
      194.785,        195.7511111111, 196.7172222222, 197.6833333333,
      157.0058333333, 157.7761111111, 158.5463888889, 159.3166666667,
      126.1558333333, 126.7694444444, 127.3830555556, 127.9966666667,
      156.2336111111, 157.0038888889, 157.7741666667, 158.5444444444,
      197.8302777778, 198.7972222222, 199.7641666667, 200.7311111111,
      250.8094444444, 252.0222222222, 253.235,        254.4477777778,
      257.365,        258.5777777778, 259.7905555556, 261.0033333333,
      207.3358333333, 208.3027777778, 209.2697222222, 210.2366666667,
      166.5258333333, 167.2961111111, 168.0663888889, 168.8366666667,
      198.2702777778, 199.1972222222, 200.1241666667, 201.0511111111,
      250.9469444444, 252.1105555556, 253.2741666667, 254.4377777778,
      317.9761111111, 319.4355555556, 320.895,        322.3544444444,
      325.865,        327.3244444444, 328.7838888889, 330.2433333333,
      262.3858333333, 263.5494444444, 264.7130555556, 265.8766666667,
      210.6558333333, 211.5827777778, 212.5097222222, 213.4366666667,
      210.5216666667, 211.3833333333, 212.245,        213.1066666667,
      266.1816666667, 267.2633333333, 268.345,        269.4266666667,
      336.8566666667, 338.2133333333, 339.57,         340.9266666667,
      344.19,         345.5466666667, 346.9033333333, 348.26,
      276.815,        277.8966666667, 278.9783333333, 280.06,
      222.035,        222.8966666667, 223.7583333333, 224.62,
      254.6702777778, 255.5972222222, 256.5241666667, 257.4511111111,
      321.7469444444, 322.9105555556, 324.0741666667, 325.2377777778,
      406.7761111111, 408.2355555556, 409.695,        411.1544444444,
      414.665,        416.1244444444, 417.5838888889, 419.0433333333,
      333.1858333333, 334.3494444444, 335.5130555556, 336.6766666667,
      267.0558333333, 267.9827777778, 268.9097222222, 269.8366666667,
      220.1536111111, 220.9238888889, 221.6941666667, 222.4644444444,
      278.0702777778, 279.0372222222, 280.0041666667, 280.9711111111,
      351.4494444444, 352.6622222222, 353.875,        355.0877777778,
      358.005,        359.2177777778, 360.4305555556, 361.6433333333,
      287.5758333333, 288.5427777778, 289.5097222222, 290.4766666667,
      230.4458333333, 231.2161111111, 231.9863888889, 232.7566666667,
      181.8769444444, 182.4905555556, 183.1041666667, 183.7177777778,
      229.6736111111, 230.4438888889, 231.2141666667, 231.9844444444,
      290.2027777778, 291.1688888889, 292.135,        293.1011111111,
      295.425,        296.3911111111, 297.3572222222, 298.3233333333,
      237.2458333333, 238.0161111111, 238.7863888889, 239.5566666667,
      190.0758333333, 190.6894444444, 191.3030555556, 191.9166666667,
      221.0436111111, 221.6572222222, 222.2708333333, 222.8844444444,
      278.8402777778, 279.6105555556, 280.3808333333, 281.1511111111,
      351.8694444444, 352.8355555556, 353.8016666667, 354.7677777778,
      357.0916666667, 358.0577777778, 359.0238888889, 359.99,
      286.4125,       287.1827777778, 287.9530555556, 288.7233333333,
      229.2425,       229.8561111111, 230.4697222222, 231.0833333333,
      285.6402777778, 286.4105555556, 287.1808333333, 287.9511111111,
      360.2769444444, 361.2438888889, 362.2108333333, 363.1777777778,
      454.5561111111, 455.7688888889, 456.9816666667, 458.1944444444,
      461.1116666667, 462.3244444444, 463.5372222222, 464.75,
      369.7825,       370.7494444444, 371.7163888889, 372.6833333333,
      295.9325,       296.7027777778, 297.4730555556, 298.2433333333,
      353.9969444444, 354.9238888889, 355.8508333333, 356.7777777778,
      446.4336111111, 447.5972222222, 448.7608333333, 449.9244444444,
      563.1627777778, 564.6222222222, 566.0816666667, 567.5411111111,
      571.0516666667, 572.5111111111, 573.9705555556, 575.43,
      457.8725,       459.0361111111, 460.1997222222, 461.3633333333,
      366.3825,       367.3094444444, 368.2363888889, 369.1633333333,
      355.2816666667, 356.1433333333, 357.005,        357.8666666667,
      447.9016666667, 448.9833333333, 450.065,        451.1466666667,
      564.7766666667, 566.1333333333, 567.49,         568.8466666667,
      572.11,         573.4666666667, 574.8233333333, 576.18,
      458.535,        459.6166666667, 460.6983333333, 461.78,
      366.795,        367.6566666667, 368.5183333333, 369.38,
      410.3969444444, 411.3238888889, 412.2508333333, 413.1777777778,
      517.2336111111, 518.3972222222, 519.5608333333, 520.7244444444,
      651.9627777778, 653.4222222222, 654.8816666667, 656.3411111111,
      659.8516666667, 661.3111111111, 662.7705555556, 664.23,
      528.6725,       529.8361111111, 530.9997222222, 532.1633333333,
      422.7825,       423.7094444444, 424.6363888889, 425.5633333333,
      349.5602777778, 350.3305555556, 351.1008333333, 351.8711111111,
      440.5169444444, 441.4838888889, 442.4508333333, 443.4177777778,
      555.1961111111, 556.4088888889, 557.6216666667, 558.8344444444,
      561.7516666667, 562.9644444444, 564.1772222222, 565.39,
      450.0225,       450.9894444444, 451.9563888889, 452.9233333333,
      359.8525,       360.6227777778, 361.3930555556, 362.1633333333,
      284.9636111111, 285.5772222222, 286.1908333333, 286.8044444444,
      359.0802777778, 359.8505555556, 360.6208333333, 361.3911111111,
      452.5094444444, 453.4755555556, 454.4416666667, 455.4077777778,
      457.7316666667, 458.6977777778, 459.6638888889, 460.63,
      366.6525,       367.4227777778, 368.1930555556, 368.9633333333,
      293.1625,       293.7761111111, 294.3897222222, 295.0033333333};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.24,  0.32,
      0.4,   0.48,  0.24,  0.32,  0.4,   0.48,  0.24,  0.32,  0.4,   0.48,
      0.2,   0.24,  0.28,  0.32,  0.4,   0.48,  0.56,  0.64,  1.12,  1.28,
      1.44,  1.6,   1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.12,  1.28,  1.44,  1.6,   0.72,  0.8,   0.88,  0.96,  1.08,  1.2,
      1.32,  1.44,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  1.56,  1.68,
      1.8,   1.92,  1.08,  1.2,   1.32,  1.44,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,
      3.12,  3.36,  1.56,  1.68,  1.8,   1.92,  1.08,  1.2,   1.32,  1.44,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,
      3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  1.56,  1.68,  1.8,   1.92,
      1.04,  1.12,  1.2,   1.28,  2.4,   2.56,  2.72,  2.88,  2.4,   2.56,
      2.72,  2.88,  2.4,   2.56,  2.72,  2.88,  2.4,   2.56,  2.72,  2.88,
      1.36,  1.44,  1.52,  1.6,   0.68,  0.72,  0.76,  0.8,   1.52,  1.6,
      1.68,  1.76,  1.52,  1.6,   1.68,  1.76,  1.52,  1.6,   1.68,  1.76,
      1.52,  1.6,   1.68,  1.76,  0.84,  0.88,  0.92,  0.96,  1.,    1.04,
      1.08,  1.12,  2.16,  2.24,  2.32,  2.4,   2.16,  2.24,  2.32,  2.4,
      2.16,  2.24,  2.32,  2.4,   2.16,  2.24,  2.32,  2.4,   1.16,  1.2,
      1.24,  1.28,  2.32,  2.4,   2.48,  2.56,  4.96,  5.12,  5.28,  5.44,
      4.96,  5.12,  5.28,  5.44,  4.96,  5.12,  5.28,  5.44,  4.96,  5.12,
      5.28,  5.44,  2.64,  2.72,  2.8,   2.88,  3.96,  4.08,  4.2,   4.32,
      8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,
      8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  4.44,  4.56,  4.68,  4.8,
      3.96,  4.08,  4.2,   4.32,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,
      8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,
      4.44,  4.56,  4.68,  4.8,   3.96,  4.08,  4.2,   4.32,  8.4,   8.64,
      8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,
      8.4,   8.64,  8.88,  9.12,  4.44,  4.56,  4.68,  4.8,   2.96,  3.04,
      3.12,  3.2,   6.24,  6.4,   6.56,  6.72,  6.24,  6.4,   6.56,  6.72,
      6.24,  6.4,   6.56,  6.72,  6.24,  6.4,   6.56,  6.72,  3.28,  3.36,
      3.44,  3.52,  1.64,  1.68,  1.72,  1.76,  3.44,  3.52,  3.6,   3.68,
      3.44,  3.52,  3.6,   3.68,  3.44,  3.52,  3.6,   3.68,  3.44,  3.52,
      3.6,   3.68,  1.8,   1.84,  1.88,  1.92,  1.96,  2.,    2.04,  2.08,
      4.08,  4.16,  4.24,  4.32,  4.08,  4.16,  4.24,  4.32,  4.08,  4.16,
      4.24,  4.32,  4.08,  4.16,  4.24,  4.32,  2.12,  2.16,  2.2,   2.24,
      4.24,  4.32,  4.4,   4.48,  8.8,   8.96,  9.12,  9.28,  8.8,   8.96,
      9.12,  9.28,  8.8,   8.96,  9.12,  9.28,  8.8,   8.96,  9.12,  9.28,
      4.56,  4.64,  4.72,  4.8,   6.84,  6.96,  7.08,  7.2,   14.16, 14.4,
      14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88,
      14.16, 14.4,  14.64, 14.88, 7.32,  7.44,  7.56,  7.68,  6.84,  6.96,
      7.08,  7.2,   14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88,
      14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 7.32,  7.44,
      7.56,  7.68,  6.84,  6.96,  7.08,  7.2,   14.16, 14.4,  14.64, 14.88,
      14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 14.16, 14.4,
      14.64, 14.88, 7.32,  7.44,  7.56,  7.68,  4.88,  4.96,  5.04,  5.12,
      10.08, 10.24, 10.4,  10.56, 10.08, 10.24, 10.4,  10.56, 10.08, 10.24,
      10.4,  10.56, 10.08, 10.24, 10.4,  10.56, 5.2,   5.28,  5.36,  5.44,
      2.6,   2.64,  2.68,  2.72,  5.36,  5.44,  5.52,  5.6,   5.36,  5.44,
      5.52,  5.6,   5.36,  5.44,  5.52,  5.6,   5.36,  5.44,  5.52,  5.6,
      2.76,  2.8,   2.84,  2.88};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,   6.2236111111,   7.9169444444,   8.4516666667,
      10.2669444444,  8.8869444444,   7.3502777778,   8.2636111111,
      10.8002777778,  13.5336111111,  13.9516666667,  16.4836111111,
      14.1436111111,  11.6069444444,  12.9369444444,  16.7536111111,
      20.8069444444,  20.9916666667,  24.3569444444,  20.7769444444,
      16.9602777778,  19.6716666667,  25.1716666667,  30.8916666667,
      30.25,          34.1916666667,  28.9116666667,  23.4116666667,
      29.3869444444,  37.4036111111,  45.6569444444,  44.0916666667,
      49.2069444444,  41.4269444444,  33.4102777778,  26.9069444444,
      34.2036111111,  41.6969444444,  40.1316666667,  44.6469444444,
      37.5469444444,  30.2502777778,  23.3302777778,  29.6269444444,
      36.0802777778,  34.6316666667,  38.4302777778,  32.2902777778,
      25.9936111111,  34.7538888889,  43.9672222222,  53.3372222222,
      50.6733333333,  55.6872222222,  46.6305555556,  37.4172222222,
      46.0072222222,  58.1805555556,  70.5505555556,  66.9533333333,
      73.5005555556,  61.5238888889,  49.3505555556,  58.3572222222,
      73.7705555556,  89.4205555556,  84.7733333333,  92.9705555556,
      77.7938888889,  62.3805555556,  61.8933333333,  78.1733333333,
      94.6733333333,  89.54,          97.9733333333,  81.9133333333,
      65.6333333333,  74.8072222222,  94.4205555556,  114.2705555556,
      107.8733333333, 117.8205555556, 98.4438888889,  78.8305555556,
      64.6505555556,  81.5838888889,  98.7138888889,  93.1333333333,
      101.6638888889, 84.9272222222,  67.9938888889,  53.3972222222,
      67.3705555556,  81.5005555556,  76.8533333333,  83.8505555556,
      70.0338888889,  56.0605555556,  64.8208333333,  81.7108333333,
      98.7575,        92.895,         101.1075,       84.3741666667,
      67.4841666667,  83.7508333333,  105.5608333333, 127.5675,
      119.955,        130.5175,       108.9041666667, 87.0941666667,
      103.7775,       130.7875,       158.0341666667, 148.555,
      161.5841666667, 134.8108333333, 107.8008333333, 104.115,
      131.175,        158.455,        148.83,         161.755,
      134.915,        107.855,        120.2275,       151.4375,
      182.8841666667, 171.655,        186.4341666667, 155.4608333333,
      124.2508333333, 102.3941666667, 128.9641666667, 155.7308333333,
      146.135,        158.6808333333, 132.3075,       105.7375,
      83.4641666667,  105.1141666667, 126.9208333333, 119.075,
      129.2708333333, 107.7775,       86.1275,
  };
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.24, 0.24, 0.24, 0.2,  0.12, 0.2,  0.48, 0.84, 0.84, 0.84,
      0.64, 0.36, 0.48, 1.08, 1.8,  1.8,  1.8,  1.32, 0.72, 0.48, 1.08, 1.8,
      1.8,  1.8,  1.32, 0.72, 0.48, 1.08, 1.8,  1.8,  1.8,  1.32, 0.72, 0.44,
      0.96, 1.56, 1.56, 1.56, 1.12, 0.6,  0.28, 0.6,  0.96, 0.96, 0.96, 0.68,
      0.36, 0.4,  0.84, 1.32, 1.32, 1.32, 0.92, 0.48, 0.92, 1.92, 3.,   3.,
      3.,   2.08, 1.08, 1.56, 3.24, 5.04, 5.04, 5.04, 3.48, 1.8,  1.56, 3.24,
      5.04, 5.04, 5.04, 3.48, 1.8,  1.56, 3.24, 5.04, 5.04, 5.04, 3.48, 1.8,
      1.16, 2.4,  3.72, 3.72, 3.72, 2.56, 1.32, 0.64, 1.32, 2.04, 2.04, 2.04,
      1.4,  0.72, 0.76, 1.56, 2.4,  2.4,  2.4,  1.64, 0.84, 1.64, 3.36, 5.16,
      5.16, 5.16, 3.52, 1.8,  2.64, 5.4,  8.28, 8.28, 8.28, 5.64, 2.88, 2.64,
      5.4,  8.28, 8.28, 8.28, 5.64, 2.88, 2.64, 5.4,  8.28, 8.28, 8.28, 5.64,
      2.88, 1.88, 3.84, 5.88, 5.88, 5.88, 4.,   2.04, 1.,   2.04, 3.12, 3.12,
      3.12, 2.12, 1.08};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,   9.3738888889,   11.6769444444,  12.4472222222,
      14.9069444444,  15.8338888889,  16.0416666667,  16.9033333333,
      19.6069444444,  20.5338888889,  17.0036111111,  17.7738888889,
      14.0869444444,  14.7005555556,  15.7569444444,  16.5272222222,
      20.6336111111,  21.6005555556,  25.9036111111,  27.0672222222,
      26.8216666667,  27.9033333333,  31.8036111111,  32.9672222222,
      27.3202777778,  28.2872222222,  22.4436111111,  23.2138888889,
      24.9469444444,  25.8738888889,  32.3436111111,  33.5072222222,
      40.2136111111,  41.6138888889,  40.6816666667,  41.9833333333,
      47.3136111111,  48.7138888889,  40.3902777778,  41.5538888889,
      32.9936111111,  33.9205555556,  38.4816666667,  39.3433333333,
      49.2616666667,  50.3433333333,  60.4816666667,  61.7833333333,
      59.29,          60.5,           67.0816666667,  68.3833333333,
      56.7416666667,  57.8233333333,  45.9616666667,  46.8233333333,
      57.8469444444,  58.7738888889,  73.6436111111,  74.8072222222,
      89.9136111111,  91.3138888889,  86.8816666667,  88.1833333333,
      97.0136111111,  98.4138888889,  81.6902777778,  82.8538888889,
      65.8936111111,  66.8205555556,  53.0436111111,  53.8138888889,
      67.4402777778,  68.4072222222,  82.2302777778,  83.3938888889,
      79.1816666667,  80.2633333333,  88.1302777778,  89.2938888889,
      74.1269444444,  75.0938888889,  59.7302777778,  60.5005555556,
      46.0469444444,  46.6605555556,  58.4836111111,  59.2538888889,
      71.2336111111,  72.1605555556,  68.4016666667,  69.2633333333,
      75.9336111111,  76.8605555556,  63.8102777778,  64.5805555556,
      51.3736111111,  51.9872222222,  68.8941666667,  69.5077777778,
      87.1641666667,  87.9344444444,  105.7475,       106.6744444444,
      100.485,        101.3466666667, 110.4475,       111.3744444444,
      92.4908333333,  93.2611111111,  74.2208333333,  74.8344444444,
      91.2441666667,  92.0144444444,  115.3941666667, 116.3611111111,
      139.9375,       141.1011111111, 132.825,        133.9066666667,
      145.8375,       147.0011111111, 122.0808333333, 123.0477777778,
      97.9308333333,  98.7011111111,  115.7875,       116.7144444444,
      146.3775,       147.5411111111, 177.4408333333, 178.8411111111,
      168.245,        169.5466666667, 184.5408333333, 185.9411111111,
      154.4241666667, 155.5877777778, 123.8341666667, 124.7611111111,
      122.925,        123.7866666667, 155.265,        156.3466666667,
      188.045,        189.3466666667, 177.87,         179.08,
      194.645,        195.9466666667, 162.745,        163.8266666667,
      130.405,        131.2666666667, 148.6875,       149.6144444444,
      187.6775,       188.8411111111, 227.1408333333, 228.5411111111,
      214.445,        215.7466666667, 234.2408333333, 235.6411111111,
      195.7241666667, 196.8877777778, 156.7341666667, 157.6611111111,
      128.5308333333, 129.3011111111, 162.2008333333, 163.1677777778,
      196.2641666667, 197.4277777778, 185.185,        186.2666666667,
      202.1641666667, 203.3277777778, 168.8875,       169.8544444444,
      135.2175,       135.9877777778, 106.1808333333, 106.7944444444,
      133.9708333333, 134.7411111111, 162.0741666667, 163.0011111111,
      152.845,        153.7066666667, 166.7741666667, 167.7011111111,
      139.2975,       140.0677777778, 111.5075,       112.1211111111,
      129.0280555556, 129.6416666667, 162.6513888889, 163.4216666667,
      196.5880555556, 197.515,        184.9283333333, 185.79,
      201.2880555556, 202.215,        167.9780555556, 168.7483333333,
      134.3547222222, 134.9683333333, 166.7313888889, 167.5016666667,
      210.1547222222, 211.1216666667, 253.9713888889, 255.135,
      238.8283333333, 239.91,         259.8713888889, 261.035,
      216.8413888889, 217.8083333333, 173.4180555556, 174.1883333333,
      206.6280555556, 207.555,        260.4113888889, 261.575,
      314.6680555556, 316.0683333333, 295.8083333333, 297.11,
      321.7680555556, 323.1683333333, 268.4580555556, 269.6216666667,
      214.6747222222, 215.6016666667, 207.3683333333, 208.23,
      261.2683333333, 262.35,         315.6083333333, 316.91,
      296.45,         297.66,         322.2083333333, 323.51,
      268.7483333333, 269.83,         214.8483333333, 215.71,
      239.5280555556, 240.455,        301.7113888889, 302.875,
      364.3680555556, 365.7683333333, 342.0083333333, 343.31,
      371.4680555556, 372.8683333333, 309.7580555556, 310.9216666667,
      247.5747222222, 248.5016666667, 204.0180555556, 204.7883333333,
      256.9613888889, 257.9283333333, 310.2980555556, 311.4616666667,
      291.1883333333, 292.27,         316.1980555556, 317.3616666667,
      263.6480555556, 264.615,        210.7047222222, 211.475,
      166.3147222222, 166.9283333333, 209.4580555556, 210.2283333333,
      252.9147222222, 253.8416666667, 237.2883333333, 238.15,
      257.6147222222, 258.5416666667, 214.7847222222, 215.555,
      171.6413888889, 172.255,
  };
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24,  0.36,  0.48,  0.36,  0.48,  0.36,  0.48,
      0.32,  0.4,   0.2,   0.24,  0.32,  0.4,   0.8,   0.96,  1.44,  1.68,
      1.44,  1.68,  1.44,  1.68,  1.12,  1.28,  0.64,  0.72,  0.84,  0.96,
      1.92,  2.16,  3.24,  3.6,   3.24,  3.6,   3.24,  3.6,   2.4,   2.64,
      1.32,  1.44,  0.84,  0.96,  1.92,  2.16,  3.24,  3.6,   3.24,  3.6,
      3.24,  3.6,   2.4,   2.64,  1.32,  1.44,  0.84,  0.96,  1.92,  2.16,
      3.24,  3.6,   3.24,  3.6,   3.24,  3.6,   2.4,   2.64,  1.32,  1.44,
      0.8,   0.88,  1.76,  1.92,  2.88,  3.12,  2.88,  3.12,  2.88,  3.12,
      2.08,  2.24,  1.12,  1.2,   0.52,  0.56,  1.12,  1.2,   1.8,   1.92,
      1.8,   1.92,  1.8,   1.92,  1.28,  1.36,  0.68,  0.72,  0.76,  0.8,
      1.6,   1.68,  2.52,  2.64,  2.52,  2.64,  2.52,  2.64,  1.76,  1.84,
      0.92,  0.96,  1.76,  1.84,  3.68,  3.84,  5.76,  6.,    5.76,  6.,
      5.76,  6.,    4.,    4.16,  2.08,  2.16,  3.,    3.12,  6.24,  6.48,
      9.72,  10.08, 9.72,  10.08, 9.72,  10.08, 6.72,  6.96,  3.48,  3.6,
      3.,    3.12,  6.24,  6.48,  9.72,  10.08, 9.72,  10.08, 9.72,  10.08,
      6.72,  6.96,  3.48,  3.6,   3.,    3.12,  6.24,  6.48,  9.72,  10.08,
      9.72,  10.08, 9.72,  10.08, 6.72,  6.96,  3.48,  3.6,   2.24,  2.32,
      4.64,  4.8,   7.2,   7.44,  7.2,   7.44,  7.2,   7.44,  4.96,  5.12,
      2.56,  2.64,  1.24,  1.28,  2.56,  2.64,  3.96,  4.08,  3.96,  4.08,
      3.96,  4.08,  2.72,  2.8,   1.4,   1.44,  1.48,  1.52,  3.04,  3.12,
      4.68,  4.8,   4.68,  4.8,   4.68,  4.8,   3.2,   3.28,  1.64,  1.68,
      3.2,   3.28,  6.56,  6.72,  10.08, 10.32, 10.08, 10.32, 10.08, 10.32,
      6.88,  7.04,  3.52,  3.6,   5.16,  5.28,  10.56, 10.8,  16.2,  16.56,
      16.2,  16.56, 16.2,  16.56, 11.04, 11.28, 5.64,  5.76,  5.16,  5.28,
      10.56, 10.8,  16.2,  16.56, 16.2,  16.56, 16.2,  16.56, 11.04, 11.28,
      5.64,  5.76,  5.16,  5.28,  10.56, 10.8,  16.2,  16.56, 16.2,  16.56,
      16.2,  16.56, 11.04, 11.28, 5.64,  5.76,  3.68,  3.76,  7.52,  7.68,
      11.52, 11.76, 11.52, 11.76, 11.52, 11.76, 7.84,  8.,    4.,    4.08,
      1.96,  2.,    4.,    4.08,  6.12,  6.24,  6.12,  6.24,  6.12,  6.24,
      4.16,  4.24,  2.12,  2.16};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      48.9669444444,  49.8938888889,  50.8208333333,  51.7477777778,
      63.5236111111,  64.6872222222,  65.8508333333,  67.0144444444,
      79.0269444444,  80.4272222222,  81.8275,        83.2277777778,
      80.0616666667,  81.3633333333,  82.665,         83.9666666667,
      93.2269444444,  94.6272222222,  96.0275,        97.4277777778,
      79.6169444444,  80.7805555556,  81.9441666667,  83.1077777778,
      65.0602777778,  65.9872222222,  66.9141666667,  67.8411111111,
      76.1016666667,  76.9633333333,  77.825,         78.6866666667,
      97.4416666667,  98.5233333333,  99.605,         100.6866666667,
      119.6616666667, 120.9633333333, 122.265,        123.5666666667,
      117.37,         118.58,         119.79,         121.,
      132.8616666667, 134.1633333333, 135.465,        136.7666666667,
      112.4016666667, 113.4833333333, 114.565,        115.6466666667,
      91.0616666667,  91.9233333333,  92.785,         93.6466666667,
      114.7669444444, 115.6938888889, 116.6208333333, 117.5477777778,
      146.1236111111, 147.2872222222, 148.4508333333, 149.6144444444,
      178.4269444444, 179.8272222222, 181.2275,       182.6277777778,
      172.4616666667, 173.7633333333, 175.065,        176.3666666667,
      192.6269444444, 194.0272222222, 195.4275,       196.8277777778,
      162.2169444444, 163.3805555556, 164.5441666667, 165.7077777778,
      130.8602777778, 131.7872222222, 132.7141666667, 133.6411111111,
      105.3169444444, 106.0872222222, 106.8575,       107.6277777778,
      133.9136111111, 134.8805555556, 135.8475,       136.8144444444,
      163.2969444444, 164.4605555556, 165.6241666667, 166.7877777778,
      157.2816666667, 158.3633333333, 159.445,        160.5266666667,
      175.0969444444, 176.2605555556, 177.4241666667, 178.5877777778,
      147.2869444444, 148.2538888889, 149.2208333333, 150.1877777778,
      118.6902777778, 119.4605555556, 120.2308333333, 121.0011111111,
      91.4802777778,  92.0938888889,  92.7075,        93.3211111111,
      116.1969444444, 116.9672222222, 117.7375,       118.5077777778,
      141.5402777778, 142.4672222222, 143.3941666667, 144.3211111111,
      135.9416666667, 136.8033333333, 137.665,        138.5266666667,
      150.9402777778, 151.8672222222, 152.7941666667, 153.7211111111,
      126.8502777778, 127.6205555556, 128.3908333333, 129.1611111111,
      102.1336111111, 102.7472222222, 103.3608333333, 103.9744444444,
      137.1747222222, 137.7883333333, 138.4019444444, 139.0155555556,
      173.5580555556, 174.3283333333, 175.0986111111, 175.8688888889,
      210.5680555556, 211.495,        212.4219444444, 213.3488888889,
      200.1083333333, 200.97,         201.8316666667, 202.6933333333,
      219.9680555556, 220.895,        221.8219444444, 222.7488888889,
      184.2113888889, 184.9816666667, 185.7519444444, 186.5222222222,
      147.8280555556, 148.4416666667, 149.0552777778, 149.6688888889,
      181.7180555556, 182.4883333333, 183.2586111111, 184.0288888889,
      229.8213888889, 230.7883333333, 231.7552777778, 232.7222222222,
      278.7113888889, 279.875,        281.0386111111, 282.2022222222,
      264.5683333333, 265.65,         266.7316666667, 267.8133333333,
      290.5113888889, 291.675,        292.8386111111, 294.0022222222,
      243.1947222222, 244.1616666667, 245.1286111111, 246.0955555556,
      195.0913888889, 195.8616666667, 196.6319444444, 197.4022222222,
      230.6480555556, 231.575,        232.5019444444, 233.4288888889,
      291.5913888889, 292.755,        293.9186111111, 295.0822222222,
      353.4813888889, 354.8816666667, 356.2819444444, 357.6822222222,
      335.1883333333, 336.49,         337.7916666667, 339.0933333333,
      367.6813888889, 369.0816666667, 370.4819444444, 371.8822222222,
      307.6847222222, 308.8483333333, 310.0119444444, 311.1755555556,
      246.7413888889, 247.6683333333, 248.5952777778, 249.5222222222,
      244.9883333333, 245.85,         246.7116666667, 247.5733333333,
      309.4483333333, 310.53,         311.6116666667, 312.6933333333,
      374.7883333333, 376.09,         377.3916666667, 378.6933333333,
      354.53,         355.74,         356.95,         358.16,
      387.9883333333, 389.29,         390.5916666667, 391.8933333333,
      324.4083333333, 325.49,         326.5716666667, 327.6533333333,
      259.9483333333, 260.81,         261.6716666667, 262.5333333333,
      296.4480555556, 297.375,        298.3019444444, 299.2288888889,
      374.1913888889, 375.355,        376.5186111111, 377.6822222222,
      452.8813888889, 454.2816666667, 455.6819444444, 457.0822222222,
      427.5883333333, 428.89,         430.1916666667, 431.4933333333,
      467.0813888889, 468.4816666667, 469.8819444444, 471.2822222222,
      390.2847222222, 391.4483333333, 392.6119444444, 393.7755555556,
      312.5413888889, 313.4683333333, 314.3952777778, 315.3222222222,
      256.2913888889, 257.0616666667, 257.8319444444, 258.6022222222,
      323.4347222222, 324.4016666667, 325.3686111111, 326.3355555556,
      391.3647222222, 392.5283333333, 393.6919444444, 394.8555555556,
      369.2883333333, 370.37,         371.4516666667, 372.5333333333,
      403.1647222222, 404.3283333333, 405.4919444444, 406.6555555556,
      336.8080555556, 337.775,        338.7419444444, 339.7088888889,
      269.6647222222, 270.435,        271.2052777778, 271.9755555556,
      211.7480555556, 212.3616666667, 212.9752777778, 213.5888888889,
      267.1713888889, 267.9416666667, 268.7119444444, 269.4822222222,
      323.2213888889, 324.1483333333, 325.0752777778, 326.0022222222,
      304.8283333333, 305.69,         306.5516666667, 307.4133333333,
      332.6213888889, 333.5483333333, 334.4752777778, 335.4022222222,
      277.8247222222, 278.595,        279.3652777778, 280.1355555556,
      222.4013888889, 223.015,        223.6286111111, 224.2422222222,
      257.4425,       258.0561111111, 258.6697222222, 259.2833333333,
      324.5325,       325.3027777778, 326.0730555556, 326.8433333333,
      392.2491666667, 393.1761111111, 394.1030555556, 395.03,
      368.995,        369.8566666667, 370.7183333333, 371.58,
      401.6491666667, 402.5761111111, 403.5030555556, 404.43,
      335.1858333333, 335.9561111111, 336.7263888889, 337.4966666667,
      268.0958333333, 268.7094444444, 269.3230555556, 269.9366666667,
      332.6925,       333.4627777778, 334.2330555556, 335.0033333333,
      419.3425,       420.3094444444, 421.2763888889, 422.2433333333,
      506.7791666667, 507.9427777778, 509.1063888889, 510.27,
      476.575,        477.6566666667, 478.7383333333, 479.82,
      518.5791666667, 519.7427777778, 520.9063888889, 522.07,
      432.7158333333, 433.6827777778, 434.6497222222, 435.6166666667,
      346.0658333333, 346.8361111111, 347.6063888889, 348.3766666667,
      412.3291666667, 413.2561111111, 414.1830555556, 415.11,
      519.6591666667, 520.8227777778, 521.9863888889, 523.15,
      627.9358333333, 629.3361111111, 630.7363888889, 632.1366666667,
      590.315,        591.6166666667, 592.9183333333, 594.22,
      642.1358333333, 643.5361111111, 644.9363888889, 646.3366666667,
      535.7525,       536.9161111111, 538.0797222222, 539.2433333333,
      428.4225,       429.3494444444, 430.2763888889, 431.2033333333,
      413.875,        414.7366666667, 415.5983333333, 416.46,
      521.455,        522.5366666667, 523.6183333333, 524.7,
      629.915,        631.2166666667, 632.5183333333, 633.82,
      591.69,         592.9,          594.11,         595.32,
      643.115,        644.4166666667, 645.7183333333, 647.02,
      536.415,        537.4966666667, 538.5783333333, 539.66,
      428.835,        429.6966666667, 430.5583333333, 431.42,
      478.1291666667, 479.0561111111, 479.9830555556, 480.91,
      602.2591666667, 603.4227777778, 604.5863888889, 605.75,
      727.3358333333, 728.7361111111, 730.1363888889, 731.5366666667,
      682.715,        684.0166666667, 685.3183333333, 686.62,
      741.5358333333, 742.9361111111, 744.3363888889, 745.7366666667,
      618.3525,       619.5161111111, 620.6797222222, 621.8433333333,
      494.2225,       495.1494444444, 496.0763888889, 497.0033333333,
      407.2658333333, 408.0361111111, 408.8063888889, 409.5766666667,
      512.9558333333, 513.9227777778, 514.8897222222, 515.8566666667,
      619.4325,       620.5961111111, 621.7597222222, 622.9233333333,
      581.295,        582.3766666667, 583.4583333333, 584.54,
      631.2325,       632.3961111111, 633.5597222222, 634.7233333333,
      526.3291666667, 527.2961111111, 528.2630555556, 529.23,
      420.6391666667, 421.4094444444, 422.1797222222, 422.95,
      332.0158333333, 332.6294444444, 333.2430555556, 333.8566666667,
      418.1458333333, 418.9161111111, 419.6863888889, 420.4566666667,
      504.9025,       505.8294444444, 506.7563888889, 507.6833333333,
      473.715,        474.5766666667, 475.4383333333, 476.3,
      514.3025,       515.2294444444, 516.1563888889, 517.0833333333,
      428.7991666667, 429.5694444444, 430.3397222222, 431.11,
      342.6691666667, 343.2827777778, 343.8963888889, 344.51,
  };
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  0.6,   0.72,  0.84,  0.96,  0.6,   0.72,  0.84,  0.96,
      0.56,  0.64,  0.72,  0.8,   0.36,  0.4,   0.44,  0.48,  0.56,  0.64,
      0.72,  0.8,   1.44,  1.6,   1.76,  1.92,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.08,  2.24,
      2.4,   2.56,  1.2,   1.28,  1.36,  1.44,  1.56,  1.68,  1.8,   1.92,
      3.6,   3.84,  4.08,  4.32,  6.12,  6.48,  6.84,  7.2,   6.12,  6.48,
      6.84,  7.2,   6.12,  6.48,  6.84,  7.2,   4.56,  4.8,   5.04,  5.28,
      2.52,  2.64,  2.76,  2.88,  1.56,  1.68,  1.8,   1.92,  3.6,   3.84,
      4.08,  4.32,  6.12,  6.48,  6.84,  7.2,   6.12,  6.48,  6.84,  7.2,
      6.12,  6.48,  6.84,  7.2,   4.56,  4.8,   5.04,  5.28,  2.52,  2.64,
      2.76,  2.88,  1.56,  1.68,  1.8,   1.92,  3.6,   3.84,  4.08,  4.32,
      6.12,  6.48,  6.84,  7.2,   6.12,  6.48,  6.84,  7.2,   6.12,  6.48,
      6.84,  7.2,   4.56,  4.8,   5.04,  5.28,  2.52,  2.64,  2.76,  2.88,
      1.52,  1.6,   1.68,  1.76,  3.36,  3.52,  3.68,  3.84,  5.52,  5.76,
      6.,    6.24,  5.52,  5.76,  6.,    6.24,  5.52,  5.76,  6.,    6.24,
      4.,    4.16,  4.32,  4.48,  2.16,  2.24,  2.32,  2.4,   1.,    1.04,
      1.08,  1.12,  2.16,  2.24,  2.32,  2.4,   3.48,  3.6,   3.72,  3.84,
      3.48,  3.6,   3.72,  3.84,  3.48,  3.6,   3.72,  3.84,  2.48,  2.56,
      2.64,  2.72,  1.32,  1.36,  1.4,   1.44,  1.48,  1.52,  1.56,  1.6,
      3.12,  3.2,   3.28,  3.36,  4.92,  5.04,  5.16,  5.28,  4.92,  5.04,
      5.16,  5.28,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92,  3.44,  3.52,  3.6,   3.68,  7.2,   7.36,
      7.52,  7.68,  11.28, 11.52, 11.76, 12.,   11.28, 11.52, 11.76, 12.,
      11.28, 11.52, 11.76, 12.,   7.84,  8.,    8.16,  8.32,  4.08,  4.16,
      4.24,  4.32,  5.88,  6.,    6.12,  6.24,  12.24, 12.48, 12.72, 12.96,
      19.08, 19.44, 19.8,  20.16, 19.08, 19.44, 19.8,  20.16, 19.08, 19.44,
      19.8,  20.16, 13.2,  13.44, 13.68, 13.92, 6.84,  6.96,  7.08,  7.2,
      5.88,  6.,    6.12,  6.24,  12.24, 12.48, 12.72, 12.96, 19.08, 19.44,
      19.8,  20.16, 19.08, 19.44, 19.8,  20.16, 19.08, 19.44, 19.8,  20.16,
      13.2,  13.44, 13.68, 13.92, 6.84,  6.96,  7.08,  7.2,   5.88,  6.,
      6.12,  6.24,  12.24, 12.48, 12.72, 12.96, 19.08, 19.44, 19.8,  20.16,
      19.08, 19.44, 19.8,  20.16, 19.08, 19.44, 19.8,  20.16, 13.2,  13.44,
      13.68, 13.92, 6.84,  6.96,  7.08,  7.2,   4.4,   4.48,  4.56,  4.64,
      9.12,  9.28,  9.44,  9.6,   14.16, 14.4,  14.64, 14.88, 14.16, 14.4,
      14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 9.76,  9.92,  10.08, 10.24,
      5.04,  5.12,  5.2,   5.28,  2.44,  2.48,  2.52,  2.56,  5.04,  5.12,
      5.2,   5.28,  7.8,   7.92,  8.04,  8.16,  7.8,   7.92,  8.04,  8.16,
      7.8,   7.92,  8.04,  8.16,  5.36,  5.44,  5.52,  5.6,   2.76,  2.8,
      2.84,  2.88,  2.92,  2.96,  3.,    3.04,  6.,    6.08,  6.16,  6.24,
      9.24,  9.36,  9.48,  9.6,   9.24,  9.36,  9.48,  9.6,   9.24,  9.36,
      9.48,  9.6,   6.32,  6.4,   6.48,  6.56,  3.24,  3.28,  3.32,  3.36,
      6.32,  6.4,   6.48,  6.56,  12.96, 13.12, 13.28, 13.44, 19.92, 20.16,
      20.4,  20.64, 19.92, 20.16, 20.4,  20.64, 19.92, 20.16, 20.4,  20.64,
      13.6,  13.76, 13.92, 14.08, 6.96,  7.04,  7.12,  7.2,   10.2,  10.32,
      10.44, 10.56, 20.88, 21.12, 21.36, 21.6,  32.04, 32.4,  32.76, 33.12,
      32.04, 32.4,  32.76, 33.12, 32.04, 32.4,  32.76, 33.12, 21.84, 22.08,
      22.32, 22.56, 11.16, 11.28, 11.4,  11.52, 10.2,  10.32, 10.44, 10.56,
      20.88, 21.12, 21.36, 21.6,  32.04, 32.4,  32.76, 33.12, 32.04, 32.4,
      32.76, 33.12, 32.04, 32.4,  32.76, 33.12, 21.84, 22.08, 22.32, 22.56,
      11.16, 11.28, 11.4,  11.52, 10.2,  10.32, 10.44, 10.56, 20.88, 21.12,
      21.36, 21.6,  32.04, 32.4,  32.76, 33.12, 32.04, 32.4,  32.76, 33.12,
      32.04, 32.4,  32.76, 33.12, 21.84, 22.08, 22.32, 22.56, 11.16, 11.28,
      11.4,  11.52, 7.28,  7.36,  7.44,  7.52,  14.88, 15.04, 15.2,  15.36,
      22.8,  23.04, 23.28, 23.52, 22.8,  23.04, 23.28, 23.52, 22.8,  23.04,
      23.28, 23.52, 15.52, 15.68, 15.84, 16.,   7.92,  8.,    8.08,  8.16,
      3.88,  3.92,  3.96,  4.,    7.92,  8.,    8.08,  8.16,  12.12, 12.24,
      12.36, 12.48, 12.12, 12.24, 12.36, 12.48, 12.12, 12.24, 12.36, 12.48,
      8.24,  8.32,  8.4,   8.48,  4.2,   4.24,  4.28,  4.32};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,   6.8627777778,   8.6861111111,   8.6716666667,
      9.6508333333,   11.9630555556,  10.2963888889,  8.4730555556,
      9.2427777778,   12.0294444444,  15.0127777778,  14.5316666667,
      15.7608333333,  19.1263888889,  16.3397222222,  13.3563888889,
      14.5427777778,  18.7694444444,  23.2327777778,  22.0716666667,
      23.5508333333,  28.1830555556,  23.9563888889,  19.4930555556,
      22.2566666667,  28.4166666667,  34.7966666667,  32.23,
      33.605,         39.3983333333,  33.2383333333,  26.8583333333,
      33.3427777778,  42.3694444444,  51.6327777778,  47.2716666667,
      48.7508333333,  56.5830555556,  47.5563888889,  38.2930555556,
      30.5494444444,  38.7761111111,  47.1994444444,  43.0916666667,
      44.3208333333,  51.3130555556,  43.0863888889,  34.6630555556,
      26.5027777778,  33.6094444444,  40.8727777778,  37.2316666667,
      38.2108333333,  44.1497222222,  37.0430555556,  29.7797222222,
      39.5583333333,  49.9983333333,  60.595,         54.7316666667,
      55.7108333333,  63.8719444444,  53.4319444444,  42.8352777778,
      52.3783333333,  66.1783333333,  80.175,         72.3516666667,
      73.5808333333,  84.2886111111,  70.4886111111,  56.4919444444,
      66.4516666667,  83.9316666667,  101.6483333333, 91.6516666667,
      93.1308333333,  106.5986111111, 89.1186111111,  71.4019444444,
      70.51,          88.99,          107.69,         96.91,
      98.285,         112.2916666667, 93.8116666667,  75.1116666667,
      85.2516666667,  107.5316666667, 130.0483333333, 116.8516666667,
      118.3308333333, 134.9986111111, 112.7186111111, 90.2019444444,
      73.685,         92.925,         112.3616666667, 100.9116666667,
      102.1408333333, 116.4752777778, 97.2352777778,  77.7986111111,
      60.865,         76.745,         92.7816666667,  83.2916666667,
      84.2708333333,  96.0586111111,  80.1786111111,  64.1419444444,
      73.9205555556,  93.1338888889,  112.5038888889, 100.7916666667,
      101.7708333333, 115.7808333333, 96.5675,        77.1975,
      95.5138888889,  120.3272222222, 145.3372222222, 130.1716666667,
      131.4008333333, 149.4508333333, 124.6375,       99.6275,
      118.3605555556, 149.0938888889, 180.0638888889, 161.2316666667,
      162.7108333333, 185.0141666667, 154.2808333333, 123.3108333333,
      118.7633333333, 149.5633333333, 180.5833333333, 161.59,
      162.965,        185.185,        154.385,        123.365,
      137.1605555556, 172.6938888889, 208.4638888889, 186.4316666667,
      187.9108333333, 213.4141666667, 177.8808333333, 142.1108333333,
      116.8205555556, 147.0738888889, 177.5238888889, 158.7316666667,
      159.9608333333, 181.6375,       151.3841666667, 120.9341666667,
      95.2272222222,  119.8805555556, 144.6905555556, 129.3516666667,
      130.3308333333, 147.9675,       123.3141666667, 98.5041666667};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.12,  0.24, 0.4,  0.4,   0.36,  0.28,  0.16,  0.24,  0.56,  0.96,
      1.44,  1.44,  1.2,  0.88, 0.48,  0.6,   1.32,  2.16,  3.12,  3.12,  2.52,
      1.8,   0.96,  0.6,  1.32, 2.16,  3.12,  3.12,  2.52,  1.8,   0.96,  0.6,
      1.32,  2.16,  3.12, 3.12, 2.52,  1.8,   0.96,  0.56,  1.2,   1.92,  2.72,
      2.72,  2.16,  1.52, 0.8,  0.36,  0.76,  1.2,   1.68,  1.68,  1.32,  0.92,
      0.48,  0.52,  1.08, 1.68, 2.32,  2.32,  1.8,   1.24,  0.64,  1.2,   2.48,
      3.84,  5.28,  5.28, 4.08, 2.8,   1.44,  2.04,  4.2,   6.48,  8.88,  8.88,
      6.84,  4.68,  2.4,  2.04, 4.2,   6.48,  8.88,  8.88,  6.84,  4.68,  2.4,
      2.04,  4.2,   6.48, 8.88, 8.88,  6.84,  4.68,  2.4,   1.52,  3.12,  4.8,
      6.56,  6.56,  5.04, 3.44, 1.76,  0.84,  1.72,  2.64,  3.6,   3.6,   2.76,
      1.88,  0.96,  1.,   2.04, 3.12,  4.24,  4.24,  3.24,  2.2,   1.12,  2.16,
      4.4,   6.72,  9.12, 9.12, 6.96,  4.72,  2.4,   3.48,  7.08,  10.8,  14.64,
      14.64, 11.16, 7.56, 3.84, 3.48,  7.08,  10.8,  14.64, 14.64, 11.16, 7.56,
      3.84,  3.48,  7.08, 10.8, 14.64, 14.64, 11.16, 7.56,  3.84,  2.48,  5.04,
      7.68,  10.4,  10.4, 7.92, 5.36,  2.72,  1.32,  2.68,  4.08,  5.52,  5.52,
      4.2,   2.84,  1.44};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,   10.3922222222,  12.9552777778,  13.7255555556,
      16.4452777778,  17.3722222222,  16.5208333333,  17.3433333333,
      18.4791666667,  19.3016666667,  22.9991666667,  23.9261111111,
      19.8225,        20.5927777778,  16.3325,        16.9461111111,
      17.7152777778,  18.4855555556,  23.0919444444,  24.0588888889,
      28.8619444444,  30.0255555556,  28.0308333333,  29.0633333333,
      30.4891666667,  31.5216666667,  37.0891666667,  38.2527777778,
      31.7125,        32.6794444444,  25.9425,        26.7127777778,
      28.1586111111,  29.0855555556,  36.3752777778,  37.5388888889,
      45.0652777778,  46.4655555556,  42.9008333333,  44.1433333333,
      45.8591666667,  47.1016666667,  54.9658333333,  56.3661111111,
      46.7491666667,  47.9127777778,  38.0591666667,  38.9861111111,
      43.6516666667,  44.5133333333,  55.7516666667,  56.8333333333,
      68.2916666667,  69.5933333333,  63.305,         64.46,
      66.055,         67.21,          77.495,         78.7966666667,
      65.395,         66.4766666667,  52.855,         53.7166666667,
      65.7586111111,  66.6855555556,  83.5752777778,  84.7388888889,
      101.8652777778, 103.2655555556, 93.3008333333,  94.5433333333,
      96.2591666667,  97.5016666667,  111.7658333333, 113.1661111111,
      93.9491666667,  95.1127777778,  75.6591666667,  76.5861111111,
      60.3286111111,  61.0988888889,  76.5852777778,  77.5522222222,
      93.2352777778,  94.3988888889,  85.1508333333,  86.1833333333,
      87.6091666667,  88.6416666667,  101.4625,       102.6261111111,
      85.2058333333,  86.1727777778,  68.5558333333,  69.3261111111,
      52.3919444444,  53.0055555556,  66.4486111111,  67.2188888889,
      80.8186111111,  81.7455555556,  73.6408333333,  74.4633333333,
      75.5991666667,  76.4216666667,  87.3725,        88.2994444444,
      73.3158333333,  74.0861111111,  58.9458333333,  59.5594444444,
      78.5030555556,  79.1166666667,  99.2263888889,  99.9966666667,
      120.2630555556, 121.19,         108.6408333333, 109.4633333333,
      110.5991666667, 111.4216666667, 126.8169444444, 127.7438888889,
      106.0936111111, 106.8638888889, 85.0569444444,  85.6705555556,
      103.9863888889, 104.7566666667, 131.3897222222, 132.3566666667,
      159.1863888889, 160.35,         143.6708333333, 144.7033333333,
      146.1291666667, 147.1616666667, 167.4136111111, 168.5772222222,
      140.0102777778, 140.9772222222, 112.2136111111, 112.9838888889,
      131.9763888889, 132.9033333333, 166.6997222222, 167.8633333333,
      201.8963888889, 203.2966666667, 182.0608333333, 183.3033333333,
      185.0191666667, 186.2616666667, 211.7969444444, 213.1972222222,
      177.0736111111, 178.2372222222, 141.8769444444, 142.8038888889,
      140.1583333333, 141.02,         176.8983333333, 177.98,
      214.0783333333, 215.38,         192.665,        193.82,
      195.415,        196.57,         223.2816666667, 224.5833333333,
      186.5416666667, 187.6233333333, 149.3616666667, 150.2233333333,
      169.5763888889, 170.5033333333, 213.8997222222, 215.0633333333,
      258.6963888889, 260.0966666667, 232.4608333333, 233.7033333333,
      235.4191666667, 236.6616666667, 268.5969444444, 269.9972222222,
      224.2736111111, 225.4372222222, 179.4769444444, 180.4038888889,
      146.5997222222, 147.37,         184.8830555556, 185.85,
      223.5597222222, 224.7233333333, 200.7908333333, 201.8233333333,
      203.2491666667, 204.2816666667, 231.7869444444, 232.9505555556,
      193.5036111111, 194.4705555556, 154.8269444444, 155.5972222222,
      121.1163888889, 121.73,         152.7197222222, 153.49,
      184.6363888889, 185.5633333333, 165.7608333333, 166.5833333333,
      167.7191666667, 168.5416666667, 191.1902777778, 192.1172222222,
      159.5869444444, 160.3572222222, 127.6702777778, 128.2838888889,
      147.2275,       147.8411111111, 185.4975,       186.2677777778,
      224.0808333333, 225.0077777778, 200.7608333333, 201.5833333333,
      202.7191666667, 203.5416666667, 230.6347222222, 231.5616666667,
      192.3647222222, 193.135,        153.7813888889, 154.395,
      190.2575,       191.0277777778, 239.6875,       240.6544444444,
      289.5108333333, 290.6744444444, 259.3108333333, 260.3433333333,
      261.7691666667, 262.8016666667, 297.7380555556, 298.9016666667,
      248.3080555556, 249.275,        198.4847222222, 199.255,
      235.7941666667, 236.7211111111, 297.0241666667, 298.1877777778,
      358.7275,       360.1277777778, 321.2208333333, 322.4633333333,
      324.1791666667, 325.4216666667, 368.6280555556, 370.0283333333,
      307.3980555556, 308.5616666667, 245.6947222222, 246.6216666667,
      236.665,        237.5266666667, 298.045,        299.1266666667,
      359.865,        361.1666666667, 322.025,        323.18,
      324.775,        325.93,         369.0683333333, 370.37,
      307.6883333333, 308.77,         245.8683333333, 246.73,
      273.3941666667, 274.3211111111, 344.2241666667, 345.3877777778,
      415.5275,       416.9277777778, 371.6208333333, 372.8633333333,
      374.5791666667, 375.8216666667, 425.4280555556, 426.8283333333,
      354.5980555556, 355.7616666667, 283.2947222222, 284.2216666667,
      232.8708333333, 233.6411111111, 293.1808333333, 294.1477777778,
      353.8841666667, 355.0477777778, 316.4308333333, 317.4633333333,
      318.8891666667, 319.9216666667, 362.1113888889, 363.275,
      301.8013888889, 302.7683333333, 241.0980555556, 241.8683333333,
      189.8408333333, 190.4544444444, 238.9908333333, 239.7611111111,
      288.4541666667, 289.3811111111, 257.8808333333, 258.7033333333,
      259.8391666667, 260.6616666667, 295.0080555556, 295.935,
      245.8580555556, 246.6283333333, 196.3947222222, 197.0083333333};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24,  0.36,  0.48,  0.64,  0.8,   0.64,  0.8,
      0.6,   0.72,  0.48,  0.56,  0.28,  0.32,  0.4,   0.48,  0.96,  1.12,
      1.68,  1.92,  2.56,  2.88,  2.56,  2.88,  2.16,  2.4,   1.6,   1.76,
      0.88,  0.96,  1.08,  1.2,   2.4,   2.64,  3.96,  4.32,  5.76,  6.24,
      5.76,  6.24,  4.68,  5.04,  3.36,  3.6,   1.8,   1.92,  1.08,  1.2,
      2.4,   2.64,  3.96,  4.32,  5.76,  6.24,  5.76,  6.24,  4.68,  5.04,
      3.36,  3.6,   1.8,   1.92,  1.08,  1.2,   2.4,   2.64,  3.96,  4.32,
      5.76,  6.24,  5.76,  6.24,  4.68,  5.04,  3.36,  3.6,   1.8,   1.92,
      1.04,  1.12,  2.24,  2.4,   3.6,   3.84,  5.12,  5.44,  5.12,  5.44,
      4.08,  4.32,  2.88,  3.04,  1.52,  1.6,   0.68,  0.72,  1.44,  1.52,
      2.28,  2.4,   3.2,   3.36,  3.2,   3.36,  2.52,  2.64,  1.76,  1.84,
      0.92,  0.96,  1.,    1.04,  2.08,  2.16,  3.24,  3.36,  4.48,  4.64,
      4.48,  4.64,  3.48,  3.6,   2.4,   2.48,  1.24,  1.28,  2.32,  2.4,
      4.8,   4.96,  7.44,  7.68,  10.24, 10.56, 10.24, 10.56, 7.92,  8.16,
      5.44,  5.6,   2.8,   2.88,  3.96,  4.08,  8.16,  8.4,   12.6,  12.96,
      17.28, 17.76, 17.28, 17.76, 13.32, 13.68, 9.12,  9.36,  4.68,  4.8,
      3.96,  4.08,  8.16,  8.4,   12.6,  12.96, 17.28, 17.76, 17.28, 17.76,
      13.32, 13.68, 9.12,  9.36,  4.68,  4.8,   3.96,  4.08,  8.16,  8.4,
      12.6,  12.96, 17.28, 17.76, 17.28, 17.76, 13.32, 13.68, 9.12,  9.36,
      4.68,  4.8,   2.96,  3.04,  6.08,  6.24,  9.36,  9.6,   12.8,  13.12,
      12.8,  13.12, 9.84,  10.08, 6.72,  6.88,  3.44,  3.52,  1.64,  1.68,
      3.36,  3.44,  5.16,  5.28,  7.04,  7.2,   7.04,  7.2,   5.4,   5.52,
      3.68,  3.76,  1.88,  1.92,  1.96,  2.,    4.,    4.08,  6.12,  6.24,
      8.32,  8.48,  8.32,  8.48,  6.36,  6.48,  4.32,  4.4,   2.2,   2.24,
      4.24,  4.32,  8.64,  8.8,   13.2,  13.44, 17.92, 18.24, 17.92, 18.24,
      13.68, 13.92, 9.28,  9.44,  4.72,  4.8,   6.84,  6.96,  13.92, 14.16,
      21.24, 21.6,  28.8,  29.28, 28.8,  29.28, 21.96, 22.32, 14.88, 15.12,
      7.56,  7.68,  6.84,  6.96,  13.92, 14.16, 21.24, 21.6,  28.8,  29.28,
      28.8,  29.28, 21.96, 22.32, 14.88, 15.12, 7.56,  7.68,  6.84,  6.96,
      13.92, 14.16, 21.24, 21.6,  28.8,  29.28, 28.8,  29.28, 21.96, 22.32,
      14.88, 15.12, 7.56,  7.68,  4.88,  4.96,  9.92,  10.08, 15.12, 15.36,
      20.48, 20.8,  20.48, 20.8,  15.6,  15.84, 10.56, 10.72, 5.36,  5.44,
      2.6,   2.64,  5.28,  5.36,  8.04,  8.16,  10.88, 11.04, 10.88, 11.04,
      8.28,  8.4,   5.6,   5.68,  2.84,  2.88};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      55.3902777778,  56.3172222222,  57.2441666667,  58.1711111111,
      71.5869444444,  72.7505555556,  73.9141666667,  75.0777777778,
      88.7302777778,  90.1305555556,  91.5308333333,  92.9311111111,
      84.5591666667,  85.8016666667,  87.0441666667,  88.2866666667,
      90.4758333333,  91.7183333333,  92.9608333333,  94.2033333333,
      108.5313888889, 109.9316666667, 111.3319444444, 112.7322222222,
      92.3347222222,  93.4983333333,  94.6619444444,  95.8255555556,
      75.1913888889,  76.1183333333,  77.0452777778,  77.9722222222,
      86.4416666667,  87.3033333333,  88.165,         89.0266666667,
      110.4216666667, 111.5033333333, 112.585,        113.6666666667,
      135.2816666667, 136.5833333333, 137.885,        139.1866666667,
      125.455,        126.61,         127.765,        128.92,
      130.955,        132.11,         133.265,        134.42,
      153.6883333333, 154.99,         156.2916666667, 157.5933333333,
      129.7083333333, 130.79,         131.8716666667, 132.9533333333,
      104.8483333333, 105.71,         106.5716666667, 107.4333333333,
      130.5902777778, 131.5172222222, 132.4441666667, 133.3711111111,
      165.9869444444, 167.1505555556, 168.3141666667, 169.4777777778,
      202.3302777778, 203.7305555556, 205.1308333333, 206.5311111111,
      185.3591666667, 186.6016666667, 187.8441666667, 189.0866666667,
      191.2758333333, 192.5183333333, 193.7608333333, 195.0033333333,
      222.1313888889, 223.5316666667, 224.9319444444, 226.3322222222,
      186.7347222222, 187.8983333333, 189.0619444444, 190.2255555556,
      150.3913888889, 151.3183333333, 152.2452777778, 153.1722222222,
      119.8869444444, 120.6572222222, 121.4275,       122.1977777778,
      152.2036111111, 153.1705555556, 154.1375,       155.1044444444,
      185.3069444444, 186.4705555556, 187.6341666667, 188.7977777778,
      169.2691666667, 170.3016666667, 171.3341666667, 172.3666666667,
      174.1858333333, 175.2183333333, 176.2508333333, 177.2833333333,
      201.7613888889, 202.925,        204.0886111111, 205.2522222222,
      169.4447222222, 170.4116666667, 171.3786111111, 172.3455555556,
      136.3413888889, 137.1116666667, 137.8819444444, 138.6522222222,
      104.1702777778, 104.7838888889, 105.3975,       106.0111111111,
      132.1269444444, 132.8972222222, 133.6675,       134.4377777778,
      160.7102777778, 161.6372222222, 162.5641666667, 163.4911111111,
      146.4591666667, 147.2816666667, 148.1041666667, 148.9266666667,
      150.3758333333, 151.1983333333, 152.0208333333, 152.8433333333,
      173.8180555556, 174.745,        175.6719444444, 176.5988888889,
      145.8613888889, 146.6316666667, 147.4019444444, 148.1722222222,
      117.2780555556, 117.8916666667, 118.5052777778, 119.1188888889,
      156.3925,       157.0061111111, 157.6197222222, 158.2333333333,
      197.6825,       198.4527777778, 199.2230555556, 199.9933333333,
      239.5991666667, 240.5261111111, 241.4530555556, 242.38,
      216.4591666667, 217.2816666667, 218.1041666667, 218.9266666667,
      220.3758333333, 221.1983333333, 222.0208333333, 222.8433333333,
      252.7069444444, 253.6338888889, 254.5608333333, 255.4877777778,
      211.4169444444, 212.1872222222, 212.9575,       213.7277777778,
      169.5002777778, 170.1138888889, 170.7275,       171.3411111111,
      207.2025,       207.9727777778, 208.7430555556, 209.5133333333,
      261.8125,       262.7794444444, 263.7463888889, 264.7133333333,
      317.2091666667, 318.3727777778, 319.5363888889, 320.7,
      286.3091666667, 287.3416666667, 288.3741666667, 289.4066666667,
      291.2258333333, 292.2583333333, 293.2908333333, 294.3233333333,
      333.6636111111, 334.8272222222, 335.9908333333, 337.1544444444,
      279.0536111111, 280.0205555556, 280.9875,       281.9544444444,
      223.6569444444, 224.4272222222, 225.1975,       225.9677777778,
      263.0258333333, 263.9527777778, 264.8797222222, 265.8066666667,
      332.2358333333, 333.3994444444, 334.5630555556, 335.7266666667,
      402.3925,       403.7927777778, 405.1930555556, 406.5933333333,
      362.8791666667, 364.1216666667, 365.3641666667, 366.6066666667,
      368.7958333333, 370.0383333333, 371.2808333333, 372.5233333333,
      422.1936111111, 423.5938888889, 424.9941666667, 426.3944444444,
      352.9836111111, 354.1472222222, 355.3108333333, 356.4744444444,
      282.8269444444, 283.7538888889, 284.6808333333, 285.6077777778,
      279.455,        280.3166666667, 281.1783333333, 282.04,
      352.715,        353.7966666667, 354.8783333333, 355.96,
      426.855,        428.1566666667, 429.4583333333, 430.76,
      384.175,        385.33,         386.485,        387.64,
      389.675,        390.83,         391.985,        393.14,
      445.2616666667, 446.5633333333, 447.865,        449.1666666667,
      372.0016666667, 373.0833333333, 374.165,        375.2466666667,
      297.8616666667, 298.7233333333, 299.585,        300.4466666667,
      338.2258333333, 339.1527777778, 340.0797222222, 341.0066666667,
      426.6358333333, 427.7994444444, 428.9630555556, 430.1266666667,
      515.9925,       517.3927777778, 518.7930555556, 520.1933333333,
      463.6791666667, 464.9216666667, 466.1641666667, 467.4066666667,
      469.5958333333, 470.8383333333, 472.0808333333, 473.3233333333,
      535.7936111111, 537.1938888889, 538.5941666667, 539.9944444444,
      447.3836111111, 448.5472222222, 449.7108333333, 450.8744444444,
      358.0269444444, 358.9538888889, 359.8808333333, 360.8077777778,
      292.4291666667, 293.1994444444, 293.9697222222, 294.74,
      368.7991666667, 369.7661111111, 370.7330555556, 371.7,
      445.9558333333, 447.1194444444, 448.2830555556, 449.4466666667,
      400.5491666667, 401.5816666667, 402.6141666667, 403.6466666667,
      405.4658333333, 406.4983333333, 407.5308333333, 408.5633333333,
      462.4102777778, 463.5738888889, 464.7375,       465.9011111111,
      386.0402777778, 387.0072222222, 387.9741666667, 388.9411111111,
      308.8836111111, 309.6538888889, 310.4241666667, 311.1944444444,
      241.6191666667, 242.2327777778, 242.8463888889, 243.46,
      304.6691666667, 305.4394444444, 306.2097222222, 306.98,
      368.3458333333, 369.2727777778, 370.1997222222, 371.1266666667,
      330.6991666667, 331.5216666667, 332.3441666667, 333.1666666667,
      334.6158333333, 335.4383333333, 336.2608333333, 337.0833333333,
      381.4536111111, 382.3805555556, 383.3075,       384.2344444444,
      318.4036111111, 319.1738888889, 319.9441666667, 320.7144444444,
      254.7269444444, 255.3405555556, 255.9541666667, 256.5677777778,
      293.8413888889, 294.455,        295.0686111111, 295.6822222222,
      370.2247222222, 370.995,        371.7652777778, 372.5355555556,
      447.2347222222, 448.1616666667, 449.0886111111, 450.0155555556,
      400.6991666667, 401.5216666667, 402.3441666667, 403.1666666667,
      404.6158333333, 405.4383333333, 406.2608333333, 407.0833333333,
      460.3425,       461.2694444444, 462.1963888889, 463.1233333333,
      383.9591666667, 384.7294444444, 385.4997222222, 386.27,
      306.9491666667, 307.5627777778, 308.1763888889, 308.79,
      379.7447222222, 380.515,        381.2852777778, 382.0555555556,
      478.4080555556, 479.375,        480.3419444444, 481.3088888889,
      577.8580555556, 579.0216666667, 580.1852777778, 581.3488888889,
      517.5891666667, 518.6216666667, 519.6541666667, 520.6866666667,
      522.5058333333, 523.5383333333, 524.5708333333, 525.6033333333,
      594.3125,       595.4761111111, 596.6397222222, 597.8033333333,
      495.6491666667, 496.6161111111, 497.5830555556, 498.55,
      396.1991666667, 396.9694444444, 397.7397222222, 398.51,
      470.6613888889, 471.5883333333, 472.5152777778, 473.4422222222,
      592.8847222222, 594.0483333333, 595.2119444444, 596.3755555556,
      716.0547222222, 717.455,        718.8552777778, 720.2555555556,
      641.1991666667, 642.4416666667, 643.6841666667, 644.9266666667,
      647.1158333333, 648.3583333333, 649.6008333333, 650.8433333333,
      735.8558333333, 737.2561111111, 738.6563888889, 740.0566666667,
      613.6325,       614.7961111111, 615.9597222222, 617.1233333333,
      490.4625,       491.3894444444, 492.3163888889, 493.2433333333,
      472.4683333333, 473.33,         474.1916666667, 475.0533333333,
      595.0083333333, 596.09,         597.1716666667, 598.2533333333,
      718.4283333333, 719.73,         721.0316666667, 722.3333333333,
      642.895,        644.05,         645.205,        646.36,
      648.395,        649.55,         650.705,        651.86,
      736.835,        738.1366666667, 739.4383333333, 740.74,
      614.295,        615.3766666667, 616.4583333333, 617.54,
      490.875,        491.7366666667, 492.5983333333, 493.46,
      545.8613888889, 546.7883333333, 547.7152777778, 548.6422222222,
      687.2847222222, 688.4483333333, 689.6119444444, 690.7755555556,
      829.6547222222, 831.055,        832.4552777778, 833.8555555556,
      741.9991666667, 743.2416666667, 744.4841666667, 745.7266666667,
      747.9158333333, 749.1583333333, 750.4008333333, 751.6433333333,
      849.4558333333, 850.8561111111, 852.2563888889, 853.6566666667,
      708.0325,       709.1961111111, 710.3597222222, 711.5233333333,
      565.6625,       566.5894444444, 567.5163888889, 568.4433333333,
      464.9713888889, 465.7416666667, 466.5119444444, 467.2822222222,
      585.3947222222, 586.3616666667, 587.3286111111, 588.2955555556,
      706.6047222222, 707.7683333333, 708.9319444444, 710.0955555556,
      631.8291666667, 632.8616666667, 633.8941666667, 634.9266666667,
      636.7458333333, 637.7783333333, 638.8108333333, 639.8433333333,
      723.0591666667, 724.2227777778, 725.3863888889, 726.55,
      602.6358333333, 603.6027777778, 604.5697222222, 605.5366666667,
      481.4258333333, 482.1961111111, 482.9663888889, 483.7366666667,
      379.0680555556, 379.6816666667, 380.2952777778, 380.9088888889,
      477.2113888889, 477.9816666667, 478.7519444444, 479.5222222222,
      575.9813888889, 576.9083333333, 577.8352777778, 578.7622222222,
      514.9391666667, 515.7616666667, 516.5841666667, 517.4066666667,
      518.8558333333, 519.6783333333, 520.5008333333, 521.3233333333,
      589.0891666667, 590.0161111111, 590.9430555556, 591.87,
      490.9458333333, 491.7161111111, 492.4863888889, 493.2566666667,
      392.1758333333, 392.7894444444, 393.4030555556, 394.0166666667};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.08,  1.2,   1.32,  1.44,  0.88,  0.96,  1.04,  1.12,  0.52,  0.56,
      0.6,   0.64,  0.72,  0.8,   0.88,  0.96,  1.76,  1.92,  2.08,  2.24,
      3.12,  3.36,  3.6,   3.84,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  4.08,  4.32,  4.56,  4.8,   3.04,  3.2,   3.36,  3.52,
      1.68,  1.76,  1.84,  1.92,  2.04,  2.16,  2.28,  2.4,   4.56,  4.8,
      5.04,  5.28,  7.56,  7.92,  8.28,  8.64,  11.04, 11.52, 12.,   12.48,
      11.04, 11.52, 12.,   12.48, 9.,    9.36,  9.72,  10.08, 6.48,  6.72,
      6.96,  7.2,   3.48,  3.6,   3.72,  3.84,  2.04,  2.16,  2.28,  2.4,
      4.56,  4.8,   5.04,  5.28,  7.56,  7.92,  8.28,  8.64,  11.04, 11.52,
      12.,   12.48, 11.04, 11.52, 12.,   12.48, 9.,    9.36,  9.72,  10.08,
      6.48,  6.72,  6.96,  7.2,   3.48,  3.6,   3.72,  3.84,  2.04,  2.16,
      2.28,  2.4,   4.56,  4.8,   5.04,  5.28,  7.56,  7.92,  8.28,  8.64,
      11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48, 9.,    9.36,
      9.72,  10.08, 6.48,  6.72,  6.96,  7.2,   3.48,  3.6,   3.72,  3.84,
      2.,    2.08,  2.16,  2.24,  4.32,  4.48,  4.64,  4.8,   6.96,  7.2,
      7.44,  7.68,  9.92,  10.24, 10.56, 10.88, 9.92,  10.24, 10.56, 10.88,
      7.92,  8.16,  8.4,   8.64,  5.6,   5.76,  5.92,  6.08,  2.96,  3.04,
      3.12,  3.2,   1.32,  1.36,  1.4,   1.44,  2.8,   2.88,  2.96,  3.04,
      4.44,  4.56,  4.68,  4.8,   6.24,  6.4,   6.56,  6.72,  6.24,  6.4,
      6.56,  6.72,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92,  1.96,  2.,    2.04,  2.08,  4.08,  4.16,
      4.24,  4.32,  6.36,  6.48,  6.6,   6.72,  8.8,   8.96,  9.12,  9.28,
      8.8,   8.96,  9.12,  9.28,  6.84,  6.96,  7.08,  7.2,   4.72,  4.8,
      4.88,  4.96,  2.44,  2.48,  2.52,  2.56,  4.56,  4.64,  4.72,  4.8,
      9.44,  9.6,   9.76,  9.92,  14.64, 14.88, 15.12, 15.36, 20.16, 20.48,
      20.8,  21.12, 20.16, 20.48, 20.8,  21.12, 15.6,  15.84, 16.08, 16.32,
      10.72, 10.88, 11.04, 11.2,  5.52,  5.6,   5.68,  5.76,  7.8,   7.92,
      8.04,  8.16,  16.08, 16.32, 16.56, 16.8,  24.84, 25.2,  25.56, 25.92,
      34.08, 34.56, 35.04, 35.52, 34.08, 34.56, 35.04, 35.52, 26.28, 26.64,
      27.,   27.36, 18.,   18.24, 18.48, 18.72, 9.24,  9.36,  9.48,  9.6,
      7.8,   7.92,  8.04,  8.16,  16.08, 16.32, 16.56, 16.8,  24.84, 25.2,
      25.56, 25.92, 34.08, 34.56, 35.04, 35.52, 34.08, 34.56, 35.04, 35.52,
      26.28, 26.64, 27.,   27.36, 18.,   18.24, 18.48, 18.72, 9.24,  9.36,
      9.48,  9.6,   7.8,   7.92,  8.04,  8.16,  16.08, 16.32, 16.56, 16.8,
      24.84, 25.2,  25.56, 25.92, 34.08, 34.56, 35.04, 35.52, 34.08, 34.56,
      35.04, 35.52, 26.28, 26.64, 27.,   27.36, 18.,   18.24, 18.48, 18.72,
      9.24,  9.36,  9.48,  9.6,   5.84,  5.92,  6.,    6.08,  12.,   12.16,
      12.32, 12.48, 18.48, 18.72, 18.96, 19.2,  25.28, 25.6,  25.92, 26.24,
      25.28, 25.6,  25.92, 26.24, 19.44, 19.68, 19.92, 20.16, 13.28, 13.44,
      13.6,  13.76, 6.8,   6.88,  6.96,  7.04,  3.24,  3.28,  3.32,  3.36,
      6.64,  6.72,  6.8,   6.88,  10.2,  10.32, 10.44, 10.56, 13.92, 14.08,
      14.24, 14.4,  13.92, 14.08, 14.24, 14.4,  10.68, 10.8,  10.92, 11.04,
      7.28,  7.36,  7.44,  7.52,  3.72,  3.76,  3.8,   3.84,  3.88,  3.92,
      3.96,  4.,    7.92,  8.,    8.08,  8.16,  12.12, 12.24, 12.36, 12.48,
      16.48, 16.64, 16.8,  16.96, 16.48, 16.64, 16.8,  16.96, 12.6,  12.72,
      12.84, 12.96, 8.56,  8.64,  8.72,  8.8,   4.36,  4.4,   4.44,  4.48,
      8.4,   8.48,  8.56,  8.64,  17.12, 17.28, 17.44, 17.6,  26.16, 26.4,
      26.64, 26.88, 35.52, 35.84, 36.16, 36.48, 35.52, 35.84, 36.16, 36.48,
      27.12, 27.36, 27.6,  27.84, 18.4,  18.56, 18.72, 18.88, 9.36,  9.44,
      9.52,  9.6,   13.56, 13.68, 13.8,  13.92, 27.6,  27.84, 28.08, 28.32,
      42.12, 42.48, 42.84, 43.2,  57.12, 57.6,  58.08, 58.56, 57.12, 57.6,
      58.08, 58.56, 43.56, 43.92, 44.28, 44.64, 29.52, 29.76, 30.,   30.24,
      15.,   15.12, 15.24, 15.36, 13.56, 13.68, 13.8,  13.92, 27.6,  27.84,
      28.08, 28.32, 42.12, 42.48, 42.84, 43.2,  57.12, 57.6,  58.08, 58.56,
      57.12, 57.6,  58.08, 58.56, 43.56, 43.92, 44.28, 44.64, 29.52, 29.76,
      30.,   30.24, 15.,   15.12, 15.24, 15.36, 13.56, 13.68, 13.8,  13.92,
      27.6,  27.84, 28.08, 28.32, 42.12, 42.48, 42.84, 43.2,  57.12, 57.6,
      58.08, 58.56, 57.12, 57.6,  58.08, 58.56, 43.56, 43.92, 44.28, 44.64,
      29.52, 29.76, 30.,   30.24, 15.,   15.12, 15.24, 15.36, 9.68,  9.76,
      9.84,  9.92,  19.68, 19.84, 20.,   20.16, 30.,   30.24, 30.48, 30.72,
      40.64, 40.96, 41.28, 41.6,  40.64, 40.96, 41.28, 41.6,  30.96, 31.2,
      31.44, 31.68, 20.96, 21.12, 21.28, 21.44, 10.64, 10.72, 10.8,  10.88,
      5.16,  5.2,   5.24,  5.28,  10.48, 10.56, 10.64, 10.72, 15.96, 16.08,
      16.2,  16.32, 21.6,  21.76, 21.92, 22.08, 21.6,  21.76, 21.92, 22.08,
      16.44, 16.56, 16.68, 16.8,  11.12, 11.2,  11.28, 11.36, 5.64,  5.68,
      5.72,  5.76};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.1777777778,   5.5844444444,   7.5386111111,   8.8441666667,
      7.4775,         6.2275,         7.2844444444,   9.5711111111,
      12.6752777778,  14.3141666667,  11.9475,        9.8575,
      11.3311111111,  14.7377777778,  19.2919444444,  21.2641666667,
      17.5975,        14.4275,        15.84,          20.34,
      26.2275,        27.9775,        22.8775,        18.5875,
      21.715,         27.715,         35.4775,        37.2275,
      30.2525,        24.4625,        30.9927777778,  39.4194444444,
      50.2486111111,  52.2208333333,  42.2791666667,  34.0891666667,
      27.8861111111,  35.4327777778,  45.1119444444,  46.7508333333,
      37.8091666667,  30.4591666667,  23.8394444444,  30.2661111111,
      38.4952777778,  39.8008333333,  32.1591666667,  25.8891666667,
      33.6311111111,  42.5577777778,  53.9119444444,  55.2175,
      44.4508333333,  35.6808333333,  44.2577777778,  55.9844444444,
      70.8886111111,  72.5275,        58.3608333333,  46.8308333333,
      55.8244444444,  70.5911111111,  89.3452777778,  91.3175,
      73.4508333333,  58.9208333333,  55.32,          69.9,
      88.3875,        90.1375,        72.4375,        58.0675,
      61.195,         77.275,         97.6375,        99.3875,
      79.8125,        63.9425,        75.4861111111,  95.2727777778,
      120.3019444444, 122.2741666667, 98.1325,        78.5825,
      64.8594444444,  81.8461111111,  103.3252777778, 104.9641666667,
      84.2225,        67.4325,        53.2927777778,  67.2394444444,
      84.8686111111,  86.1741666667,  69.1325,        55.3425,
      63.0844444444,  79.5311111111,  100.2852777778, 101.5908333333,
      81.4241666667,  65.1341666667,  81.2311111111,  102.3977777778,
      129.1019444444, 130.7408333333, 104.7741666667, 83.8041666667,
      100.3177777778, 126.4444444444, 159.3986111111, 161.3708333333,
      129.3041666667, 103.4141666667, 94.8,           119.46,
      150.5475,       152.2975,       121.9975,       97.5475,
      100.675,        126.835,        159.7975,       161.5475,
      129.3725,       103.4225,       119.9794444444, 151.1261111111,
      190.3552777778, 192.3275,       153.9858333333, 123.0758333333,
      101.8327777778, 128.2594444444, 161.5386111111, 163.1775,
      130.6358333333, 104.4058333333, 82.7461111111,  104.2127777778,
      131.2419444444, 132.5475,       106.1058333333, 84.7958333333};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x6x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04, 0.12, 0.12, 0.12, 0.12, 0.08, 0.16, 0.4,  0.4,  0.4,  0.4,  0.24,
      0.36, 0.84, 0.84, 0.84, 0.84, 0.48, 0.64, 1.44, 1.44, 1.44, 1.44, 0.8,
      0.64, 1.44, 1.44, 1.44, 1.44, 0.8,  0.6,  1.32, 1.32, 1.32, 1.32, 0.72,
      0.48, 1.04, 1.04, 1.04, 1.04, 0.56, 0.28, 0.6,  0.6,  0.6,  0.6,  0.32,
      0.36, 0.76, 0.76, 0.76, 0.76, 0.4,  0.8,  1.68, 1.68, 1.68, 1.68, 0.88,
      1.32, 2.76, 2.76, 2.76, 2.76, 1.44, 1.92, 4.,   4.,   4.,   4.,   2.08,
      1.92, 4.,   4.,   4.,   4.,   2.08, 1.56, 3.24, 3.24, 3.24, 3.24, 1.68,
      1.12, 2.32, 2.32, 2.32, 2.32, 1.2,  0.6,  1.24, 1.24, 1.24, 1.24, 0.64,
      0.68, 1.4,  1.4,  1.4,  1.4,  0.72, 1.44, 2.96, 2.96, 2.96, 2.96, 1.52,
      2.28, 4.68, 4.68, 4.68, 4.68, 2.4,  3.2,  6.56, 6.56, 6.56, 6.56, 3.36,
      3.2,  6.56, 6.56, 6.56, 6.56, 3.36, 2.52, 5.16, 5.16, 5.16, 5.16, 2.64,
      1.76, 3.6,  3.6,  3.6,  3.6,  1.84, 0.92, 1.88, 1.88, 1.88, 1.88, 0.96};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.7419444444,   8.3555555556,   10.3986111111,  11.1688888889,
      14.1111111111,  15.0772222222,  16.7222222222,  17.6883333333,
      14.1847222222,  14.955,         11.8413888889,  12.455,
      13.7986111111,  14.5688888889,  18.1752777778,  19.1422222222,
      24.1377777778,  25.3505555556,  27.4155555556,  28.6283333333,
      22.9280555556,  23.895,         18.9447222222,  19.715,
      21.7352777778,  22.6622222222,  28.3119444444,  29.4755555556,
      37.1244444444,  38.5838888889,  41.0688888889,  42.5283333333,
      34.0313888889,  35.195,         27.9280555556,  28.855,
      30.8575,        31.68,          39.6475,        40.68,
      51.16,          52.455,         54.66,          55.955,
      44.7225,        45.755,         36.3525,        37.175,
      42.6075,        43.43,          54.3975,        55.43,
      69.66,          70.955,         73.16,          74.455,
      59.4725,        60.505,         48.1025,        48.925,
      61.0586111111,  61.9855555556,  77.6752777778,  78.8388888889,
      99.0377777778,  100.4972222222, 102.9822222222, 104.4416666667,
      83.3947222222,  84.5583333333,  67.2513888889,  68.1783333333,
      55.0019444444,  55.7722222222,  69.8986111111,  70.8655555556,
      89.0111111111,  90.2238888889,  92.2888888889,  93.5016666667,
      74.6513888889,  75.6183333333,  60.1480555556,  60.9183333333,
      47.0652777778,  47.6788888889,  59.7619444444,  60.5322222222,
      76.0244444444,  76.9905555556,  78.6355555556,  79.6016666667,
      63.5480555556,  64.3183333333,  51.1647222222,  51.7783333333,
      66.6486111111,  67.2622222222,  84.3452777778,  85.1155555556,
      106.8577777778, 107.8238888889, 109.4688888889, 110.435,
      88.1313888889,  88.9016666667,  70.7480555556,  71.3616666667,
      87.7452777778,  88.5155555556,  111.0019444444, 111.9688888889,
      140.5644444444, 141.7772222222, 143.8422222222, 145.055,
      115.7547222222, 116.7216666667, 92.8913888889,  93.6616666667,
      110.7219444444, 111.6488888889, 140.0186111111, 141.1822222222,
      177.2311111111, 178.6905555556, 181.1755555556, 182.635,
      145.7380555556, 146.9016666667, 116.9147222222, 117.8416666667,
      109.8175,       110.64,         138.7675,       139.8,
      175.48,         176.775,        178.98,         180.275,
      143.8425,       144.875,        115.3125,       116.135,
      121.5675,       122.39,         153.5175,       154.55,
      193.98,         195.275,        197.48,         198.775,
      158.5925,       159.625,        127.0625,       127.885,
      150.0452777778, 150.9722222222, 189.3819444444, 190.5455555556,
      239.1444444444, 240.6038888889, 243.0888888889, 244.5483333333,
      195.1013888889, 196.265,        156.2380555556, 157.165,
      128.9486111111, 129.7188888889, 162.7252777778, 163.6922222222,
      205.4377777778, 206.6505555556, 208.7155555556, 209.9283333333,
      167.4780555556, 168.445,        134.0947222222, 134.865,
      105.9719444444, 106.5855555556, 133.7086111111, 134.4788888889,
      168.7711111111, 169.7372222222, 171.3822222222, 172.3483333333,
      137.4947222222, 138.265,        110.0713888889, 110.685,
      125.5552777778, 126.1688888889, 158.2919444444, 159.0622222222,
      199.6044444444, 200.5705555556, 202.2155555556, 203.1816666667,
      162.0780555556, 162.8483333333, 129.6547222222, 130.2683333333,
      161.6919444444, 162.4622222222, 203.8286111111, 204.7955555556,
      256.9911111111, 258.2038888889, 260.2688888889, 261.4816666667,
      208.5813888889, 209.5483333333, 166.8380555556, 167.6083333333,
      199.7086111111, 200.6355555556, 251.7252777778, 252.8888888889,
      317.3377777778, 318.7972222222, 321.2822222222, 322.7416666667,
      257.4447222222, 258.6083333333, 205.9013888889, 206.8283333333,
      188.7775,       189.6,          237.8875,       238.92,
      299.8,          301.095,        303.3,          304.595,
      242.9625,       243.995,        194.2725,       195.095,
      200.5275,       201.35,         252.6375,       253.67,
      318.3,          319.595,        321.8,          323.095,
      257.7125,       258.745,        206.0225,       206.845,
      239.0319444444, 239.9588888889, 301.0886111111, 302.2522222222,
      379.2511111111, 380.7105555556, 383.1955555556, 384.655,
      306.8080555556, 307.9716666667, 245.2247222222, 246.1516666667,
      202.8952777778, 203.6655555556, 255.5519444444, 256.5188888889,
      321.8644444444, 323.0772222222, 325.1422222222, 326.355,
      260.3047222222, 261.2716666667, 208.0413888889, 208.8116666667,
      164.8786111111, 165.4922222222, 207.6552777778, 208.4255555556,
      261.5177777778, 262.4838888889, 264.1288888889, 265.095,
      211.4413888889, 212.2116666667, 168.9780555556, 169.5916666667};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x6x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24,  0.16,  0.24,  0.16,  0.24,  0.16,  0.24, 0.12,
      0.16,  0.24,  0.32,  0.64,  0.8,   0.64,  0.8,   0.64,  0.8,   0.64, 0.8,
      0.4,   0.48,  0.6,   0.72,  1.44,  1.68,  1.44,  1.68,  1.44,  1.68, 1.44,
      1.68,  0.84,  0.96,  1.12,  1.28,  2.56,  2.88,  2.56,  2.88,  2.56, 2.88,
      2.56,  2.88,  1.44,  1.6,   1.12,  1.28,  2.56,  2.88,  2.56,  2.88, 2.56,
      2.88,  2.56,  2.88,  1.44,  1.6,   1.08,  1.2,   2.4,   2.64,  2.4,  2.64,
      2.4,   2.64,  2.4,   2.64,  1.32,  1.44,  0.88,  0.96,  1.92,  2.08, 1.92,
      2.08,  1.92,  2.08,  1.92,  2.08,  1.04,  1.12,  0.52,  0.56,  1.12, 1.2,
      1.12,  1.2,   1.12,  1.2,   1.12,  1.2,   0.6,   0.64,  0.68,  0.72, 1.44,
      1.52,  1.44,  1.52,  1.44,  1.52,  1.44,  1.52,  0.76,  0.8,   1.52, 1.6,
      3.2,   3.36,  3.2,   3.36,  3.2,   3.36,  3.2,   3.36,  1.68,  1.76, 2.52,
      2.64,  5.28,  5.52,  5.28,  5.52,  5.28,  5.52,  5.28,  5.52,  2.76, 2.88,
      3.68,  3.84,  7.68,  8.,    7.68,  8.,    7.68,  8.,    7.68,  8.,   4.,
      4.16,  3.68,  3.84,  7.68,  8.,    7.68,  8.,    7.68,  8.,    7.68, 8.,
      4.,    4.16,  3.,    3.12,  6.24,  6.48,  6.24,  6.48,  6.24,  6.48, 6.24,
      6.48,  3.24,  3.36,  2.16,  2.24,  4.48,  4.64,  4.48,  4.64,  4.48, 4.64,
      4.48,  4.64,  2.32,  2.4,   1.16,  1.2,   2.4,   2.48,  2.4,   2.48, 2.4,
      2.48,  2.4,   2.48,  1.24,  1.28,  1.32,  1.36,  2.72,  2.8,   2.72, 2.8,
      2.72,  2.8,   2.72,  2.8,   1.4,   1.44,  2.8,   2.88,  5.76,  5.92, 5.76,
      5.92,  5.76,  5.92,  5.76,  5.92,  2.96,  3.04,  4.44,  4.56,  9.12, 9.36,
      9.12,  9.36,  9.12,  9.36,  9.12,  9.36,  4.68,  4.8,   6.24,  6.4,  12.8,
      13.12, 12.8,  13.12, 12.8,  13.12, 12.8,  13.12, 6.56,  6.72,  6.24, 6.4,
      12.8,  13.12, 12.8,  13.12, 12.8,  13.12, 12.8,  13.12, 6.56,  6.72, 4.92,
      5.04,  10.08, 10.32, 10.08, 10.32, 10.08, 10.32, 10.08, 10.32, 5.16, 5.28,
      3.44,  3.52,  7.04,  7.2,   7.04,  7.2,   7.04,  7.2,   7.04,  7.2,  3.6,
      3.68,  1.8,   1.84,  3.68,  3.76,  3.68,  3.76,  3.68,  3.76,  3.68, 3.76,
      1.88,  1.92};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14.8702777778,  15.4838888889,  16.0975,        16.7111111111,
      20.0269444444,  20.7972222222,  21.5675,        22.3377777778,
      27.2561111111,  28.2222222222,  29.1883333333,  30.1544444444,
      32.4783333333,  33.4444444444,  34.4105555556,  35.3766666667,
      27.5991666667,  28.3694444444,  29.1397222222,  29.91,
      23.0691666667,  23.6827777778,  24.2963888889,  24.91,
      26.8269444444,  27.5972222222,  28.3675,        29.1377777778,
      35.3836111111,  36.3505555556,  37.3175,        38.2844444444,
      47.0627777778,  48.2755555556,  49.4883333333,  50.7011111111,
      53.6183333333,  54.8311111111,  56.0438888889,  57.2566666667,
      44.8891666667,  45.8561111111,  46.8230555556,  47.79,
      37.1191666667,  37.8894444444,  38.6597222222,  39.43,
      42.5436111111,  43.4705555556,  44.3975,        45.3244444444,
      55.4602777778,  56.6238888889,  57.7875,        58.9511111111,
      72.7894444444,  74.2488888889,  75.7083333333,  77.1677777778,
      80.6783333333,  82.1377777778,  83.5972222222,  85.0566666667,
      66.8991666667,  68.0627777778,  69.2263888889,  70.39,
      54.9291666667,  55.8561111111,  56.7830555556,  57.71,
      60.8925,        61.715,         62.5375,        63.36,
      78.2625,        79.295,         80.3275,        81.36,
      101.025,        102.32,         103.615,        104.91,
      108.025,        109.32,         110.615,        111.91,
      88.4125,        89.445,         90.4775,        91.51,
      71.8825,        72.705,         73.5275,        74.35,
      84.3925,        85.215,         86.0375,        86.86,
      107.7625,       108.795,        109.8275,       110.86,
      138.025,        139.32,         140.615,        141.91,
      145.025,        146.32,         147.615,        148.91,
      117.9125,       118.945,        119.9775,       121.01,
      95.3825,        96.205,         97.0275,        97.85,
      121.1902777778, 122.1172222222, 123.0441666667, 123.9711111111,
      154.1869444444, 155.3505555556, 156.5141666667, 157.6777777778,
      196.6161111111, 198.0755555556, 199.535,        200.9944444444,
      204.505,        205.9644444444, 207.4238888889, 208.8833333333,
      165.6258333333, 166.7894444444, 167.9530555556, 169.1166666667,
      133.5758333333, 134.5027777778, 135.4297222222, 136.3566666667,
      109.2336111111, 110.0038888889, 110.7741666667, 111.5444444444,
      138.8302777778, 139.7972222222, 140.7641666667, 141.7311111111,
      176.8094444444, 178.0222222222, 179.235,        180.4477777778,
      183.365,        184.5777777778, 185.7905555556, 187.0033333333,
      148.3358333333, 149.3027777778, 150.2697222222, 151.2366666667,
      119.5258333333, 120.2961111111, 121.0663888889, 121.8366666667,
      93.5169444444,  94.1305555556,  94.7441666667,  95.3577777778,
      118.7536111111, 119.5238888889, 120.2941666667, 121.0644444444,
      151.0827777778, 152.0488888889, 153.015,        153.9811111111,
      156.305,        157.2711111111, 158.2372222222, 159.2033333333,
      126.3258333333, 127.0961111111, 127.8663888889, 128.6366666667,
      101.7158333333, 102.3294444444, 102.9430555556, 103.5566666667,
      132.6836111111, 133.2972222222, 133.9108333333, 134.5244444444,
      167.9202777778, 168.6905555556, 169.4608333333, 170.2311111111,
      212.7494444444, 213.7155555556, 214.6816666667, 215.6477777778,
      217.9716666667, 218.9377777778, 219.9038888889, 220.87,
      175.4925,       176.2627777778, 177.0330555556, 177.8033333333,
      140.8825,       141.4961111111, 142.1097222222, 142.7233333333,
      174.7202777778, 175.4905555556, 176.2608333333, 177.0311111111,
      221.0369444444, 222.0038888889, 222.9708333333, 223.9377777778,
      279.9161111111, 281.1288888889, 282.3416666667, 283.5544444444,
      286.4716666667, 287.6844444444, 288.8972222222, 290.11,
      230.5425,       231.5094444444, 232.4763888889, 233.4433333333,
      185.0125,       185.7827777778, 186.5530555556, 187.3233333333,
      220.5169444444, 221.4438888889, 222.3708333333, 223.2977777778,
      278.8736111111, 280.0372222222, 281.2008333333, 282.3644444444,
      353.0027777778, 354.4622222222, 355.9216666667, 357.3811111111,
      360.8916666667, 362.3511111111, 363.8105555556, 365.27,
      290.3125,       291.4761111111, 292.6397222222, 293.8033333333,
      232.9025,       233.8294444444, 234.7563888889, 235.6833333333,
      218.8125,       219.635,        220.4575,       221.28,
      276.5025,       277.535,        278.5675,       279.6,
      349.665,        350.96,         352.255,        353.55,
      356.665,        357.96,         359.255,        360.55,
      286.6525,       287.685,        288.7175,       289.75,
      229.8025,       230.625,        231.4475,       232.27,
      242.3125,       243.135,        243.9575,       244.78,
      306.0025,       307.035,        308.0675,       309.1,
      386.665,        387.96,         389.255,        390.55,
      393.665,        394.96,         396.255,        397.55,
      316.1525,       317.185,        318.2175,       319.25,
      253.3025,       254.125,        254.9475,       255.77,
      299.1636111111, 300.0905555556, 301.0175,       301.9444444444,
      377.6002777778, 378.7638888889, 379.9275,       381.0911111111,
      476.8294444444, 478.2888888889, 479.7483333333, 481.2077777778,
      484.7183333333, 486.1777777778, 487.6372222222, 489.0966666667,
      389.0391666667, 390.2027777778, 391.3663888889, 392.53,
      311.5491666667, 312.4761111111, 313.4030555556, 314.33,
      257.1269444444, 257.8972222222, 258.6675,       259.4377777778,
      324.4836111111, 325.4505555556, 326.4175,       327.3844444444,
      409.6627777778, 410.8755555556, 412.0883333333, 413.3011111111,
      416.2183333333, 417.4311111111, 418.6438888889, 419.8566666667,
      333.9891666667, 334.9561111111, 335.9230555556, 336.89,
      267.4191666667, 268.1894444444, 268.9597222222, 269.73,
      211.3302777778, 211.9438888889, 212.5575,       213.1711111111,
      266.6469444444, 267.4172222222, 268.1875,       268.9577777778,
      336.5761111111, 337.5422222222, 338.5083333333, 339.4744444444,
      341.7983333333, 342.7644444444, 343.7305555556, 344.6966666667,
      274.2191666667, 274.9894444444, 275.7597222222, 276.53,
      219.5291666667, 220.1427777778, 220.7563888889, 221.37,
      250.4969444444, 251.1105555556, 251.7241666667, 252.3377777778,
      315.8136111111, 316.5838888889, 317.3541666667, 318.1244444444,
      398.2427777778, 399.2088888889, 400.175,        401.1411111111,
      403.465,        404.4311111111, 405.3972222222, 406.3633333333,
      323.3858333333, 324.1561111111, 324.9263888889, 325.6966666667,
      258.6958333333, 259.3094444444, 259.9230555556, 260.5366666667,
      322.6136111111, 323.3838888889, 324.1541666667, 324.9244444444,
      406.6902777778, 407.6572222222, 408.6241666667, 409.5911111111,
      512.7694444444, 513.9822222222, 515.195,        516.4077777778,
      519.325,        520.5377777778, 521.7505555556, 522.9633333333,
      416.1958333333, 417.1627777778, 418.1297222222, 419.0966666667,
      332.9058333333, 333.6761111111, 334.4463888889, 335.2166666667,
      398.4902777778, 399.4172222222, 400.3441666667, 401.2711111111,
      502.2869444444, 503.4505555556, 504.6141666667, 505.7777777778,
      633.2161111111, 634.6755555556, 636.135,        637.5944444444,
      641.105,        642.5644444444, 644.0238888889, 645.4833333333,
      513.7258333333, 514.8894444444, 516.0530555556, 517.2166666667,
      410.8758333333, 411.8027777778, 412.7297222222, 413.6566666667,
      376.7325,       377.555,        378.3775,       379.2,
      474.7425,       475.775,        476.8075,       477.84,
      598.305,        599.6,          600.895,        602.19,
      605.305,        606.6,          607.895,        609.19,
      484.8925,       485.925,        486.9575,       487.99,
      387.7225,       388.545,        389.3675,       390.19,
      400.2325,       401.055,        401.8775,       402.7,
      504.2425,       505.275,        506.3075,       507.34,
      635.305,        636.6,          637.895,        639.19,
      642.305,        643.6,          644.895,        646.19,
      514.3925,       515.425,        516.4575,       517.49,
      411.2225,       412.045,        412.8675,       413.69,
      477.1369444444, 478.0638888889, 478.9908333333, 479.9177777778,
      601.0136111111, 602.1772222222, 603.3408333333, 604.5044444444,
      757.0427777778, 758.5022222222, 759.9616666667, 761.4211111111,
      764.9316666667, 766.3911111111, 767.8505555556, 769.31,
      612.4525,       613.6161111111, 614.7797222222, 615.9433333333,
      489.5225,       490.4494444444, 491.3763888889, 492.3033333333,
      405.0202777778, 405.7905555556, 406.5608333333, 407.3311111111,
      510.1369444444, 511.1038888889, 512.0708333333, 513.0377777778,
      642.5161111111, 643.7288888889, 644.9416666667, 646.1544444444,
      649.0716666667, 650.2844444444, 651.4972222222, 652.71,
      519.6425,       520.6094444444, 521.5763888889, 522.5433333333,
      415.3125,       416.0827777778, 416.8530555556, 417.6233333333,
      329.1436111111, 329.7572222222, 330.3708333333, 330.9844444444,
      414.5402777778, 415.3105555556, 416.0808333333, 416.8511111111,
      522.0694444444, 523.0355555556, 524.0016666667, 524.9677777778,
      527.2916666667, 528.2577777778, 529.2238888889, 530.19,
      422.1125,       422.8827777778, 423.6530555556, 424.4233333333,
      337.3425,       337.9561111111, 338.5697222222, 339.1833333333};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x6x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.24,  0.32,
      0.4,   0.48,  0.24,  0.32,  0.4,   0.48,  0.24,  0.32,  0.4,   0.48,
      0.2,   0.24,  0.28,  0.32,  0.4,   0.48,  0.56,  0.64,  1.12,  1.28,
      1.44,  1.6,   1.12,  1.28,  1.44,  1.6,   1.12,  1.28,  1.44,  1.6,
      1.12,  1.28,  1.44,  1.6,   0.72,  0.8,   0.88,  0.96,  1.08,  1.2,
      1.32,  1.44,  2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  1.56,  1.68,
      1.8,   1.92,  2.08,  2.24,  2.4,   2.56,  4.8,   5.12,  5.44,  5.76,
      4.8,   5.12,  5.44,  5.76,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  2.72,  2.88,  3.04,  3.2,   2.08,  2.24,  2.4,   2.56,
      4.8,   5.12,  5.44,  5.76,  4.8,   5.12,  5.44,  5.76,  4.8,   5.12,
      5.44,  5.76,  4.8,   5.12,  5.44,  5.76,  2.72,  2.88,  3.04,  3.2,
      2.04,  2.16,  2.28,  2.4,   4.56,  4.8,   5.04,  5.28,  4.56,  4.8,
      5.04,  5.28,  4.56,  4.8,   5.04,  5.28,  4.56,  4.8,   5.04,  5.28,
      2.52,  2.64,  2.76,  2.88,  1.68,  1.76,  1.84,  1.92,  3.68,  3.84,
      4.,    4.16,  3.68,  3.84,  4.,    4.16,  3.68,  3.84,  4.,    4.16,
      3.68,  3.84,  4.,    4.16,  2.,    2.08,  2.16,  2.24,  1.,    1.04,
      1.08,  1.12,  2.16,  2.24,  2.32,  2.4,   2.16,  2.24,  2.32,  2.4,
      2.16,  2.24,  2.32,  2.4,   2.16,  2.24,  2.32,  2.4,   1.16,  1.2,
      1.24,  1.28,  1.32,  1.36,  1.4,   1.44,  2.8,   2.88,  2.96,  3.04,
      2.8,   2.88,  2.96,  3.04,  2.8,   2.88,  2.96,  3.04,  2.8,   2.88,
      2.96,  3.04,  1.48,  1.52,  1.56,  1.6,   2.96,  3.04,  3.12,  3.2,
      6.24,  6.4,   6.56,  6.72,  6.24,  6.4,   6.56,  6.72,  6.24,  6.4,
      6.56,  6.72,  6.24,  6.4,   6.56,  6.72,  3.28,  3.36,  3.44,  3.52,
      4.92,  5.04,  5.16,  5.28,  10.32, 10.56, 10.8,  11.04, 10.32, 10.56,
      10.8,  11.04, 10.32, 10.56, 10.8,  11.04, 10.32, 10.56, 10.8,  11.04,
      5.4,   5.52,  5.64,  5.76,  7.2,   7.36,  7.52,  7.68,  15.04, 15.36,
      15.68, 16.,   15.04, 15.36, 15.68, 16.,   15.04, 15.36, 15.68, 16.,
      15.04, 15.36, 15.68, 16.,   7.84,  8.,    8.16,  8.32,  7.2,   7.36,
      7.52,  7.68,  15.04, 15.36, 15.68, 16.,   15.04, 15.36, 15.68, 16.,
      15.04, 15.36, 15.68, 16.,   15.04, 15.36, 15.68, 16.,   7.84,  8.,
      8.16,  8.32,  5.88,  6.,    6.12,  6.24,  12.24, 12.48, 12.72, 12.96,
      12.24, 12.48, 12.72, 12.96, 12.24, 12.48, 12.72, 12.96, 12.24, 12.48,
      12.72, 12.96, 6.36,  6.48,  6.6,   6.72,  4.24,  4.32,  4.4,   4.48,
      8.8,   8.96,  9.12,  9.28,  8.8,   8.96,  9.12,  9.28,  8.8,   8.96,
      9.12,  9.28,  8.8,   8.96,  9.12,  9.28,  4.56,  4.64,  4.72,  4.8,
      2.28,  2.32,  2.36,  2.4,   4.72,  4.8,   4.88,  4.96,  4.72,  4.8,
      4.88,  4.96,  4.72,  4.8,   4.88,  4.96,  4.72,  4.8,   4.88,  4.96,
      2.44,  2.48,  2.52,  2.56,  2.6,   2.64,  2.68,  2.72,  5.36,  5.44,
      5.52,  5.6,   5.36,  5.44,  5.52,  5.6,   5.36,  5.44,  5.52,  5.6,
      5.36,  5.44,  5.52,  5.6,   2.76,  2.8,   2.84,  2.88,  5.52,  5.6,
      5.68,  5.76,  11.36, 11.52, 11.68, 11.84, 11.36, 11.52, 11.68, 11.84,
      11.36, 11.52, 11.68, 11.84, 11.36, 11.52, 11.68, 11.84, 5.84,  5.92,
      6.,    6.08,  8.76,  8.88,  9.,    9.12,  18.,   18.24, 18.48, 18.72,
      18.,   18.24, 18.48, 18.72, 18.,   18.24, 18.48, 18.72, 18.,   18.24,
      18.48, 18.72, 9.24,  9.36,  9.48,  9.6,   12.32, 12.48, 12.64, 12.8,
      25.28, 25.6,  25.92, 26.24, 25.28, 25.6,  25.92, 26.24, 25.28, 25.6,
      25.92, 26.24, 25.28, 25.6,  25.92, 26.24, 12.96, 13.12, 13.28, 13.44,
      12.32, 12.48, 12.64, 12.8,  25.28, 25.6,  25.92, 26.24, 25.28, 25.6,
      25.92, 26.24, 25.28, 25.6,  25.92, 26.24, 25.28, 25.6,  25.92, 26.24,
      12.96, 13.12, 13.28, 13.44, 9.72,  9.84,  9.96,  10.08, 19.92, 20.16,
      20.4,  20.64, 19.92, 20.16, 20.4,  20.64, 19.92, 20.16, 20.4,  20.64,
      19.92, 20.16, 20.4,  20.64, 10.2,  10.32, 10.44, 10.56, 6.8,   6.88,
      6.96,  7.04,  13.92, 14.08, 14.24, 14.4,  13.92, 14.08, 14.24, 14.4,
      13.92, 14.08, 14.24, 14.4,  13.92, 14.08, 14.24, 14.4,  7.12,  7.2,
      7.28,  7.36,  3.56,  3.6,   3.64,  3.68,  7.28,  7.36,  7.44,  7.52,
      7.28,  7.36,  7.44,  7.52,  7.28,  7.36,  7.44,  7.52,  7.28,  7.36,
      7.44,  7.52,  3.72,  3.76,  3.8,   3.84};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4.6869444444,   6.2236111111,   7.9169444444,   8.4516666667,
      10.2669444444,  8.8869444444,   7.3502777778,   8.2636111111,
      10.8002777778,  13.5336111111,  13.9516666667,  16.4836111111,
      14.1436111111,  11.6069444444,  12.9369444444,  16.7536111111,
      20.8069444444,  20.9916666667,  24.3569444444,  20.7769444444,
      16.9602777778,  18.2291666667,  23.3391666667,  28.6591666667,
      28.105,         31.8091666667,  26.9091666667,  21.7991666667,
      25.0833333333,  31.9433333333,  39.0133333333,  37.73,
      42.1633333333,  35.5133333333,  28.6533333333,  35.8755555556,
      45.5488888889,  55.4588888889,  53.2033333333,  59.0088888889,
      49.5722222222,  39.8988888889,  32.2988888889,  40.9722222222,
      49.8422222222,  47.7033333333,  52.7922222222,  44.3155555556,
      35.6422222222,  27.6255555556,  35.0188888889,  42.5688888889,
      40.6633333333,  44.9188888889,  37.6822222222,  30.2888888889,
      39.0491666667,  49.3591666667,  59.8258333333,  56.705,
      62.1758333333,  52.0225,        41.7125,        51.3991666667,
      64.9491666667,  78.6958333333,  74.525,         81.6458333333,
      68.2925,        54.7425,        64.8458333333,  81.9158333333,
      99.2225,        93.885,         102.7725,       85.9391666667,
      68.8691666667,  64.2891666667,  81.1591666667,  98.2391666667,
      92.785,         101.3891666667, 84.7291666667,  67.8591666667,
      71.1433333333,  89.7633333333,  108.5933333333, 102.41,
      111.7433333333, 93.3333333333,  74.7133333333,  87.7844444444,
      110.7111111111, 133.8744444444, 126.0966666667, 137.4244444444,
      114.7344444444, 91.8077777778,  75.4344444444,  95.1211111111,
      115.0044444444, 108.2766666667, 117.9544444444, 98.4644444444,
      78.7777777778,  61.9877777778,  78.1544444444,  94.4777777778,
      88.9166666667,  96.8277777778,  80.8177777778,  64.6511111111,
      73.4113888889,  92.4947222222,  111.7347222222, 104.9583333333,
      114.0847222222, 95.1580555556,  76.0747222222,  94.5347222222,
      119.0980555556, 143.8580555556, 135.0983333333, 146.8080555556,
      122.4413888889, 97.8780555556,  116.7547222222, 147.0780555556,
      177.6380555556, 166.7783333333, 181.1880555556, 151.1013888889,
      120.7780555556, 110.3491666667, 138.9791666667, 167.8191666667,
      157.465,        170.9691666667, 142.5491666667, 113.9191666667,
      117.2033333333, 147.5833333333, 178.1733333333, 167.09,
      181.3233333333, 151.1533333333, 120.7733333333, 139.6933333333,
      175.8733333333, 212.29,         198.99,         215.84,
      179.8966666667, 143.7166666667, 118.57,         149.27,
      180.1666666667, 168.85,         183.1166666667, 152.6133333333,
      121.9133333333, 96.35,          121.29,         146.3866666667,
      137.17,         148.7366666667, 123.9533333333, 99.0133333333};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x7x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.12,  0.24,  0.24,  0.24,  0.2,   0.12,  0.2,   0.48,  0.84,
      0.84,  0.84,  0.64,  0.36,  0.48,  1.08,  1.8,   1.8,   1.8,   1.32,
      0.72,  0.88,  1.92,  3.12,  3.12,  3.12,  2.24,  1.2,   0.88,  1.92,
      3.12,  3.12,  3.12,  2.24,  1.2,   0.84,  1.8,   2.88,  2.88,  2.88,
      2.04,  1.08,  0.68,  1.44,  2.28,  2.28,  2.28,  1.6,   0.84,  0.4,
      0.84,  1.32,  1.32,  1.32,  0.92,  0.48,  0.52,  1.08,  1.68,  1.68,
      1.68,  1.16,  0.6,   1.16,  2.4,   3.72,  3.72,  3.72,  2.56,  1.32,
      1.92,  3.96,  6.12,  6.12,  6.12,  4.2,   2.16,  2.8,   5.76,  8.88,
      8.88,  8.88,  6.08,  3.12,  2.8,   5.76,  8.88,  8.88,  8.88,  6.08,
      3.12,  2.28,  4.68,  7.2,   7.2,   7.2,   4.92,  2.52,  1.64,  3.36,
      5.16,  5.16,  5.16,  3.52,  1.8,   0.88,  1.8,   2.76,  2.76,  2.76,
      1.88,  0.96,  1.,    2.04,  3.12,  3.12,  3.12,  2.12,  1.08,  2.12,
      4.32,  6.6,   6.6,   6.6,   4.48,  2.28,  3.36,  6.84,  10.44, 10.44,
      10.44, 7.08,  3.6,   4.72,  9.6,   14.64, 14.64, 14.64, 9.92,  5.04,
      4.72,  9.6,   14.64, 14.64, 14.64, 9.92,  5.04,  3.72,  7.56,  11.52,
      11.52, 11.52, 7.8,   3.96,  2.6,   5.28,  8.04,  8.04,  8.04,  5.44,
      2.76,  1.36,  2.76,  4.2,   4.2,   4.2,   2.84,  1.44};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8.7602777778,   9.3738888889,   11.6769444444,  12.4472222222,
      14.9069444444,  15.8338888889,  16.0416666667,  16.9033333333,
      19.6069444444,  20.5338888889,  17.0036111111,  17.7738888889,
      14.0869444444,  14.7005555556,  15.7569444444,  16.5272222222,
      20.6336111111,  21.6005555556,  25.9036111111,  27.0672222222,
      26.8216666667,  27.9033333333,  31.8036111111,  32.9672222222,
      27.3202777778,  28.2872222222,  22.4436111111,  23.2138888889,
      24.9469444444,  25.8738888889,  32.3436111111,  33.5072222222,
      40.2136111111,  41.6138888889,  40.6816666667,  41.9833333333,
      47.3136111111,  48.7138888889,  40.3902777778,  41.5538888889,
      32.9936111111,  33.9205555556,  35.6358333333,  36.4583333333,
      45.6458333333,  46.6783333333,  56.0758333333,  57.3183333333,
      55.055,         56.21,          62.3758333333,  63.6183333333,
      52.7858333333,  53.8183333333,  42.7758333333,  43.5983333333,
      49.3441666667,  50.1666666667,  62.8541666667,  63.8866666667,
      76.7841666667,  78.0266666667,  74.305,         75.46,
      83.0841666667,  84.3266666667,  69.9941666667,  71.0266666667,
      56.4841666667,  57.3066666667,  70.8241666667,  71.7511111111,
      89.9341666667,  91.0977777778,  109.5175,       110.9177777778,
      105.105,        106.4066666667, 116.6175,       118.0177777778,
      97.9808333333,  99.1444444444,  78.8708333333,  79.7977777778,
      63.8275,        64.5977777778,  80.9775,        81.9444444444,
      98.5208333333,  99.6844444444,  94.325,         95.4066666667,
      104.4208333333, 105.5844444444, 87.6641666667,  88.6311111111,
      70.5141666667,  71.2844444444,  54.6375,        55.2511111111,
      69.2675,        70.0377777778,  84.2108333333,  85.1377777778,
      80.465,         81.3266666667,  88.9108333333,  89.8377777778,
      74.5941666667,  75.3644444444,  59.9641666667,  60.5777777778,
      77.4847222222,  78.0983333333,  97.9480555556,  98.7183333333,
      118.7247222222, 119.6516666667, 112.5483333333, 113.41,
      123.4247222222, 124.3516666667, 103.2747222222, 104.045,
      82.8113888889,  83.425,         102.0280555556, 102.7983333333,
      128.9313888889, 129.8983333333, 156.2280555556, 157.3916666667,
      147.9683333333, 149.05,         162.1280555556, 163.2916666667,
      135.6180555556, 136.585,        108.7147222222, 109.485,
      128.7647222222, 129.6916666667, 162.6680555556, 163.8316666667,
      197.0447222222, 198.445,        186.4683333333, 187.77,
      204.1447222222, 205.545,        170.7147222222, 171.8783333333,
      136.8113888889, 137.7383333333, 127.7558333333, 128.5783333333,
      161.2858333333, 162.3183333333, 195.2358333333, 196.4783333333,
      184.415,        185.57,         201.5358333333, 202.7783333333,
      168.4258333333, 169.4583333333, 134.8958333333, 135.7183333333,
      141.4641666667, 142.2866666667, 178.4941666667, 179.5266666667,
      215.9441666667, 217.1866666667, 203.665,        204.82,
      222.2441666667, 223.4866666667, 185.6341666667, 186.6666666667,
      148.6041666667, 149.4266666667, 174.6419444444, 175.5688888889,
      220.2586111111, 221.4222222222, 266.3486111111, 267.7488888889,
      250.8916666667, 252.1933333333, 273.4486111111, 274.8488888889,
      228.3052777778, 229.4688888889, 182.6886111111, 183.6155555556,
      150.0986111111, 150.8688888889, 189.2752777778, 190.2422222222,
      228.8452777778, 230.0088888889, 215.4716666667, 216.5533333333,
      234.7452777778, 235.9088888889, 195.9619444444, 196.9288888889,
      156.7852777778, 157.5555555556, 123.3619444444, 123.9755555556,
      155.5386111111, 156.3088888889, 188.0286111111, 188.9555555556,
      176.9716666667, 177.8333333333, 192.7286111111, 193.6555555556,
      160.8652777778, 161.6355555556, 128.6886111111, 129.3022222222,
      146.2091666667, 146.8227777778, 184.2191666667, 184.9894444444,
      222.5425,       223.4694444444, 209.055,        209.9166666667,
      227.2425,       228.1694444444, 189.5458333333, 190.3161111111,
      151.5358333333, 152.1494444444, 188.2991666667, 189.0694444444,
      237.2291666667, 238.1961111111, 286.5525,       287.7161111111,
      269.115,        270.1966666667, 292.4525,       293.6161111111,
      243.9158333333, 244.8827777778, 194.9858333333, 195.7561111111,
      232.5825,       233.5094444444, 292.9925,       294.1561111111,
      353.8758333333, 355.2761111111, 332.255,        333.5566666667,
      360.9758333333, 362.3761111111, 301.0391666667, 302.2027777778,
      240.6291666667, 241.5561111111, 219.8758333333, 220.6983333333,
      276.9258333333, 277.9583333333, 334.3958333333, 335.6383333333,
      313.775,        314.93,         340.6958333333, 341.9383333333,
      284.0658333333, 285.0983333333, 227.0158333333, 227.8383333333,
      233.5841666667, 234.4066666667, 294.1341666667, 295.1666666667,
      355.1041666667, 356.3466666667, 333.025,        334.18,
      361.4041666667, 362.6466666667, 301.2741666667, 302.3066666667,
      240.7241666667, 241.5466666667, 278.4597222222, 279.3866666667,
      350.5830555556, 351.7466666667, 423.1797222222, 424.58,
      396.6783333333, 397.98,         430.2797222222, 431.68,
      358.6297222222, 359.7933333333, 286.5063888889, 287.4333333333,
      236.3697222222, 237.14,         297.5730555556, 298.54,
      359.1697222222, 360.3333333333, 336.6183333333, 337.7,
      365.0697222222, 366.2333333333, 304.2597222222, 305.2266666667,
      243.0563888889, 243.8266666667, 192.0863888889, 192.7,
      241.8097222222, 242.58,         291.8463888889, 292.7733333333,
      273.4783333333, 274.34,         296.5463888889, 297.4733333333,
      247.1363888889, 247.9066666667, 197.4130555556, 198.0266666667};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x7x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24,  0.36,  0.48,  0.36,  0.48,  0.36,  0.48,
      0.32,  0.4,   0.2,   0.24,  0.32,  0.4,   0.8,   0.96,  1.44,  1.68,
      1.44,  1.68,  1.44,  1.68,  1.12,  1.28,  0.64,  0.72,  0.84,  0.96,
      1.92,  2.16,  3.24,  3.6,   3.24,  3.6,   3.24,  3.6,   2.4,   2.64,
      1.32,  1.44,  1.6,   1.76,  3.52,  3.84,  5.76,  6.24,  5.76,  6.24,
      5.76,  6.24,  4.16,  4.48,  2.24,  2.4,   1.6,   1.76,  3.52,  3.84,
      5.76,  6.24,  5.76,  6.24,  5.76,  6.24,  4.16,  4.48,  2.24,  2.4,
      1.56,  1.68,  3.36,  3.6,   5.4,   5.76,  5.4,   5.76,  5.4,   5.76,
      3.84,  4.08,  2.04,  2.16,  1.28,  1.36,  2.72,  2.88,  4.32,  4.56,
      4.32,  4.56,  4.32,  4.56,  3.04,  3.2,   1.6,   1.68,  0.76,  0.8,
      1.6,   1.68,  2.52,  2.64,  2.52,  2.64,  2.52,  2.64,  1.76,  1.84,
      0.92,  0.96,  1.,    1.04,  2.08,  2.16,  3.24,  3.36,  3.24,  3.36,
      3.24,  3.36,  2.24,  2.32,  1.16,  1.2,   2.24,  2.32,  4.64,  4.8,
      7.2,   7.44,  7.2,   7.44,  7.2,   7.44,  4.96,  5.12,  2.56,  2.64,
      3.72,  3.84,  7.68,  7.92,  11.88, 12.24, 11.88, 12.24, 11.88, 12.24,
      8.16,  8.4,   4.2,   4.32,  5.44,  5.6,   11.2,  11.52, 17.28, 17.76,
      17.28, 17.76, 17.28, 17.76, 11.84, 12.16, 6.08,  6.24,  5.44,  5.6,
      11.2,  11.52, 17.28, 17.76, 17.28, 17.76, 17.28, 17.76, 11.84, 12.16,
      6.08,  6.24,  4.44,  4.56,  9.12,  9.36,  14.04, 14.4,  14.04, 14.4,
      14.04, 14.4,  9.6,   9.84,  4.92,  5.04,  3.2,   3.28,  6.56,  6.72,
      10.08, 10.32, 10.08, 10.32, 10.08, 10.32, 6.88,  7.04,  3.52,  3.6,
      1.72,  1.76,  3.52,  3.6,   5.4,   5.52,  5.4,   5.52,  5.4,   5.52,
      3.68,  3.76,  1.88,  1.92,  1.96,  2.,    4.,    4.08,  6.12,  6.24,
      6.12,  6.24,  6.12,  6.24,  4.16,  4.24,  2.12,  2.16,  4.16,  4.24,
      8.48,  8.64,  12.96, 13.2,  12.96, 13.2,  12.96, 13.2,  8.8,   8.96,
      4.48,  4.56,  6.6,   6.72,  13.44, 13.68, 20.52, 20.88, 20.52, 20.88,
      20.52, 20.88, 13.92, 14.16, 7.08,  7.2,   9.28,  9.44,  18.88, 19.2,
      28.8,  29.28, 28.8,  29.28, 28.8,  29.28, 19.52, 19.84, 9.92,  10.08,
      9.28,  9.44,  18.88, 19.2,  28.8,  29.28, 28.8,  29.28, 28.8,  29.28,
      19.52, 19.84, 9.92,  10.08, 7.32,  7.44,  14.88, 15.12, 22.68, 23.04,
      22.68, 23.04, 22.68, 23.04, 15.36, 15.6,  7.8,   7.92,  5.12,  5.2,
      10.4,  10.56, 15.84, 16.08, 15.84, 16.08, 15.84, 16.08, 10.72, 10.88,
      5.44,  5.52,  2.68,  2.72,  5.44,  5.52,  8.28,  8.4,   8.28,  8.4,
      8.28,  8.4,   5.6,   5.68,  2.84,  2.88};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16.9069444444,  17.5205555556,  18.1341666667,  18.7477777778,
      22.5836111111,  23.3538888889,  24.1241666667,  24.8944444444,
      28.8869444444,  29.8138888889,  30.7408333333,  31.6677777778,
      31.2216666667,  32.0833333333,  32.945,         33.8066666667,
      38.2869444444,  39.2138888889,  40.1408333333,  41.0677777778,
      33.2369444444,  34.0072222222,  34.7775,        35.5477777778,
      27.5602777778,  28.1738888889,  28.7875,        29.4011111111,
      30.7436111111,  31.5138888889,  32.2841666667,  33.0544444444,
      40.3002777778,  41.2672222222,  42.2341666667,  43.2011111111,
      50.6436111111,  51.8072222222,  52.9708333333,  54.1344444444,
      52.5616666667,  53.6433333333,  54.725,         55.8066666667,
      62.4436111111,  63.6072222222,  64.7708333333,  65.9344444444,
      53.6736111111,  54.6405555556,  55.6075,        56.5744444444,
      44.1169444444,  44.8872222222,  45.6575,        46.4277777778,
      48.9669444444,  49.8938888889,  50.8208333333,  51.7477777778,
      63.5236111111,  64.6872222222,  65.8508333333,  67.0144444444,
      79.0269444444,  80.4272222222,  81.8275,        83.2277777778,
      80.0616666667,  81.3633333333,  82.665,         83.9666666667,
      93.2269444444,  94.6272222222,  96.0275,        97.4277777778,
      79.6169444444,  80.7805555556,  81.9441666667,  83.1077777778,
      65.0602777778,  65.9872222222,  66.9141666667,  67.8411111111,
      70.4491666667,  71.2716666667,  72.0941666667,  72.9166666667,
      90.2591666667,  91.2916666667,  92.3241666667,  93.3566666667,
      110.9091666667, 112.1516666667, 113.3941666667, 114.6366666667,
      108.955,        110.11,         111.265,        112.42,
      123.5091666667, 124.7516666667, 125.9941666667, 127.2366666667,
      104.5391666667, 105.5716666667, 106.6041666667, 107.6366666667,
      84.7291666667,  85.5516666667,  86.3741666667,  87.1966666667,
      97.8658333333,  98.6883333333,  99.5108333333,  100.3333333333,
      124.6758333333, 125.7083333333, 126.7408333333, 127.7733333333,
      152.3258333333, 153.5683333333, 154.8108333333, 156.0533333333,
      147.455,        148.61,         149.765,        150.92,
      164.9258333333, 166.1683333333, 167.4108333333, 168.6533333333,
      138.9558333333, 139.9883333333, 141.0208333333, 142.0533333333,
      112.1458333333, 112.9683333333, 113.7908333333, 114.6133333333,
      140.7213888889, 141.6483333333, 142.5752777778, 143.5022222222,
      178.7047222222, 179.8683333333, 181.0319444444, 182.1955555556,
      217.6347222222, 219.035,        220.4352777778, 221.8355555556,
      208.9083333333, 210.21,         211.5116666667, 212.8133333333,
      231.8347222222, 233.235,        234.6352777778, 236.0355555556,
      194.7980555556, 195.9616666667, 197.1252777778, 198.2888888889,
      156.8147222222, 157.7416666667, 158.6686111111, 159.5955555556,
      126.8847222222, 127.655,        128.4252777778, 129.1955555556,
      160.9880555556, 161.955,        162.9219444444, 163.8888888889,
      195.8780555556, 197.0416666667, 198.2052777778, 199.3688888889,
      187.5683333333, 188.65,         189.7316666667, 190.8133333333,
      207.6780555556, 208.8416666667, 210.0052777778, 211.1688888889,
      174.3613888889, 175.3283333333, 176.2952777778, 177.2622222222,
      140.2580555556, 141.0283333333, 141.7986111111, 142.5688888889,
      108.6613888889, 109.275,        109.8886111111, 110.5022222222,
      137.7647222222, 138.535,        139.3052777778, 140.0755555556,
      167.4947222222, 168.4216666667, 169.3486111111, 170.2755555556,
      160.0683333333, 160.93,         161.7916666667, 162.6533333333,
      176.8947222222, 177.8216666667, 178.7486111111, 179.6755555556,
      148.4180555556, 149.1883333333, 149.9586111111, 150.7288888889,
      119.3147222222, 119.9283333333, 120.5419444444, 121.1555555556,
      154.3558333333, 154.9694444444, 155.5830555556, 156.1966666667,
      195.1258333333, 195.8961111111, 196.6663888889, 197.4366666667,
      236.5225,       237.4494444444, 238.3763888889, 239.3033333333,
      224.235,        225.0966666667, 225.9583333333, 226.82,
      245.9225,       246.8494444444, 247.7763888889, 248.7033333333,
      205.7791666667, 206.5494444444, 207.3197222222, 208.09,
      165.0091666667, 165.6227777778, 166.2363888889, 166.85,
      203.2858333333, 204.0561111111, 204.8263888889, 205.5966666667,
      256.8958333333, 257.8627777778, 258.8297222222, 259.7966666667,
      311.2925,       312.4561111111, 313.6197222222, 314.7833333333,
      294.855,        295.9366666667, 297.0183333333, 298.1,
      323.0925,       324.2561111111, 325.4197222222, 326.5833333333,
      270.2691666667, 271.2361111111, 272.2030555556, 273.17,
      216.6591666667, 217.4294444444, 218.1997222222, 218.97,
      256.6025,       257.5294444444, 258.4563888889, 259.3833333333,
      324.1725,       325.3361111111, 326.4997222222, 327.6633333333,
      392.6891666667, 394.0894444444, 395.4897222222, 396.89,
      371.635,        372.9366666667, 374.2383333333, 375.54,
      406.8891666667, 408.2894444444, 409.6897222222, 411.09,
      340.2658333333, 341.4294444444, 342.5930555556, 343.7566666667,
      272.6958333333, 273.6227777778, 274.5497222222, 275.4766666667,
      254.6891666667, 255.5116666667, 256.3341666667, 257.1566666667,
      321.5391666667, 322.5716666667, 323.6041666667, 324.6366666667,
      389.2291666667, 390.4716666667, 391.7141666667, 392.9566666667,
      367.675,        368.83,         369.985,        371.14,
      401.8291666667, 403.0716666667, 404.3141666667, 405.5566666667,
      335.8191666667, 336.8516666667, 337.8841666667, 338.9166666667,
      268.9691666667, 269.7916666667, 270.6141666667, 271.4366666667,
      282.1058333333, 282.9283333333, 283.7508333333, 284.5733333333,
      355.9558333333, 356.9883333333, 358.0208333333, 359.0533333333,
      430.6458333333, 431.8883333333, 433.1308333333, 434.3733333333,
      406.175,        407.33,         408.485,        409.64,
      443.2458333333, 444.4883333333, 445.7308333333, 446.9733333333,
      370.2358333333, 371.2683333333, 372.3008333333, 373.3333333333,
      296.3858333333, 297.2083333333, 298.0308333333, 298.8533333333,
      348.3569444444, 349.2838888889, 350.2108333333, 351.1377777778,
      439.3536111111, 440.5172222222, 441.6808333333, 442.8444444444,
      531.2969444444, 532.6972222222, 534.0975,       535.4977777778,
      500.4816666667, 501.7833333333, 503.085,        504.3866666667,
      545.4969444444, 546.8972222222, 548.2975,       549.6977777778,
      455.4469444444, 456.6105555556, 457.7741666667, 458.9377777778,
      364.4502777778, 365.3772222222, 366.3041666667, 367.2311111111,
      299.4269444444, 300.1972222222, 300.9675,       301.7377777778,
      377.5836111111, 378.5505555556, 379.5175,       380.4844444444,
      456.5269444444, 457.6905555556, 458.8541666667, 460.0177777778,
      429.8616666667, 430.9433333333, 432.025,        433.1066666667,
      468.3269444444, 469.4905555556, 470.6541666667, 471.8177777778,
      390.9569444444, 391.9238888889, 392.8908333333, 393.8577777778,
      312.8002777778, 313.5705555556, 314.3408333333, 315.1111111111,
      246.1102777778, 246.7238888889, 247.3375,       247.9511111111,
      310.3069444444, 311.0772222222, 311.8475,       312.6177777778,
      375.1302777778, 376.0572222222, 376.9841666667, 377.9111111111,
      353.0816666667, 353.9433333333, 354.805,        355.6666666667,
      384.5302777778, 385.4572222222, 386.3841666667, 387.3111111111,
      320.9602777778, 321.7305555556, 322.5008333333, 323.2711111111,
      256.7636111111, 257.3772222222, 257.9908333333, 258.6044444444,
      291.8047222222, 292.4183333333, 293.0319444444, 293.6455555556,
      367.6680555556, 368.4383333333, 369.2086111111, 369.9788888889,
      444.1580555556, 445.085,        446.0119444444, 446.9388888889,
      417.2483333333, 418.11,         418.9716666667, 419.8333333333,
      453.5580555556, 454.485,        455.4119444444, 456.3388888889,
      378.3213888889, 379.0916666667, 379.8619444444, 380.6322222222,
      302.4580555556, 303.0716666667, 303.6852777778, 304.2988888889,
      375.8280555556, 376.5983333333, 377.3686111111, 378.1388888889,
      473.4913888889, 474.4583333333, 475.4252777778, 476.3922222222,
      571.9413888889, 573.105,        574.2686111111, 575.4322222222,
      537.1483333333, 538.23,         539.3116666667, 540.3933333333,
      583.7413888889, 584.905,        586.0686111111, 587.2322222222,
      486.8647222222, 487.8316666667, 488.7986111111, 489.7655555556,
      389.2013888889, 389.9716666667, 390.7419444444, 391.5122222222,
      464.2380555556, 465.165,        466.0919444444, 467.0188888889,
      584.8213888889, 585.985,        587.1486111111, 588.3122222222,
      706.3513888889, 707.7516666667, 709.1519444444, 710.5522222222,
      663.2083333333, 664.51,         665.8116666667, 667.1133333333,
      720.5513888889, 721.9516666667, 723.3519444444, 724.7522222222,
      600.9147222222, 602.0783333333, 603.2419444444, 604.4055555556,
      480.3313888889, 481.2583333333, 482.1852777778, 483.1122222222,
      438.9291666667, 439.7516666667, 440.5741666667, 441.3966666667,
      552.8191666667, 553.8516666667, 554.8841666667, 555.9166666667,
      667.5491666667, 668.7916666667, 670.0341666667, 671.2766666667,
      626.395,        627.55,         628.705,        629.86,
      680.1491666667, 681.3916666667, 682.6341666667, 683.8766666667,
      567.0991666667, 568.1316666667, 569.1641666667, 570.1966666667,
      453.2091666667, 454.0316666667, 454.8541666667, 455.6766666667,
      466.3458333333, 467.1683333333, 467.9908333333, 468.8133333333,
      587.2358333333, 588.2683333333, 589.3008333333, 590.3333333333,
      708.9658333333, 710.2083333333, 711.4508333333, 712.6933333333,
      664.895,        666.05,         667.205,        668.36,
      721.5658333333, 722.8083333333, 724.0508333333, 725.2933333333,
      601.5158333333, 602.5483333333, 603.5808333333, 604.6133333333,
      480.6258333333, 481.4483333333, 482.2708333333, 483.0933333333,
      555.9925,       556.9194444444, 557.8463888889, 558.7733333333,
      700.0025,       701.1661111111, 702.3297222222, 703.4933333333,
      844.9591666667, 846.3594444444, 847.7597222222, 849.16,
      792.055,        793.3566666667, 794.6583333333, 795.96,
      859.1591666667, 860.5594444444, 861.9597222222, 863.36,
      716.0958333333, 717.2594444444, 718.4230555556, 719.5866666667,
      572.0858333333, 573.0127777778, 573.9397222222, 574.8666666667,
      471.9691666667, 472.7394444444, 473.5097222222, 474.28,
      594.1791666667, 595.1461111111, 596.1130555556, 597.08,
      717.1758333333, 718.3394444444, 719.5030555556, 720.6666666667,
      672.155,        673.2366666667, 674.3183333333, 675.4,
      728.9758333333, 730.1394444444, 731.3030555556, 732.4666666667,
      607.5525,       608.5194444444, 609.4863888889, 610.4533333333,
      485.3425,       486.1127777778, 486.8830555556, 487.6533333333,
      383.5591666667, 384.1727777778, 384.7863888889, 385.4,
      482.8491666667, 483.6194444444, 484.3897222222, 485.16,
      582.7658333333, 583.6927777778, 584.6197222222, 585.5466666667,
      546.095,        546.9566666667, 547.8183333333, 548.68,
      592.1658333333, 593.0927777778, 594.0197222222, 594.9466666667,
      493.5025,       494.2727777778, 495.0430555556, 495.8133333333,
      394.2125,       394.8261111111, 395.4397222222, 396.0533333333};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x7x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.12,  0.16,  0.24,  0.32,  0.4,   0.48,  0.6,   0.72,
      0.84,  0.96,  0.6,   0.72,  0.84,  0.96,  0.6,   0.72,  0.84,  0.96,
      0.56,  0.64,  0.72,  0.8,   0.36,  0.4,   0.44,  0.48,  0.56,  0.64,
      0.72,  0.8,   1.44,  1.6,   1.76,  1.92,  2.64,  2.88,  3.12,  3.36,
      2.64,  2.88,  3.12,  3.36,  2.64,  2.88,  3.12,  3.36,  2.08,  2.24,
      2.4,   2.56,  1.2,   1.28,  1.36,  1.44,  1.56,  1.68,  1.8,   1.92,
      3.6,   3.84,  4.08,  4.32,  6.12,  6.48,  6.84,  7.2,   6.12,  6.48,
      6.84,  7.2,   6.12,  6.48,  6.84,  7.2,   4.56,  4.8,   5.04,  5.28,
      2.52,  2.64,  2.76,  2.88,  3.04,  3.2,   3.36,  3.52,  6.72,  7.04,
      7.36,  7.68,  11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48,
      11.04, 11.52, 12.,   12.48, 8.,    8.32,  8.64,  8.96,  4.32,  4.48,
      4.64,  4.8,   3.04,  3.2,   3.36,  3.52,  6.72,  7.04,  7.36,  7.68,
      11.04, 11.52, 12.,   12.48, 11.04, 11.52, 12.,   12.48, 11.04, 11.52,
      12.,   12.48, 8.,    8.32,  8.64,  8.96,  4.32,  4.48,  4.64,  4.8,
      3.,    3.12,  3.24,  3.36,  6.48,  6.72,  6.96,  7.2,   10.44, 10.8,
      11.16, 11.52, 10.44, 10.8,  11.16, 11.52, 10.44, 10.8,  11.16, 11.52,
      7.44,  7.68,  7.92,  8.16,  3.96,  4.08,  4.2,   4.32,  2.48,  2.56,
      2.64,  2.72,  5.28,  5.44,  5.6,   5.76,  8.4,   8.64,  8.88,  9.12,
      8.4,   8.64,  8.88,  9.12,  8.4,   8.64,  8.88,  9.12,  5.92,  6.08,
      6.24,  6.4,   3.12,  3.2,   3.28,  3.36,  1.48,  1.52,  1.56,  1.6,
      3.12,  3.2,   3.28,  3.36,  4.92,  5.04,  5.16,  5.28,  4.92,  5.04,
      5.16,  5.28,  4.92,  5.04,  5.16,  5.28,  3.44,  3.52,  3.6,   3.68,
      1.8,   1.84,  1.88,  1.92,  1.96,  2.,    2.04,  2.08,  4.08,  4.16,
      4.24,  4.32,  6.36,  6.48,  6.6,   6.72,  6.36,  6.48,  6.6,   6.72,
      6.36,  6.48,  6.6,   6.72,  4.4,   4.48,  4.56,  4.64,  2.28,  2.32,
      2.36,  2.4,   4.4,   4.48,  4.56,  4.64,  9.12,  9.28,  9.44,  9.6,
      14.16, 14.4,  14.64, 14.88, 14.16, 14.4,  14.64, 14.88, 14.16, 14.4,
      14.64, 14.88, 9.76,  9.92,  10.08, 10.24, 5.04,  5.12,  5.2,   5.28,
      7.32,  7.44,  7.56,  7.68,  15.12, 15.36, 15.6,  15.84, 23.4,  23.76,
      24.12, 24.48, 23.4,  23.76, 24.12, 24.48, 23.4,  23.76, 24.12, 24.48,
      16.08, 16.32, 16.56, 16.8,  8.28,  8.4,   8.52,  8.64,  10.72, 10.88,
      11.04, 11.2,  22.08, 22.4,  22.72, 23.04, 34.08, 34.56, 35.04, 35.52,
      34.08, 34.56, 35.04, 35.52, 34.08, 34.56, 35.04, 35.52, 23.36, 23.68,
      24.,   24.32, 12.,   12.16, 12.32, 12.48, 10.72, 10.88, 11.04, 11.2,
      22.08, 22.4,  22.72, 23.04, 34.08, 34.56, 35.04, 35.52, 34.08, 34.56,
      35.04, 35.52, 34.08, 34.56, 35.04, 35.52, 23.36, 23.68, 24.,   24.32,
      12.,   12.16, 12.32, 12.48, 8.76,  8.88,  9.,    9.12,  18.,   18.24,
      18.48, 18.72, 27.72, 28.08, 28.44, 28.8,  27.72, 28.08, 28.44, 28.8,
      27.72, 28.08, 28.44, 28.8,  18.96, 19.2,  19.44, 19.68, 9.72,  9.84,
      9.96,  10.08, 6.32,  6.4,   6.48,  6.56,  12.96, 13.12, 13.28, 13.44,
      19.92, 20.16, 20.4,  20.64, 19.92, 20.16, 20.4,  20.64, 19.92, 20.16,
      20.4,  20.64, 13.6,  13.76, 13.92, 14.08, 6.96,  7.04,  7.12,  7.2,
      3.4,   3.44,  3.48,  3.52,  6.96,  7.04,  7.12,  7.2,   10.68, 10.8,
      10.92, 11.04, 10.68, 10.8,  10.92, 11.04, 10.68, 10.8,  10.92, 11.04,
      7.28,  7.36,  7.44,  7.52,  3.72,  3.76,  3.8,   3.84,  3.88,  3.92,
      3.96,  4.,    7.92,  8.,    8.08,  8.16,  12.12, 12.24, 12.36, 12.48,
      12.12, 12.24, 12.36, 12.48, 12.12, 12.24, 12.36, 12.48, 8.24,  8.32,
      8.4,   8.48,  4.2,   4.24,  4.28,  4.32,  8.24,  8.32,  8.4,   8.48,
      16.8,  16.96, 17.12, 17.28, 25.68, 25.92, 26.16, 26.4,  25.68, 25.92,
      26.16, 26.4,  25.68, 25.92, 26.16, 26.4,  17.44, 17.6,  17.76, 17.92,
      8.88,  8.96,  9.04,  9.12,  13.08, 13.2,  13.32, 13.44, 26.64, 26.88,
      27.12, 27.36, 40.68, 41.04, 41.4,  41.76, 40.68, 41.04, 41.4,  41.76,
      40.68, 41.04, 41.4,  41.76, 27.6,  27.84, 28.08, 28.32, 14.04, 14.16,
      14.28, 14.4,  18.4,  18.56, 18.72, 18.88, 37.44, 37.76, 38.08, 38.4,
      57.12, 57.6,  58.08, 58.56, 57.12, 57.6,  58.08, 58.56, 57.12, 57.6,
      58.08, 58.56, 38.72, 39.04, 39.36, 39.68, 19.68, 19.84, 20.,   20.16,
      18.4,  18.56, 18.72, 18.88, 37.44, 37.76, 38.08, 38.4,  57.12, 57.6,
      58.08, 58.56, 57.12, 57.6,  58.08, 58.56, 57.12, 57.6,  58.08, 58.56,
      38.72, 39.04, 39.36, 39.68, 19.68, 19.84, 20.,   20.16, 14.52, 14.64,
      14.76, 14.88, 29.52, 29.76, 30.,   30.24, 45.,   45.36, 45.72, 46.08,
      45.,   45.36, 45.72, 46.08, 45.,   45.36, 45.72, 46.08, 30.48, 30.72,
      30.96, 31.2,  15.48, 15.6,  15.72, 15.84, 10.16, 10.24, 10.32, 10.4,
      20.64, 20.8,  20.96, 21.12, 31.44, 31.68, 31.92, 32.16, 31.44, 31.68,
      31.92, 32.16, 31.44, 31.68, 31.92, 32.16, 21.28, 21.44, 21.6,  21.76,
      10.8,  10.88, 10.96, 11.04, 5.32,  5.36,  5.4,   5.44,  10.8,  10.88,
      10.96, 11.04, 16.44, 16.56, 16.68, 16.8,  16.44, 16.56, 16.68, 16.8,
      16.44, 16.56, 16.68, 16.8,  11.12, 11.2,  11.28, 11.36, 5.64,  5.68,
      5.72,  5.76};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.1961111111,   6.8627777778,   8.6861111111,   8.6716666667,
      9.6508333333,   11.9630555556,  10.2963888889,  8.4730555556,
      9.2427777778,   12.0294444444,  15.0127777778,  14.5316666667,
      15.7608333333,  19.1263888889,  16.3397222222,  13.3563888889,
      14.5427777778,  18.7694444444,  23.2327777778,  22.0716666667,
      23.5508333333,  28.1830555556,  23.9563888889,  19.4930555556,
      20.6183333333,  26.3383333333,  32.2683333333,  29.925,
      31.2375,        36.6608333333,  30.9408333333,  25.0108333333,
      28.4516666667,  36.1716666667,  44.1016666667,  40.425,
      41.7375,        48.4941666667,  40.7741666667,  32.8441666667,
      40.7583333333,  51.6783333333,  62.835,         57.2116666667,
      58.6908333333,  67.7852777778,  56.8652777778,  45.7086111111,
      36.7116666667,  46.5116666667,  56.5083333333,  51.3516666667,
      52.5808333333,  60.6219444444,  50.8219444444,  40.8252777778,
      31.4116666667,  39.7716666667,  48.2883333333,  43.8116666667,
      44.7908333333,  51.5652777778,  43.2052777778,  34.6886111111,
      44.4672222222,  56.1605555556,  68.0105555556,  61.3116666667,
      62.2908333333,  71.2875,        59.5941666667,  47.7441666667,
      58.5405555556,  73.9138888889,  89.4838888889,  80.6116666667,
      81.8408333333,  93.5975,        78.2241666667,  62.6541666667,
      73.8672222222,  93.2405555556,  112.8505555556, 101.5916666667,
      103.0708333333, 117.8008333333, 98.4275,        78.8175,
      73.2583333333,  92.4183333333,  111.7883333333, 100.485,
      101.7975,       116.1808333333, 97.0208333333,  77.6508333333,
      81.0916666667,  102.2516666667, 123.6216666667, 110.985,
      112.2975,       128.0141666667, 106.8541666667, 85.4841666667,
      100.0827777778, 126.1494444444, 152.4527777778, 136.7316666667,
      138.2108333333, 157.4030555556, 131.3363888889, 105.0330555556,
      86.0094444444,  108.3961111111, 130.9794444444, 117.4316666667,
      118.6608333333, 135.0930555556, 112.7063888889, 90.1230555556,
      70.6827777778,  89.0694444444,  107.6127777778, 96.4516666667,
      97.4308333333,  110.8897222222, 92.5030555556,  73.9597222222,
      83.7383333333,  105.4583333333, 127.335,        113.9516666667,
      114.9308333333, 130.6119444444, 108.8919444444, 87.0152777778,
      107.8383333333, 135.7983333333, 163.955,        146.6916666667,
      147.9208333333, 168.0686111111, 140.1086111111, 111.9519444444,
      133.1916666667, 167.7116666667, 202.4683333333, 181.1116666667,
      182.5908333333, 207.4186111111, 172.8986111111, 138.1419444444,
      125.8983333333, 158.4983333333, 191.3083333333, 171.045,
      172.3575,       195.7008333333, 163.1008333333, 130.2908333333,
      133.7316666667, 168.3316666667, 203.1416666667, 181.545,
      182.8575,       207.5341666667, 172.9341666667, 138.1241666667,
      159.4072222222, 200.6205555556, 242.0705555556, 216.2516666667,
      217.7308333333, 247.0208333333, 205.8075,       164.3575,
      135.3072222222, 170.2805555556, 205.4505555556, 183.5116666667,
      184.7408333333, 209.5641666667, 174.5908333333, 139.4208333333,
      109.9538888889, 138.3672222222, 166.9372222222, 149.0916666667,
      150.0708333333, 170.2141666667, 141.8008333333, 113.2308333333};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.12,  0.24,  0.4,   0.4,   0.36,  0.28,  0.16,  0.24,  0.56,
      0.96,  1.44,  1.44,  1.2,   0.88,  0.48,  0.6,   1.32,  2.16,  3.12,
      3.12,  2.52,  1.8,   0.96,  1.12,  2.4,   3.84,  5.44,  5.44,  4.32,
      3.04,  1.6,   1.12,  2.4,   3.84,  5.44,  5.44,  4.32,  3.04,  1.6,
      1.08,  2.28,  3.6,   5.04,  5.04,  3.96,  2.76,  1.44,  0.88,  1.84,
      2.88,  4.,    4.,    3.12,  2.16,  1.12,  0.52,  1.08,  1.68,  2.32,
      2.32,  1.8,   1.24,  0.64,  0.68,  1.4,   2.16,  2.96,  2.96,  2.28,
      1.56,  0.8,   1.52,  3.12,  4.8,   6.56,  6.56,  5.04,  3.44,  1.76,
      2.52,  5.16,  7.92,  10.8,  10.8,  8.28,  5.64,  2.88,  3.68,  7.52,
      11.52, 15.68, 15.68, 12.,   8.16,  4.16,  3.68,  7.52,  11.52, 15.68,
      15.68, 12.,   8.16,  4.16,  3.,    6.12,  9.36,  12.72, 12.72, 9.72,
      6.6,   3.36,  2.16,  4.4,   6.72,  9.12,  9.12,  6.96,  4.72,  2.4,
      1.16,  2.36,  3.6,   4.88,  4.88,  3.72,  2.52,  1.28,  1.32,  2.68,
      4.08,  5.52,  5.52,  4.2,   2.84,  1.44,  2.8,   5.68,  8.64,  11.68,
      11.68, 8.88,  6.,    3.04,  4.44,  9.,    13.68, 18.48, 18.48, 14.04,
      9.48,  4.8,   6.24,  12.64, 19.2,  25.92, 25.92, 19.68, 13.28, 6.72,
      6.24,  12.64, 19.2,  25.92, 25.92, 19.68, 13.28, 6.72,  4.92,  9.96,
      15.12, 20.4,  20.4,  15.48, 10.44, 5.28,  3.44,  6.96,  10.56, 14.24,
      14.24, 10.8,  7.28,  3.68,  1.8,   3.64,  5.52,  7.44,  7.44,  5.64,
      3.8,   1.92};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.7786111111,   10.3922222222,  12.9552777778,  13.7255555556,
      16.4452777778,  17.3722222222,  16.5208333333,  17.3433333333,
      18.4791666667,  19.3016666667,  22.9991666667,  23.9261111111,
      19.8225,        20.5927777778,  16.3325,        16.9461111111,
      17.7152777778,  18.4855555556,  23.0919444444,  24.0588888889,
      28.8619444444,  30.0255555556,  28.0308333333,  29.0633333333,
      30.4891666667,  31.5216666667,  37.0891666667,  38.2527777778,
      31.7125,        32.6794444444,  25.9425,        26.7127777778,
      28.1586111111,  29.0855555556,  36.3752777778,  37.5388888889,
      45.0652777778,  46.4655555556,  42.9008333333,  44.1433333333,
      45.8591666667,  47.1016666667,  54.9658333333,  56.3661111111,
      46.7491666667,  47.9127777778,  38.0591666667,  38.9861111111,
      40.4141666667,  41.2366666667,  51.6441666667,  52.6766666667,
      63.2941666667,  64.5366666667,  58.7475,        59.85,
      61.3725,        62.475,         72.0791666667,  73.3216666667,
      60.8491666667,  61.8816666667,  49.1991666667,  50.0216666667,
      56.0808333333,  56.9033333333,  71.3108333333,  72.3433333333,
      86.9608333333,  88.2033333333,  79.7475,        80.85,
      82.3725,        83.475,         95.7458333333,  96.9883333333,
      80.5158333333,  81.5483333333,  64.8658333333,  65.6883333333,
      80.5897222222,  81.5166666667,  102.1930555556, 103.3566666667,
      124.2697222222, 125.67,         113.1808333333, 114.4233333333,
      116.1391666667, 117.3816666667, 134.1702777778, 135.5705555556,
      112.5669444444, 113.7305555556, 90.4902777778,  91.4172222222,
      72.6530555556,  73.4233333333,  92.0563888889,  93.0233333333,
      111.8530555556, 113.0166666667, 101.6708333333, 102.7033333333,
      104.1291666667, 105.1616666667, 120.0802777778, 121.2438888889,
      100.6769444444, 101.6438888889, 80.8802777778,  81.6505555556,
      62.2097222222,  62.8233333333,  78.7730555556,  79.5433333333,
      95.6497222222,  96.5766666667,  86.8008333333,  87.6233333333,
      88.7591666667,  89.5816666667,  102.2036111111, 103.1305555556,
      85.6402777778,  86.4105555556,  68.7636111111,  69.3772222222,
      88.3208333333,  88.9344444444,  111.5508333333, 112.3211111111,
      135.0941666667, 136.0211111111, 121.8008333333, 122.6233333333,
      123.7591666667, 124.5816666667, 141.6480555556, 142.575,
      118.4180555556, 119.1883333333, 94.8747222222,  95.4883333333,
      116.3108333333, 117.0811111111, 146.8608333333, 147.8277777778,
      177.8041666667, 178.9677777778, 160.1908333333, 161.2233333333,
      162.6491666667, 163.6816666667, 186.0313888889, 187.195,
      155.4813888889, 156.4483333333, 124.5380555556, 125.3083333333,
      146.8075,       147.7344444444, 185.3175,       186.4811111111,
      224.3008333333, 225.7011111111, 201.9408333333, 203.1833333333,
      204.8991666667, 206.1416666667, 234.2013888889, 235.6016666667,
      195.6913888889, 196.855,        156.7080555556, 157.635,
      145.6941666667, 146.5166666667, 183.8041666667, 184.8366666667,
      222.3341666667, 223.5766666667, 199.8675,       200.97,
      202.4925,       203.595,        231.1191666667, 232.3616666667,
      193.0091666667, 194.0416666667, 154.4791666667, 155.3016666667,
      161.3608333333, 162.1833333333, 203.4708333333, 204.5033333333,
      246.0008333333, 247.2433333333, 220.8675,       221.97,
      223.4925,       224.595,        254.7858333333, 256.0283333333,
      212.6758333333, 213.7083333333, 170.1458333333, 170.9683333333,
      199.2386111111, 200.1655555556, 251.1352777778, 252.2988888889,
      303.5052777778, 304.9055555556, 272.2208333333, 273.4633333333,
      275.1791666667, 276.4216666667, 313.4058333333, 314.8061111111,
      261.5091666667, 262.6727777778, 209.1391666667, 210.0661111111,
      171.2486111111, 172.0188888889, 215.8252777778, 216.7922222222,
      260.7952777778, 261.9588888889, 233.8308333333, 234.8633333333,
      236.2891666667, 237.3216666667, 269.0225,       270.1861111111,
      224.4458333333, 225.4127777778, 179.4758333333, 180.2461111111,
      140.7519444444, 141.3655555556, 177.3686111111, 178.1388888889,
      214.2986111111, 215.2255555556, 192.0808333333, 192.9033333333,
      194.0391666667, 194.8616666667, 220.8525,       221.7794444444,
      184.2358333333, 185.0061111111, 147.3058333333, 147.9194444444,
      166.8630555556, 167.4766666667, 210.1463888889, 210.9166666667,
      253.7430555556, 254.67,         227.0808333333, 227.9033333333,
      229.0391666667, 229.8616666667, 260.2969444444, 261.2238888889,
      217.0136111111, 217.7838888889, 173.4169444444, 174.0305555556,
      214.9063888889, 215.6766666667, 270.6297222222, 271.5966666667,
      326.7463888889, 327.91,         292.3508333333, 293.3833333333,
      294.8091666667, 295.8416666667, 334.9736111111, 336.1372222222,
      279.2502777778, 280.2172222222, 223.1336111111, 223.9038888889,
      265.4563888889, 266.3833333333, 334.2597222222, 335.4233333333,
      403.5363888889, 404.9366666667, 360.9808333333, 362.2233333333,
      363.9391666667, 365.1816666667, 413.4369444444, 414.8372222222,
      344.6336111111, 345.7972222222, 275.3569444444, 276.2838888889,
      250.9741666667, 251.7966666667, 315.9641666667, 316.9966666667,
      381.3741666667, 382.6166666667, 340.9875,       342.09,
      343.6125,       344.715,        390.1591666667, 391.4016666667,
      325.1691666667, 326.2016666667, 259.7591666667, 260.5816666667,
      266.6408333333, 267.4633333333, 335.6308333333, 336.6633333333,
      405.0408333333, 406.2833333333, 361.9875,       363.09,
      364.6125,       365.715,        413.8258333333, 415.0683333333,
      344.8358333333, 345.8683333333, 275.4258333333, 276.2483333333,
      317.8875,       318.8144444444, 400.0775,       401.2411111111,
      482.7408333333, 484.1411111111, 431.2608333333, 432.5033333333,
      434.2191666667, 435.4616666667, 492.6413888889, 494.0416666667,
      410.4513888889, 411.615,        327.7880555556, 328.715,
      269.8441666667, 270.6144444444, 339.5941666667, 340.5611111111,
      409.7375,       410.9011111111, 365.9908333333, 367.0233333333,
      368.4491666667, 369.4816666667, 417.9647222222, 419.1283333333,
      348.2147222222, 349.1816666667, 278.0713888889, 278.8416666667,
      219.2941666667, 219.9077777778, 275.9641666667, 276.7344444444,
      332.9475,       333.8744444444, 297.3608333333, 298.1833333333,
      299.3191666667, 300.1416666667, 339.5013888889, 340.4283333333,
      282.8313888889, 283.6016666667, 225.8480555556, 226.4616666667};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x8x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,  0.16,  0.24,  0.36,  0.48,  0.64,  0.8,   0.64,  0.8,
      0.6,   0.72,  0.48,  0.56,  0.28,  0.32,  0.4,   0.48,  0.96,  1.12,
      1.68,  1.92,  2.56,  2.88,  2.56,  2.88,  2.16,  2.4,   1.6,   1.76,
      0.88,  0.96,  1.08,  1.2,   2.4,   2.64,  3.96,  4.32,  5.76,  6.24,
      5.76,  6.24,  4.68,  5.04,  3.36,  3.6,   1.8,   1.92,  2.08,  2.24,
      4.48,  4.8,   7.2,   7.68,  10.24, 10.88, 10.24, 10.88, 8.16,  8.64,
      5.76,  6.08,  3.04,  3.2,   2.08,  2.24,  4.48,  4.8,   7.2,   7.68,
      10.24, 10.88, 10.24, 10.88, 8.16,  8.64,  5.76,  6.08,  3.04,  3.2,
      2.04,  2.16,  4.32,  4.56,  6.84,  7.2,   9.6,   10.08, 9.6,   10.08,
      7.56,  7.92,  5.28,  5.52,  2.76,  2.88,  1.68,  1.76,  3.52,  3.68,
      5.52,  5.76,  7.68,  8.,    7.68,  8.,    6.,    6.24,  4.16,  4.32,
      2.16,  2.24,  1.,    1.04,  2.08,  2.16,  3.24,  3.36,  4.48,  4.64,
      4.48,  4.64,  3.48,  3.6,   2.4,   2.48,  1.24,  1.28,  1.32,  1.36,
      2.72,  2.8,   4.2,   4.32,  5.76,  5.92,  5.76,  5.92,  4.44,  4.56,
      3.04,  3.12,  1.56,  1.6,   2.96,  3.04,  6.08,  6.24,  9.36,  9.6,
      12.8,  13.12, 12.8,  13.12, 9.84,  10.08, 6.72,  6.88,  3.44,  3.52,
      4.92,  5.04,  10.08, 10.32, 15.48, 15.84, 21.12, 21.6,  21.12, 21.6,
      16.2,  16.56, 11.04, 11.28, 5.64,  5.76,  7.2,   7.36,  14.72, 15.04,
      22.56, 23.04, 30.72, 31.36, 30.72, 31.36, 23.52, 24.,   16.,   16.32,
      8.16,  8.32,  7.2,   7.36,  14.72, 15.04, 22.56, 23.04, 30.72, 31.36,
      30.72, 31.36, 23.52, 24.,   16.,   16.32, 8.16,  8.32,  5.88,  6.,
      12.,   12.24, 18.36, 18.72, 24.96, 25.44, 24.96, 25.44, 19.08, 19.44,
      12.96, 13.2,  6.6,   6.72,  4.24,  4.32,  8.64,  8.8,   13.2,  13.44,
      17.92, 18.24, 17.92, 18.24, 13.68, 13.92, 9.28,  9.44,  4.72,  4.8,
      2.28,  2.32,  4.64,  4.72,  7.08,  7.2,   9.6,   9.76,  9.6,   9.76,
      7.32,  7.44,  4.96,  5.04,  2.52,  2.56,  2.6,   2.64,  5.28,  5.36,
      8.04,  8.16,  10.88, 11.04, 10.88, 11.04, 8.28,  8.4,   5.6,   5.68,
      2.84,  2.88,  5.52,  5.6,   11.2,  11.36, 17.04, 17.28, 23.04, 23.36,
      23.04, 23.36, 17.52, 17.76, 11.84, 12.,   6.,    6.08,  8.76,  8.88,
      17.76, 18.,   27.,   27.36, 36.48, 36.96, 36.48, 36.96, 27.72, 28.08,
      18.72, 18.96, 9.48,  9.6,   12.32, 12.48, 24.96, 25.28, 37.92, 38.4,
      51.2,  51.84, 51.2,  51.84, 38.88, 39.36, 26.24, 26.56, 13.28, 13.44,
      12.32, 12.48, 24.96, 25.28, 37.92, 38.4,  51.2,  51.84, 51.2,  51.84,
      38.88, 39.36, 26.24, 26.56, 13.28, 13.44, 9.72,  9.84,  19.68, 19.92,
      29.88, 30.24, 40.32, 40.8,  40.32, 40.8,  30.6,  30.96, 20.64, 20.88,
      10.44, 10.56, 6.8,   6.88,  13.76, 13.92, 20.88, 21.12, 28.16, 28.48,
      28.16, 28.48, 21.36, 21.6,  14.4,  14.56, 7.28,  7.36,  3.56,  3.6,
      7.2,   7.28,  10.92, 11.04, 14.72, 14.88, 14.72, 14.88, 11.16, 11.28,
      7.52,  7.6,   3.8,   3.84};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, SAME3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      18.9436111111,  19.5572222222,  20.1708333333,  20.7844444444,
      25.1402777778,  25.9105555556,  26.6808333333,  27.4511111111,
      31.9636111111,  32.8905555556,  33.8175,        34.7444444444,
      32.2191666667,  33.0416666667,  33.8641666667,  34.6866666667,
      36.1358333333,  36.9583333333,  37.7808333333,  38.6033333333,
      45.0713888889,  45.9983333333,  46.9252777778,  47.8522222222,
      38.8747222222,  39.645,         40.4152777778,  41.1855555556,
      32.0513888889,  32.665,         33.2786111111,  33.8922222222,
      34.6602777778,  35.4305555556,  36.2008333333,  36.9711111111,
      45.2169444444,  46.1838888889,  47.1508333333,  48.1177777778,
      56.5602777778,  57.7238888889,  58.8875,        60.0511111111,
      55.0291666667,  56.0616666667,  57.0941666667,  58.1266666667,
      59.9458333333,  60.9783333333,  62.0108333333,  63.0433333333,
      73.0147222222,  74.1783333333,  75.3419444444,  76.5055555556,
      62.4580555556,  63.425,         64.3919444444,  65.3588888889,
      51.1147222222,  51.885,         52.6552777778,  53.4255555556,
      55.3902777778,  56.3172222222,  57.2441666667,  58.1711111111,
      71.5869444444,  72.7505555556,  73.9141666667,  75.0777777778,
      88.7302777778,  90.1305555556,  91.5308333333,  92.9311111111,
      84.5591666667,  85.8016666667,  87.0441666667,  88.2866666667,
      90.4758333333,  91.7183333333,  92.9608333333,  94.2033333333,
      108.5313888889, 109.9316666667, 111.3319444444, 112.7322222222,
      92.3347222222,  93.4983333333,  94.6619444444,  95.8255555556,
      75.1913888889,  76.1183333333,  77.0452777778,  77.9722222222,
      80.0058333333,  80.8283333333,  81.6508333333,  82.4733333333,
      102.2558333333, 103.2883333333, 104.3208333333, 105.3533333333,
      125.3458333333, 126.5883333333, 127.8308333333, 129.0733333333,
      116.3925,       117.495,        118.5975,       119.7,
      121.6425,       122.745,        123.8475,       124.95,
      142.9158333333, 144.1583333333, 145.4008333333, 146.6433333333,
      120.6658333333, 121.6983333333, 122.7308333333, 123.7633333333,
      97.5758333333,  98.3983333333,  99.2208333333,  100.0433333333,
      111.3391666667, 112.1616666667, 112.9841666667, 113.8066666667,
      141.5891666667, 142.6216666667, 143.6541666667, 144.6866666667,
      172.6791666667, 173.9216666667, 175.1641666667, 176.4066666667,
      158.3925,       159.495,        160.5975,       161.7,
      163.6425,       164.745,        165.8475,       166.95,
      190.2491666667, 191.4916666667, 192.7341666667, 193.9766666667,
      159.9991666667, 161.0316666667, 162.0641666667, 163.0966666667,
      128.9091666667, 129.7316666667, 130.5541666667, 131.3766666667,
      160.2525,       161.1794444444, 162.1063888889, 163.0333333333,
      203.2225,       204.3861111111, 205.5497222222, 206.7133333333,
      247.1391666667, 248.5394444444, 249.9397222222, 251.34,
      225.1191666667, 226.3616666667, 227.6041666667, 228.8466666667,
      231.0358333333, 232.2783333333, 233.5208333333, 234.7633333333,
      266.9402777778, 268.3405555556, 269.7408333333, 271.1411111111,
      223.9702777778, 225.1338888889, 226.2975,       227.4611111111,
      180.0536111111, 180.9805555556, 181.9075,       182.8344444444,
      144.5358333333, 145.3061111111, 146.0763888889, 146.8466666667,
      183.1458333333, 184.1127777778, 185.0797222222, 186.0466666667,
      222.5425,       223.7061111111, 224.8697222222, 226.0333333333,
      202.3091666667, 203.3416666667, 204.3741666667, 205.4066666667,
      207.2258333333, 208.2583333333, 209.2908333333, 210.3233333333,
      238.9969444444, 240.1605555556, 241.3241666667, 242.4877777778,
      200.3869444444, 201.3538888889, 202.3208333333, 203.2877777778,
      160.9902777778, 161.7605555556, 162.5308333333, 163.3011111111,
      123.8058333333, 124.4194444444, 125.0330555556, 125.6466666667,
      156.7758333333, 157.5461111111, 158.3163888889, 159.0866666667,
      190.3725,       191.2994444444, 192.2263888889, 193.1533333333,
      172.7791666667, 173.6016666667, 174.4241666667, 175.2466666667,
      176.6958333333, 177.5183333333, 178.3408333333, 179.1633333333,
      203.4802777778, 204.4072222222, 205.3341666667, 206.2611111111,
      170.5102777778, 171.2805555556, 172.0508333333, 172.8211111111,
      136.9136111111, 137.5272222222, 138.1408333333, 138.7544444444,
      176.0280555556, 176.6416666667, 177.2552777778, 177.8688888889,
      222.3313888889, 223.1016666667, 223.8719444444, 224.6422222222,
      269.2613888889, 270.1883333333, 271.1152777778, 272.0422222222,
      242.7791666667, 243.6016666667, 244.4241666667, 245.2466666667,
      246.6958333333, 247.5183333333, 248.3408333333, 249.1633333333,
      282.3691666667, 283.2961111111, 284.2230555556, 285.15,
      236.0658333333, 236.8361111111, 237.6063888889, 238.3766666667,
      189.1358333333, 189.7494444444, 190.3630555556, 190.9766666667,
      231.8513888889, 232.6216666667, 233.3919444444, 234.1622222222,
      292.7547222222, 293.7216666667, 294.6886111111, 295.6555555556,
      354.4447222222, 355.6083333333, 356.7719444444, 357.9355555556,
      319.3491666667, 320.3816666667, 321.4141666667, 322.4466666667,
      324.2658333333, 325.2983333333, 326.3308333333, 327.3633333333,
      370.8991666667, 372.0627777778, 373.2263888889, 374.39,
      309.9958333333, 310.9627777778, 311.9297222222, 312.8966666667,
      248.3058333333, 249.0761111111, 249.8463888889, 250.6166666667,
      292.6880555556, 293.615,        294.5419444444, 295.4688888889,
      369.4713888889, 370.635,        371.7986111111, 372.9622222222,
      447.2013888889, 448.6016666667, 450.0019444444, 451.4022222222,
      402.6391666667, 403.8816666667, 405.1241666667, 406.3666666667,
      408.5558333333, 409.7983333333, 411.0408333333, 412.2833333333,
      467.0025,       468.4027777778, 469.8030555556, 471.2033333333,
      390.2191666667, 391.3827777778, 392.5463888889, 393.71,
      312.4891666667, 313.4161111111, 314.3430555556, 315.27,
      290.5658333333, 291.3883333333, 292.2108333333, 293.0333333333,
      366.5758333333, 367.6083333333, 368.6408333333, 369.6733333333,
      443.4258333333, 444.6683333333, 445.9108333333, 447.1533333333,
      398.6325,       399.735,        400.8375,       401.94,
      403.8825,       404.985,        406.0875,       407.19,
      460.9958333333, 462.2383333333, 463.4808333333, 464.7233333333,
      384.9858333333, 386.0183333333, 387.0508333333, 388.0833333333,
      308.1358333333, 308.9583333333, 309.7808333333, 310.6033333333,
      321.8991666667, 322.7216666667, 323.5441666667, 324.3666666667,
      405.9091666667, 406.9416666667, 407.9741666667, 409.0066666667,
      490.7591666667, 492.0016666667, 493.2441666667, 494.4866666667,
      440.6325,       441.735,        442.8375,       443.94,
      445.8825,       446.985,        448.0875,       449.19,
      508.3291666667, 509.5716666667, 510.8141666667, 512.0566666667,
      424.3191666667, 425.3516666667, 426.3841666667, 427.4166666667,
      339.4691666667, 340.2916666667, 341.1141666667, 341.9366666667,
      397.5502777778, 398.4772222222, 399.4041666667, 400.3311111111,
      501.1069444444, 502.2705555556, 503.4341666667, 504.5977777778,
      605.6102777778, 607.0105555556, 608.4108333333, 609.8111111111,
      543.1991666667, 544.4416666667, 545.6841666667, 546.9266666667,
      549.1158333333, 550.3583333333, 551.6008333333, 552.8433333333,
      625.4113888889, 626.8116666667, 628.2119444444, 629.6122222222,
      521.8547222222, 523.0183333333, 524.1819444444, 525.3455555556,
      417.3513888889, 418.2783333333, 419.2052777778, 420.1322222222,
      341.7269444444, 342.4972222222, 343.2675,       344.0377777778,
      430.6836111111, 431.6505555556, 432.6175,       433.5844444444,
      520.4269444444, 521.5905555556, 522.7541666667, 523.9177777778,
      466.6291666667, 467.6616666667, 468.6941666667, 469.7266666667,
      471.5458333333, 472.5783333333, 473.6108333333, 474.6433333333,
      536.8813888889, 538.045,        539.2086111111, 540.3722222222,
      447.9247222222, 448.8916666667, 449.8586111111, 450.8255555556,
      358.1813888889, 358.9516666667, 359.7219444444, 360.4922222222,
      280.8902777778, 281.5038888889, 282.1175,       282.7311111111,
      353.9669444444, 354.7372222222, 355.5075,       356.2777777778,
      427.6702777778, 428.5972222222, 429.5241666667, 430.4511111111,
      383.3391666667, 384.1616666667, 384.9841666667, 385.8066666667,
      387.2558333333, 388.0783333333, 388.9008333333, 389.7233333333,
      440.7780555556, 441.705,        442.6319444444, 443.5588888889,
      367.7013888889, 368.4716666667, 369.2419444444, 370.0122222222,
      293.9980555556, 294.6116666667, 295.2252777778, 295.8388888889,
      333.1125,       333.7261111111, 334.3397222222, 334.9533333333,
      419.5225,       420.2927777778, 421.0630555556, 421.8333333333,
      506.5591666667, 507.4861111111, 508.4130555556, 509.34,
      453.3391666667, 454.1616666667, 454.9841666667, 455.8066666667,
      457.2558333333, 458.0783333333, 458.9008333333, 459.7233333333,
      519.6669444444, 520.5938888889, 521.5208333333, 522.4477777778,
      433.2569444444, 434.0272222222, 434.7975,       435.5677777778,
      346.2202777778, 346.8338888889, 347.4475,       348.0611111111,
      429.0425,       429.8127777778, 430.5830555556, 431.3533333333,
      540.2925,       541.2594444444, 542.2263888889, 543.1933333333,
      652.3291666667, 653.4927777778, 654.6563888889, 655.82,
      583.6691666667, 584.7016666667, 585.7341666667, 586.7666666667,
      588.5858333333, 589.6183333333, 590.6508333333, 591.6833333333,
      668.7836111111, 669.9472222222, 671.1108333333, 672.2744444444,
      557.5336111111, 558.5005555556, 559.4675,       560.4344444444,
      445.4969444444, 446.2672222222, 447.0375,       447.8077777778,
      529.9858333333, 530.9127777778, 531.8397222222, 532.7666666667,
      667.3558333333, 668.5194444444, 669.6830555556, 670.8466666667,
      805.6725,       807.0727777778, 808.4730555556, 809.8733333333,
      720.7191666667, 721.9616666667, 723.2041666667, 724.4466666667,
      726.6358333333, 727.8783333333, 729.1208333333, 730.3633333333,
      825.4736111111, 826.8738888889, 828.2741666667, 829.6744444444,
      688.1036111111, 689.2672222222, 690.4308333333, 691.5944444444,
      549.7869444444, 550.7138888889, 551.6408333333, 552.5677777778,
      501.1258333333, 501.9483333333, 502.7708333333, 503.5933333333,
      630.8958333333, 631.9283333333, 632.9608333333, 633.9933333333,
      761.5058333333, 762.7483333333, 763.9908333333, 765.2333333333,
      680.8725,       681.975,        683.0775,       684.18,
      686.1225,       687.225,        688.3275,       689.43,
      779.0758333333, 780.3183333333, 781.5608333333, 782.8033333333,
      649.3058333333, 650.3383333333, 651.3708333333, 652.4033333333,
      518.6958333333, 519.5183333333, 520.3408333333, 521.1633333333,
      532.4591666667, 533.2816666667, 534.1041666667, 534.9266666667,
      670.2291666667, 671.2616666667, 672.2941666667, 673.3266666667,
      808.8391666667, 810.0816666667, 811.3241666667, 812.5666666667,
      722.8725,       723.975,        725.0775,       726.18,
      728.1225,       729.225,        730.3275,       731.43,
      826.4091666667, 827.6516666667, 828.8941666667, 830.1366666667,
      688.6391666667, 689.6716666667, 690.7041666667, 691.7366666667,
      550.0291666667, 550.8516666667, 551.6741666667, 552.4966666667,
      634.8480555556, 635.775,        636.7019444444, 637.6288888889,
      798.9913888889, 800.155,        801.3186111111, 802.4822222222,
      964.0813888889, 965.4816666667, 966.8819444444, 968.2822222222,
      861.2791666667, 862.5216666667, 863.7641666667, 865.0066666667,
      867.1958333333, 868.4383333333, 869.6808333333, 870.9233333333,
      983.8825,       985.2827777778, 986.6830555556, 988.0833333333,
      819.7391666667, 820.9027777778, 822.0663888889, 823.23,
      654.6491666667, 655.5761111111, 656.5030555556, 657.43,
      538.9180555556, 539.6883333333, 540.4586111111, 541.2288888889,
      678.2213888889, 679.1883333333, 680.1552777778, 681.1222222222,
      818.3113888889, 819.475,        820.6386111111, 821.8022222222,
      730.9491666667, 731.9816666667, 733.0141666667, 734.0466666667,
      735.8658333333, 736.8983333333, 737.9308333333, 738.9633333333,
      834.7658333333, 835.9294444444, 837.0930555556, 838.2566666667,
      695.4625,       696.4294444444, 697.3963888889, 698.3633333333,
      555.3725,       556.1427777778, 556.9130555556, 557.6833333333,
      437.9747222222, 438.5883333333, 439.2019444444, 439.8155555556,
      551.1580555556, 551.9283333333, 552.6986111111, 553.4688888889,
      664.9680555556, 665.895,        666.8219444444, 667.7488888889,
      593.8991666667, 594.7216666667, 595.5441666667, 596.3666666667,
      597.8158333333, 598.6383333333, 599.4608333333, 600.2833333333,
      678.0758333333, 679.0027777778, 679.9297222222, 680.8566666667,
      564.8925,       565.6627777778, 566.4330555556, 567.2033333333,
      451.0825,       451.6961111111, 452.3097222222, 452.9233333333};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::SAME;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
TYPED_TEST(AvgWindow5Stride1Grad, VALID3x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.04,  0.08,   0.12,   0.16,   0.24,   0.32,   0.4,    0.48,   0.6,
      0.72,  0.84,   0.96,   1.12,   1.28,   1.44,   1.6,    1.12,   1.28,
      1.44,  1.6,    1.08,   1.2,    1.32,   1.44,   0.88,   0.96,   1.04,
      1.12,  0.52,   0.56,   0.6,    0.64,   0.72,   0.8,    0.88,   0.96,
      1.76,  1.92,   2.08,   2.24,   3.12,   3.36,   3.6,    3.84,   4.8,
      5.12,  5.44,   5.76,   4.8,    5.12,   5.44,   5.76,   4.08,   4.32,
      4.56,  4.8,    3.04,   3.2,    3.36,   3.52,   1.68,   1.76,   1.84,
      1.92,  2.04,   2.16,   2.28,   2.4,    4.56,   4.8,    5.04,   5.28,
      7.56,  7.92,   8.28,   8.64,   11.04,  11.52,  12.,    12.48,  11.04,
      11.52, 12.,    12.48,  9.,     9.36,   9.72,   10.08,  6.48,   6.72,
      6.96,  7.2,    3.48,   3.6,    3.72,   3.84,   4.,     4.16,   4.32,
      4.48,  8.64,   8.96,   9.28,   9.6,    13.92,  14.4,   14.88,  15.36,
      19.84, 20.48,  21.12,  21.76,  19.84,  20.48,  21.12,  21.76,  15.84,
      16.32, 16.8,   17.28,  11.2,   11.52,  11.84,  12.16,  5.92,   6.08,
      6.24,  6.4,    4.,     4.16,   4.32,   4.48,   8.64,   8.96,   9.28,
      9.6,   13.92,  14.4,   14.88,  15.36,  19.84,  20.48,  21.12,  21.76,
      19.84, 20.48,  21.12,  21.76,  15.84,  16.32,  16.8,   17.28,  11.2,
      11.52, 11.84,  12.16,  5.92,   6.08,   6.24,   6.4,    3.96,   4.08,
      4.2,   4.32,   8.4,    8.64,   8.88,   9.12,   13.32,  13.68,  14.04,
      14.4,  18.72,  19.2,   19.68,  20.16,  18.72,  19.2,   19.68,  20.16,
      14.76, 15.12,  15.48,  15.84,  10.32,  10.56,  10.8,   11.04,  5.4,
      5.52,  5.64,   5.76,   3.28,   3.36,   3.44,   3.52,   6.88,   7.04,
      7.2,   7.36,   10.8,   11.04,  11.28,  11.52,  15.04,  15.36,  15.68,
      16.,   15.04,  15.36,  15.68,  16.,    11.76,  12.,    12.24,  12.48,
      8.16,  8.32,   8.48,   8.64,   4.24,   4.32,   4.4,    4.48,   1.96,
      2.,    2.04,   2.08,   4.08,   4.16,   4.24,   4.32,   6.36,   6.48,
      6.6,   6.72,   8.8,    8.96,   9.12,   9.28,   8.8,    8.96,   9.12,
      9.28,  6.84,   6.96,   7.08,   7.2,    4.72,   4.8,    4.88,   4.96,
      2.44,  2.48,   2.52,   2.56,   2.6,    2.64,   2.68,   2.72,   5.36,
      5.44,  5.52,   5.6,    8.28,   8.4,    8.52,   8.64,   11.36,  11.52,
      11.68, 11.84,  11.36,  11.52,  11.68,  11.84,  8.76,   8.88,   9.,
      9.12,  6.,     6.08,   6.16,   6.24,   3.08,   3.12,   3.16,   3.2,
      5.84,  5.92,   6.,     6.08,   12.,    12.16,  12.32,  12.48,  18.48,
      18.72, 18.96,  19.2,   25.28,  25.6,   25.92,  26.24,  25.28,  25.6,
      25.92, 26.24,  19.44,  19.68,  19.92,  20.16,  13.28,  13.44,  13.6,
      13.76, 6.8,    6.88,   6.96,   7.04,   9.72,   9.84,   9.96,   10.08,
      19.92, 20.16,  20.4,   20.64,  30.6,   30.96,  31.32,  31.68,  41.76,
      42.24, 42.72,  43.2,   41.76,  42.24,  42.72,  43.2,   32.04,  32.4,
      32.76, 33.12,  21.84,  22.08,  22.32,  22.56,  11.16,  11.28,  11.4,
      11.52, 14.24,  14.4,   14.56,  14.72,  29.12,  29.44,  29.76,  30.08,
      44.64, 45.12,  45.6,   46.08,  60.8,   61.44,  62.08,  62.72,  60.8,
      61.44, 62.08,  62.72,  46.56,  47.04,  47.52,  48.,    31.68,  32.,
      32.32, 32.64,  16.16,  16.32,  16.48,  16.64,  14.24,  14.4,   14.56,
      14.72, 29.12,  29.44,  29.76,  30.08,  44.64,  45.12,  45.6,   46.08,
      60.8,  61.44,  62.08,  62.72,  60.8,   61.44,  62.08,  62.72,  46.56,
      47.04, 47.52,  48.,    31.68,  32.,    32.32,  32.64,  16.16,  16.32,
      16.48, 16.64,  11.64,  11.76,  11.88,  12.,    23.76,  24.,    24.24,
      24.48, 36.36,  36.72,  37.08,  37.44,  49.44,  49.92,  50.4,   50.88,
      49.44, 49.92,  50.4,   50.88,  37.8,   38.16,  38.52,  38.88,  25.68,
      25.92, 26.16,  26.4,   13.08,  13.2,   13.32,  13.44,  8.4,    8.48,
      8.56,  8.64,   17.12,  17.28,  17.44,  17.6,   26.16,  26.4,   26.64,
      26.88, 35.52,  35.84,  36.16,  36.48,  35.52,  35.84,  36.16,  36.48,
      27.12, 27.36,  27.6,   27.84,  18.4,   18.56,  18.72,  18.88,  9.36,
      9.44,  9.52,   9.6,    4.52,   4.56,   4.6,    4.64,   9.2,    9.28,
      9.36,  9.44,   14.04,  14.16,  14.28,  14.4,   19.04,  19.2,   19.36,
      19.52, 19.04,  19.2,   19.36,  19.52,  14.52,  14.64,  14.76,  14.88,
      9.84,  9.92,   10.,    10.08,  5.,     5.04,   5.08,   5.12,   5.16,
      5.2,   5.24,   5.28,   10.48,  10.56,  10.64,  10.72,  15.96,  16.08,
      16.2,  16.32,  21.6,   21.76,  21.92,  22.08,  21.6,   21.76,  21.92,
      22.08, 16.44,  16.56,  16.68,  16.8,   11.12,  11.2,   11.28,  11.36,
      5.64,  5.68,   5.72,   5.76,   10.96,  11.04,  11.12,  11.2,   22.24,
      22.4,  22.56,  22.72,  33.84,  34.08,  34.32,  34.56,  45.76,  46.08,
      46.4,  46.72,  45.76,  46.08,  46.4,   46.72,  34.8,   35.04,  35.28,
      35.52, 23.52,  23.68,  23.84,  24.,    11.92,  12.,    12.08,  12.16,
      17.4,  17.52,  17.64,  17.76,  35.28,  35.52,  35.76,  36.,    53.64,
      54.,   54.36,  54.72,  72.48,  72.96,  73.44,  73.92,  72.48,  72.96,
      73.44, 73.92,  55.08,  55.44,  55.8,   56.16,  37.2,   37.44,  37.68,
      37.92, 18.84,  18.96,  19.08,  19.2,   24.48,  24.64,  24.8,   24.96,
      49.6,  49.92,  50.24,  50.56,  75.36,  75.84,  76.32,  76.8,   101.76,
      102.4, 103.04, 103.68, 101.76, 102.4,  103.04, 103.68, 77.28,  77.76,
      78.24, 78.72,  52.16,  52.48,  52.8,   53.12,  26.4,   26.56,  26.72,
      26.88, 24.48,  24.64,  24.8,   24.96,  49.6,   49.92,  50.24,  50.56,
      75.36, 75.84,  76.32,  76.8,   101.76, 102.4,  103.04, 103.68, 101.76,
      102.4, 103.04, 103.68, 77.28,  77.76,  78.24,  78.72,  52.16,  52.48,
      52.8,  53.12,  26.4,   26.56,  26.72,  26.88,  19.32,  19.44,  19.56,
      19.68, 39.12,  39.36,  39.6,   39.84,  59.4,   59.76,  60.12,  60.48,
      80.16, 80.64,  81.12,  81.6,   80.16,  80.64,  81.12,  81.6,   60.84,
      61.2,  61.56,  61.92,  41.04,  41.28,  41.52,  41.76,  20.76,  20.88,
      21.,   21.12,  13.52,  13.6,   13.68,  13.76,  27.36,  27.52,  27.68,
      27.84, 41.52,  41.76,  42.,    42.24,  56.,    56.32,  56.64,  56.96,
      56.,   56.32,  56.64,  56.96,  42.48,  42.72,  42.96,  43.2,   28.64,
      28.8,  28.96,  29.12,  14.48,  14.56,  14.64,  14.72,  7.08,   7.12,
      7.16,  7.2,    14.32,  14.4,   14.48,  14.56,  21.72,  21.84,  21.96,
      22.08, 29.28,  29.44,  29.6,   29.76,  29.28,  29.44,  29.6,   29.76,
      22.2,  22.32,  22.44,  22.56,  14.96,  15.04,  15.12,  15.2,   7.56,
      7.6,   7.64,   7.68};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const auto padding = PaddingMode::VALID;
  const auto params = getPoolingParams<5, 1>(in_shape, padding);
  const DataType max_input_val = 2048.0;
  this->test_pool(exp_out, params, max_input_val);
}
